// Generated by dart2js, the Dart to JavaScript compiler version: 1.0.0.7_r30338.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this._target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this._target.call(this._self);
  }
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$20 = [P, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$i1 = [W, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this._target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$20 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$4 = [W, {"": "Closure;call$4,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "CanvasGradient|CanvasPattern|DOMImplementation|MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  insert$2: function(receiver, index, value) {
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("insert"));
    receiver.splice(index, 0, value);
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = P.List_List(t1, null);
    for (i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw H.wrapException(P.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  removeRange$2: function(receiver, start, end) {
    var receiverLength;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeRange"));
    receiverLength = receiver.length;
    if (start < 0 || start > receiverLength)
      throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
    if (end < start || end > receiverLength)
      throw H.wrapException(P.RangeError$range(end, start, receiverLength));
    H.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    this.set$length(receiver, receiverLength - (end - start));
  },
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], other))
        return true;
    return false;
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw H.wrapException(P.RangeError$(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver))
      return "-" + result;
    return result;
  },
  toRadixString$1: function(receiver, radix) {
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$(radix));
    return receiver.toString(radix);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw H.wrapException(P.RangeError$range(start, 0, string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (typeof t3 !== "number" || Math.floor(t3) !== t3)
        H.throwExpression(new P.ArgumentError(t3));
      if (t3 < 0)
        H.throwExpression(P.RangeError$value(t3));
      if (t3 >= t2)
        H.throwExpression(P.RangeError$value(t3));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        H.throwExpression(P.RangeError$value(i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern === receiver.substring(index, endIndex);
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(P.RangeError$value(startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(P.RangeError$value(endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(P.RangeError$value(endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    var t1, t2, i;
    if (pattern == null)
      H.throwExpression(new P.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (typeof pattern === "string")
      return receiver.indexOf(pattern, start);
    for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
      if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id>,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$__isolate_helper$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.__isolate_helper$_controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;__isolate_helper$_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this.__isolate_helper$_id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this.__isolate_helper$_id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$__isolate_helper$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw H.ioore(match, 2);
    if (match[2] != null)
      return parseInt(source, 16);
    if (3 >= t1)
      throw H.ioore(match, 3);
    if (match[3] != null)
      return parseInt(source, 10);
    return handleError.call$1(source);
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, 10);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
  },
  $isBoundClosure: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
},

StringMatch: {"": "Object;start,input,pattern",
  $index: function(_, g) {
    if (!J.$eq(g, 0))
      H.throwExpression(P.RangeError$value(g));
    return this.pattern;
  }
}}],
["bot", "package:bot/bot.dart", , X, {
CollectionUtil_allUnique: function(items) {
  var t1, i, j, j0;
  X._metaRequireArgumentNotNullOrEmpty("items");
  for (t1 = J.getInterceptor$asx(items), i = 0; i < t1.get$length(items); i = j)
    for (j = i + 1, j0 = j; j0 < t1.get$length(items); ++j0)
      if (J.$eq(t1.elementAt$1(items, i), t1.elementAt$1(items, j0)))
        return false;
  return true;
},

CollectionUtil_count: function(source, test) {
  return source.fold$2(source, 0, new X.CollectionUtil_count_closure(test));
},

CollectionUtil_exclude: function(source, itemsToExclude) {
  X._metaRequireArgumentNotNullOrEmpty("itemsToExclude");
  return X.$$(X.$$(P.IterableBase.prototype.where$1.call(source, source, new X.CollectionUtil_exclude_closure(itemsToExclude))));
},

CollectionUtil_distinct: function(source, comparer) {
  var t1 = {};
  t1.comparer_0 = comparer;
  if (t1.comparer_0 == null)
    t1.comparer_0 = new X.CollectionUtil_distinct_closure();
  t1 = new X._FuncEnumerable(source, new X.CollectionUtil_distinct_closure0(t1));
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
},

CollectionUtil_toMap: function(source, valueFunc, keyFunc) {
  var map, t1, e, k;
  keyFunc = new X.CollectionUtil_toMap_closure();
  map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (t1 = source.get$iterator(source); t1.moveNext$0();) {
    e = t1.get$current();
    k = keyFunc.call$1(e);
    if (map.containsKey$1(k))
      throw H.wrapException(P.UnsupportedError$("The key '" + H.S(k) + "' is duplicated"));
    map.$indexSet(map, k, valueFunc.call$1(e));
  }
  return map;
},

$$: function(source) {
  var t1 = J.getInterceptor(source);
  if (!!t1.$isEnumerable)
    return source;
  else {
    X._metaRequireArgumentNotNullOrEmpty("source");
    t1 = new X._SimpleEnumerable(source);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

isValidNumber: function(value) {
  return value != null && !J.getInterceptor$n(value).get$isInfinite(value) && !C.JSNumber_methods.get$isNaN(value);
},

rnd: function() {
  if ($._botHelperRandom == null)
    $._botHelperRandom = C.C__Random;
  return $._botHelperRandom;
},

requireArgument: function(truth, argName, message) {
  X._metaRequireArgumentNotNullOrEmpty(argName);
  if (!truth)
    throw H.wrapException(X.DetailedArgumentError$(argName, message == null || message.length === 0 ? "value was invalid" : message));
},

_metaRequireArgumentNotNullOrEmpty: function(argName) {
  if (argName.length === 0)
    throw H.wrapException(X.InvalidOperationError$("That's just sad. Give me a good argName"));
},

Util_getHashCode: function(source) {
  var t1, hash, h;
  X._metaRequireArgumentNotNullOrEmpty("source");
  if (source == null)
    H.throwExpression(X.NullArgumentError$("source"));
  for (t1 = J.get$iterator$ax(source), hash = 0; t1.moveNext$0();) {
    h = t1.get$current();
    hash = 536870911 & hash + (h == null ? 0 : J.get$hashCode$(h));
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    hash = (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
  }
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

Attachable: {"": "Object;name>"},

AttachableObject: {"": "DisposableImpl;",
  _getStream$1: function(property) {
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    return J.get$stream$x(this._eventHandlers.putIfAbsent$2(property, new X.AttachableObject__getStream_closure(this, property)));
  },
  _bot$_onCancel$1: function(property) {
    var t1, handle;
    if (!this._disposed) {
      t1 = this._eventHandlers;
      handle = t1.$index(t1, property);
      if (!handle.get$hasListener()) {
        handle.dispose$0();
        t1.remove$1(t1, property);
      }
    }
  },
  _fireEvent$2: function(attachable, args) {
    var t1, handle;
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    t1 = this._eventHandlers;
    handle = t1.$index(t1, attachable);
    if (handle != null)
      J.add$1$ax(handle, args);
  },
  _bot$_set$2: function(key, value) {
    var t1;
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    t1 = this._propertyValues;
    t1.$indexSet(t1, key, value);
    this._fireChange$3(key, value, false);
  },
  _remove$1: function(key) {
    var t1 = this._disposed;
    if (t1)
      H.throwExpression(X.DisposedError$());
    if (t1)
      H.throwExpression(X.DisposedError$());
    t1 = this._propertyValues;
    if (t1.containsKey$1(key)) {
      t1.remove$1(t1, key);
      this._fireChange$3(key, null, true);
    }
  },
  _getValueOrUndefined$3: function(key, obj, ifAbsent) {
    var t1, value;
    t1 = this._disposed;
    if (t1)
      H.throwExpression(X.DisposedError$());
    if (t1)
      H.throwExpression(X.DisposedError$());
    t1 = this._propertyValues;
    if (t1.containsKey$1(key))
      return t1.$index(t1, key);
    else if (ifAbsent != null) {
      value = ifAbsent.call$1(obj);
      this._bot$_set$2(key, value);
      return value;
    } else
      return C.C__UndefinedValue;
  },
  _fireChange$3: function(key, value, isClear) {
    var t1, handle;
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    t1 = this._eventHandlers;
    handle = t1.$index(t1, key);
    if (handle != null) {
      t1 = J.getInterceptor$ax(handle);
      if (isClear)
        t1.add$1(handle, new X.PropertyChangedEventArgs(key, null, true));
      else
        t1.add$1(handle, new X.PropertyChangedEventArgs(key, value, false));
    }
  }
},

AttachableObject__getStream_closure: {"": "Closure;this_0,property_1",
  call$0: function() {
    var t1 = new X.EventHandle(P.StreamController_StreamController$broadcast(new X.AttachableObject__getStream__closure(this.this_0, this.property_1), null, true, null), false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

AttachableObject__getStream__closure: {"": "Closure;this_2,property_3",
  call$0: function() {
    return this.this_2._bot$_onCancel$1(this.property_3);
  }
},

AttachedEvent: {"": "Attachable;name"},

Property: {"": "Attachable;defaultValue,name",
  get$2: function(obj, ifAbsent) {
    var coreValue = obj._getValueOrUndefined$3(this, obj, ifAbsent);
    if (coreValue !== C.C__UndefinedValue)
      return coreValue;
    else
      return this.defaultValue;
  },
  get$1: function(obj) {
    return this.get$2(obj, null);
  },
  toString$0: function(_) {
    return "Property '" + this.name + "'";
  },
  static: {
"": "Property_Undefined",
}

},

_UndefinedValue: {"": "Object;"},

PropertyChangedEventArgs: {"": "EventArgs;property,newValue,cleared"},

CollectionUtil_count_closure: {"": "Closure;test_0",
  call$2: function(previous, element) {
    if (this.test_0.call$1(element) === true)
      return J.$add$ns(previous, 1);
    else
      return previous;
  },
  $is_args2: true
},

CollectionUtil_exclude_closure: {"": "Closure;itemsToExclude_0",
  call$1: function(e) {
    return !J.contains$1$asx(this.itemsToExclude_0, e);
  },
  $is_args1: true
},

CollectionUtil_distinct_closure: {"": "Closure;",
  call$2: function(a, b) {
    return J.$eq(a, b);
  },
  $is_args2: true
},

CollectionUtil_distinct_closure0: {"": "Closure;box_0",
  call$1: function(s) {
    var t1, t2, t3;
    t1 = J.get$iterator$ax(s);
    t2 = this.box_0.comparer_0;
    t3 = P.List_List(null, null);
    H.setRuntimeTypeInfo(t3, [null]);
    t3 = new X._DistinctIterator(t1, t2, t3, null);
    H.setRuntimeTypeInfo(t3, [null]);
    return t3;
  },
  $is_args1: true
},

CollectionUtil_toMap_closure: {"": "Closure;",
  call$1: function(a) {
    return a;
  },
  $is_args1: true
},

_DistinctIterator: {"": "Object;_bot$_source,_comparer,_found,_bot$_current",
  _comparer$2: function(arg0, arg1) {
    return this._comparer.call$2(arg0, arg1);
  },
  get$current: function() {
    return this._bot$_current;
  },
  moveNext$0: function() {
    var t1, t2, candidate;
    for (t1 = this._bot$_source, t2 = this._found; t1.moveNext$0();) {
      candidate = t1.get$current();
      if (!H.IterableMixinWorkaround_any(t2, new X._DistinctIterator_moveNext_closure(this, candidate))) {
        this._bot$_current = candidate;
        t2.push(this._bot$_current);
        return true;
      }
    }
    return false;
  }
},

_DistinctIterator_moveNext_closure: {"": "Closure;this_0,candidate_1",
  call$1: function(e) {
    return this.this_0._comparer$2(e, this.candidate_1);
  },
  $is_args1: true
},

_SequenceIterator: {"": "Object;_list,_bot$_length,_bot$_position,_bot$_current",
  moveNext$0: function() {
    var t1, t2, nextPosition;
    t1 = this._list;
    t2 = this._bot$_length;
    if (t1.get$length(t1) !== t2)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    nextPosition = this._bot$_position + 1;
    if (nextPosition < t2) {
      this._bot$_position = nextPosition;
      this._bot$_current = t1.$index(t1, nextPosition);
      return true;
    }
    this._bot$_current = null;
    return false;
  },
  get$current: function() {
    return this._bot$_current;
  },
  static: {
_SequenceIterator$: function(list) {
  return new X._SequenceIterator(list, list.get$length(list), -1, null);
}}

},

Enumerable: {"": "IterableBase;",
  map$1: function(_, f) {
    return X.$$(P.IterableBase.prototype.map$1.call(this, this, f));
  },
  exclude$1: function(items) {
    return X.CollectionUtil_exclude(this, items);
  },
  forEachWithIndex$1: function(f) {
    var t1, i, i0;
    for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
      i0 = i + 1;
      f.call$2(t1.get$current(), i);
    }
  },
  toString$0: function(_) {
    return "[" + this.join$1(this, ", ") + "]";
  },
  $isEnumerable: true,
  $asIterableBase: null
},

_SimpleEnumerable: {"": "Enumerable;_bot$_source",
  get$iterator: function(_) {
    return J.get$iterator$ax(this._bot$_source);
  },
  $asEnumerable: null
},

_FuncEnumerable: {"": "Enumerable;_bot$_source,_func",
  _func$1: function(arg0) {
    return this._func.call$1(arg0);
  },
  get$iterator: function(_) {
    return this._func$1(this._bot$_source);
  },
  $asEnumerable: function(TSource, TOutput) {
    return [TOutput];
  }
},

Grouping: {"": "Object;_values",
  $index: function(_, key) {
    var t1 = this._values;
    return t1.$index(t1, key);
  },
  forEach$1: function(_, f) {
    var t1 = this._values;
    return t1.forEach$1(t1, f);
  },
  get$length: function(_) {
    return this._values._collection$_length;
  },
  toString$0: function(_) {
    var t1 = this._values;
    return t1.toString$0(t1);
  },
  Grouping$2: function(source, keyFunc, $K, $V) {
    var t1, t2, value;
    for (t1 = source.get$iterator(source), t2 = this._values; t1.moveNext$0();) {
      value = t1.get$current();
      J.add$1$ax(t2.putIfAbsent$2(keyFunc.call$1(value), new X.Grouping_closure($V)), value);
    }
  },
  static: {
Grouping$: function(source, keyFunc, $K, $V) {
  var t1 = new X.Grouping(P.HashMap_HashMap(null, null, null, $K, [J.JSArray, $V]));
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  t1.Grouping$2(source, keyFunc, $K, $V);
  return t1;
}}

},

Grouping_closure0: {"": "Closure;",
  call$1: function(v) {
    return v;
  },
  $is_args1: true
},

Grouping_closure: {"": "Closure;V_0",
  call$0: function() {
    var t1, t2;
    t1 = this.V_0;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  }
},

NumberEnumerable: {"": "IterableBase;",
  sum$0: function() {
    var t1, theSum, n;
    for (t1 = this.get$iterator(this), theSum = 0; t1.moveNext$0();) {
      n = t1.get$current();
      if (n == null)
        throw H.wrapException(C.InvalidOperationError_61T);
      if (typeof n !== "number")
        throw H.iae(n);
      theSum += n;
    }
    return theSum;
  },
  $asIterableBase: null
},

_SimpleNumEnumerable: {"": "NumberEnumerable;_bot$_source",
  get$iterator: function(_) {
    var t1 = this._bot$_source;
    return t1.get$iterator(t1);
  },
  $asNumberEnumerable: null
},

ReadOnlyCollection: {"": "Sequence;_items",
  get$length: function(_) {
    return this._items.length;
  },
  $index: function(_, index) {
    var t1 = this._items;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asSequence: null,
  $asEnumerable: null
},

Sequence: {"": "Enumerable;",
  indexOf$2: function(_, value, start) {
    var i;
    for (i = start; i < this.get$length(this); ++i)
      if (J.$eq(this.$index(this, i), value))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, value) {
    return this.indexOf$2($receiver, value, 0);
  },
  elementAt$1: function(_, index) {
    return this.$index(this, index);
  },
  get$iterator: function(_) {
    return X._SequenceIterator$(this);
  },
  $asEnumerable: null
},

HslColor: {"": "Object;h<,s,l",
  toRgb$0: function() {
    var normH, t1, b, g, r, t2, temp2, temp1;
    normH = this.h / 360;
    t1 = this.s;
    if (t1 === 0) {
      b = this.l * 255;
      g = b;
      r = g;
    } else {
      t2 = this.l;
      temp2 = t2 < 0.5 ? t2 * (1 + t1) : t2 + t1 - t1 * t2;
      temp1 = 2 * t2 - temp2;
      r = 255 * X.HslColor__hueToRgb(temp1, temp2, normH + 0.3333333333333333);
      g = 255 * X.HslColor__hueToRgb(temp1, temp2, normH);
      b = 255 * X.HslColor__hueToRgb(temp1, temp2, normH - 0.3333333333333333);
    }
    return X.RgbColor_RgbColor(C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(r))), C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(g))), C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(b))));
  },
  get$hashCode: function(_) {
    return X.Util_getHashCode([this.h, this.s, this.l]);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return other.get$h() === this.h && other.s === this.s && other.l === this.l;
  },
  toString$0: function(_) {
    return "{HslColor: " + H.S(this.h) + ", " + H.S(this.s) + ", " + H.S(this.l) + "}";
  },
  static: {
HslColor_HslColor: function(h, s, l) {
  var t1, t2, message;
  t1 = h != null && !J.getInterceptor$n(h).get$isInfinite(h) && !C.JSNumber_methods.get$isNaN(h);
  if (!t1)
    H.throwExpression(X.DetailedArgumentError$("h", "hue value was not valid"));
  if (typeof h !== "number")
    throw h.$mod();
  t1 = C.JSNumber_methods.$mod(h, 360);
  t2 = !C.JSNumber_methods.get$isInfinite(s) && !C.JSNumber_methods.get$isNaN(s);
  if (!t2)
    H.throwExpression(X.DetailedArgumentError$("s", "must be a valid number"));
  t2 = s >= 0 && s <= 1;
  message = "must be >= 0 && <= 1 but was " + H.S(s);
  if (!t2)
    H.throwExpression(X.DetailedArgumentError$("s", message.length === 0 ? "value was invalid" : message));
  t2 = !C.JSDouble_methods.get$isInfinite(l) && !C.JSDouble_methods.get$isNaN(l);
  if (!t2)
    H.throwExpression(X.DetailedArgumentError$("l", "must be a valid number"));
  t2 = l >= 0 && l <= 1;
  message = "must be >= 0 && <=1 but was " + H.S(l);
  if (!t2)
    H.throwExpression(X.DetailedArgumentError$("l", message.length === 0 ? "value was invalid" : message));
  return new X.HslColor(t1, s, l);
},

HslColor__hueToRgb: function(v1, v2, vH) {
  vH = C.JSNumber_methods.$mod(vH, 1);
  if (6 * vH < 1)
    return v1 + (v2 - v1) * 6 * vH;
  else if (2 * vH < 1)
    return v2;
  else if (3 * vH < 2)
    return v1 + (v2 - v1) * (0.6666666666666666 - vH) * 6;
  return v1;
}}

},

RgbColor: {"": "Object;r>,g<,b",
  toHex$0: function() {
    var buffer = P.StringBuffer$("#");
    H.IterableMixinWorkaround_forEach([this.r, this.g, this.b], new X.RgbColor_toHex_closure(buffer));
    return buffer._contents;
  },
  get$hashCode: function(_) {
    return X.Util_getHashCode([this.r, this.g, this.b]);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return J.get$r$x(other) === this.r && other.get$g() === this.g && other.b === this.b;
  },
  toString$0: function(_) {
    return "{RgbColor: " + this.r + ", " + this.g + ", " + this.b + "}";
  },
  static: {
"": "RgbColor__validHexColorRe",
RgbColor_RgbColor: function(r, g, b) {
  X.RgbColor__validateComponent(r, "r");
  X.RgbColor__validateComponent(g, "g");
  X.RgbColor__validateComponent(b, "b");
  return new X.RgbColor(r, g, b);
},

RgbColor__validateComponent: function(c, $name) {
  X.requireArgument(X.isValidNumber(c), $name, null);
  X.requireArgument(c >= 0 && c <= 255, $name, null);
}}

},

RgbColor_toHex_closure: {"": "Closure;buffer_0",
  call$1: function(c) {
    var t1 = J.toRadixString$1$n(c, 16);
    if (t1.length === 1)
      t1 = "0" + t1;
    this.buffer_0.write$1(t1);
  },
  $is_args1: true
},

DisposedError: {"": "StateError;message", static: {
DisposedError$: function() {
  return new X.DisposedError("Invalid operation on disposed object");
}}
},

DisposableImpl: {"": "Object;"},

EventArgs: {"": "Object;", static: {
"": "EventArgs_empty",
}
},

EventHandle: {"": "Object;_controller,_disposed",
  add$1: function(_, $event) {
    var t1 = this._controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1($event);
    return;
  },
  dispose$0: function() {
    if (this._disposed)
      throw H.wrapException(X.DisposedError$());
    this._disposed = true;
    var t1 = this._controller;
    t1.close$0(t1);
  },
  get$stream: function(_) {
    var t1, t2;
    t1 = this._controller;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    return t2;
  },
  get$hasListener: function() {
    var t1 = this._controller;
    return t1._async$_next !== t1;
  }
},

DetailedArgumentError: {"": "ArgumentError;argument,details,message",
  get$message: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  toString$0: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  DetailedArgumentError$2: function(argument, details) {
    var t1;
    if (this.argument.length === 0)
      throw H.wrapException(X.InvalidOperationError$("That's just sad. Give me a valid argument"));
    t1 = this.details;
    if (t1 == null || t1.length === 0)
      throw H.wrapException(X.InvalidOperationError$("That's just sad. I need details!"));
  },
  static: {
DetailedArgumentError$: function(argument, details) {
  var t1 = new X.DetailedArgumentError(argument, details, null);
  t1.DetailedArgumentError$2(argument, details);
  return t1;
}}

},

InvalidOperationError: {"": "Object;message", static: {
InvalidOperationError$: function(message) {
  return new X.InvalidOperationError(message);
}}
},

NullArgumentError: {"": "DetailedArgumentError;argument,details,message", static: {
NullArgumentError$: function(argument) {
  var t1 = new X.NullArgumentError(argument, "cannot be null", null);
  t1.DetailedArgumentError$2(argument, "cannot be null");
  return t1;
}}
},

AffineTransform: {"": "Object;_scX<,_shY,_shX,_scY,_tX,_tY",
  concatenate$1: function(tx) {
    var m0, m1;
    m0 = this._scX;
    m1 = this._shX;
    this._scX = tx.get$_scX() * m0 + tx._shY * m1;
    this._shX = tx._shX * m0 + tx._scY * m1;
    this._tX = this._tX + (tx._tX * m0 + tx._tY * m1);
    m0 = this._shY;
    m1 = this._scY;
    this._shY = tx._scX * m0 + tx._shY * m1;
    this._scY = tx._shX * m0 + tx._scY * m1;
    this._tY = this._tY + (tx._tX * m0 + tx._tY * m1);
    return this;
  },
  get$concatenate: function() {
    return new H.BoundClosure$1(this, X.AffineTransform.prototype.concatenate$1, null, "concatenate$1");
  },
  translate$2: function(_, dx, dy) {
    var t1, t2, t3, t4;
    t1 = this._tX;
    t2 = this._scX;
    if (typeof dx !== "number")
      throw dx.$mul();
    t3 = J.getInterceptor$n(dy);
    t4 = t3.$mul(dy, this._shX);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    this._tX = t1 + (dx * t2 + t4);
    t4 = this._tY;
    t2 = this._shY;
    t3 = t3.$mul(dy, this._scY);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    this._tY = t4 + (dx * t2 + t3);
    return this;
  },
  setFromTransfrom$1: function(tx) {
    X._metaRequireArgumentNotNullOrEmpty("tx");
    return this.setTransform$6(this, tx._scX, tx._shY, tx._shX, tx._scY, tx._tX, tx._tY);
  },
  setTransform$6: function(_, m00, m10, m01, m11, m02, m12) {
    this._scX = m00;
    this._shY = m10;
    this._shX = m01;
    this._scY = m11;
    this._tX = m02;
    this._tY = m12;
    return this;
  },
  transformCoordinate$1: function(point) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$x(point);
    t2 = t1.get$x(point);
    t3 = this._scX;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t1 = t1.get$y(point);
    t4 = this._shX;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t1 = new X.Coordinate(t2 * t3 + t1 * t4 + this._tX, t2 * this._shY + t1 * this._scY + this._tY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  createInverse$0: function() {
    var t1, t2, t3, t4, det, t5, t6;
    t1 = this._scX;
    t2 = this._scY;
    t3 = this._shX;
    t4 = this._shY;
    det = t1 * t2 - t3 * t4;
    t5 = this._tY;
    t6 = this._tX;
    return X.AffineTransform$(t2 / det, -t4 / det, -t3 / det, t1 / det, (t3 * t5 - t2 * t6) / det, (t4 * t6 - t1 * t5) / det);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this._scX === other.get$_scX() && this._shX === other._shX && this._tX === other._tX && this._shY === other._shY && this._scY === other._scY && this._tY === other._tY;
  },
  get$hashCode: function(_) {
    return 0;
  },
  toString$0: function(_) {
    return C.JSArray_methods.join$1([this._scX, this._shY, this._shX, this._scY, this._tX, this._tY], ", ");
  },
  static: {
AffineTransform$: function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new X.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
}}

},

Box: {"": "Rectangle;left,top,width,height",
  get$topLeft: function(_) {
    var t1 = new X.Coordinate(this.left, this.top);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  constrain$1: function(value) {
    var t1, t2, t3, x;
    X._metaRequireArgumentNotNullOrEmpty("value");
    t1 = value.x;
    X.requireArgument(X.isValidNumber(t1) && X.isValidNumber(value.y), "value", null);
    t2 = this.left;
    t3 = this.width;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    x = P.min(t2 + t3, P.max(t2, t1));
    t1 = this.top;
    t2 = this.height;
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1 = new X.Coordinate(x, P.min(t1 + t2, P.max(t1, value.y)));
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $asRectangle: null
},

Coordinate: {"": "Point;x,y",
  getDistance$1: function(other) {
    return this.distanceTo$1(other);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new X.Coordinate(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Coordinate", 0)]);
    return t2;
  },
  $asPoint: null,
  static: {
Coordinate_difference: function(a, b) {
  var t1, t2, t3, t4;
  t1 = a.x;
  t2 = b.x;
  if (typeof t1 !== "number")
    throw t1.$sub();
  if (typeof t2 !== "number")
    throw H.iae(t2);
  t3 = a.y;
  t4 = b.y;
  if (typeof t3 !== "number")
    throw t3.$sub();
  if (typeof t4 !== "number")
    throw H.iae(t4);
  t4 = new X.Vector(t1 - t2, t3 - t4);
  H.setRuntimeTypeInfo(t4, [null]);
  return t4;
}}

},

Size: {"": "Object;width>,height>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    t1 = J.$eq(this.width, t1.get$width(other)) && J.$eq(this.height, t1.get$height(other));
    return t1;
  },
  scale$1: function(_, magnitude) {
    return new X.Size(J.$mul$n(this.width, magnitude), J.$mul$n(this.height, magnitude));
  },
  $mul: function(_, magnitude) {
    return new X.Size(J.$mul$n(this.width, magnitude), J.$mul$n(this.height, magnitude));
  },
  toString$0: function(_) {
    return "(" + H.S(this.width) + " x " + H.S(this.height) + ")";
  },
  get$hashCode: function(_) {
    return X.Util_getHashCode([this.width, this.height]);
  }
},

TarjanCycleDetect: {"": "Object;_bot$_index,_stack,_scc,_list",
  _executeTarjan$0: function() {
    var t1, t2, nodeList, node;
    t1 = this._list._nodes;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
    nodeList = P.List_List$from(t2, true, X._TarjanNode);
    for (t1 = new H.ListIterator(nodeList, nodeList.length, 0, null); t1.moveNext$0();) {
      node = t1._current;
      if (J.get$index$x(node) === -1)
        this._tarjan$1(node);
    }
    return this._scc;
  },
  _tarjan$1: function(v) {
    var t1, t2, n, t3, $arguments, component;
    J.set$index$x(v, this._bot$_index);
    v.lowlink = this._bot$_index;
    this._bot$_index = this._bot$_index + 1;
    t1 = this._stack;
    C.JSArray_methods.insert$2(t1, 0, v);
    for (t2 = J.get$iterator$ax(this._list.getAdjacent$1(v)); t2.moveNext$0();) {
      n = t2.get$current();
      t3 = J.getInterceptor$x(n);
      if (t3.get$index(n) === -1) {
        this._tarjan$1(n);
        v.lowlink = P.min(v.lowlink, n.get$lowlink());
      } else if (H.Arrays_indexOf(t1, n, 0, t1.length) >= 0)
        v.lowlink = P.min(v.lowlink, t3.get$index(n));
    }
    if (v.lowlink === v.index) {
      $arguments = H.substitute(this.$asTarjanCycleDetect, H.getRuntimeTypeInfo(this));
      t2 = $arguments == null ? null : $arguments[0];
      component = P.List_List(null, t2);
      $arguments = H.substitute(this.$asTarjanCycleDetect, H.getRuntimeTypeInfo(this));
      t2 = $arguments == null ? null : $arguments[0];
      component.$builtinTypeInfo = [t2];
      do {
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        n = t1[0];
        C.JSArray_methods.removeRange$2(t1, 0, 1);
        component.push(n.value);
      } while (!n.$eq(n, v));
      this._scc.push(component);
    }
  },
  static: {
TarjanCycleDetect$_internal: function(_list, TNode) {
  var t1, t2;
  t1 = P.List_List(null, [X._TarjanNode, TNode]);
  H.setRuntimeTypeInfo(t1, [[X._TarjanNode, TNode]]);
  t2 = P.List_List(null, [J.JSArray, TNode]);
  H.setRuntimeTypeInfo(t2, [[J.JSArray, TNode]]);
  t2 = new X.TarjanCycleDetect(0, t1, t2, _list);
  H.setRuntimeTypeInfo(t2, [TNode]);
  return t2;
},

TarjanCycleDetect_getStronglyConnectedComponents: function(graph) {
  return X.TarjanCycleDetect$_internal(X._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
}}

},

_TarjanNode: {"": "Object;value>,index*,lowlink<",
  get$hashCode: function(_) {
    return J.get$hashCode$(this.value);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return J.$eq(J.get$value$x(other), this.value);
  }
},

_TarjanList: {"": "Object;_nodes",
  getAdjacent$1: function(v) {
    var t1, nodes;
    t1 = this._nodes;
    nodes = t1.$index(t1, v);
    if (nodes == null)
      return [];
    else
      return nodes;
  },
  static: {
_TarjanList__TarjanList: function(source, TNode) {
  var map, nodes, t1;
  map = P.LinkedHashMap_LinkedHashMap(null, null, null, TNode, [X._TarjanNode, TNode]);
  nodes = P.LinkedHashMap_LinkedHashMap(null, null, null, [X._TarjanNode, TNode], [P.Set, [X._TarjanNode, TNode]]);
  source.forEach$1(source, new X._TarjanList__TarjanList_closure(TNode, map, nodes));
  t1 = new X._TarjanList(nodes);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
}}

},

_TarjanList__TarjanList_closure: {"": "Closure;TNode_0,map_1,nodes_2",
  call$2: function(k, v) {
    var t1, tKey, t2, edges, edge;
    t1 = this.map_1;
    tKey = t1.putIfAbsent$2(k, new X._TarjanList__TarjanList__closure(k));
    t2 = this.nodes_2;
    edges = P.LinkedHashSet_LinkedHashSet(null, null, null, [X._TarjanNode, this.TNode_0]);
    t2.$indexSet(t2, tKey, edges);
    if (v != null)
      for (t2 = J.get$iterator$ax(v); t2.moveNext$0();) {
        edge = t2.get$current();
        edges.add$1(edges, t1.putIfAbsent$2(edge, new X._TarjanList__TarjanList__closure0(edge)));
      }
  },
  $is_args2: true
},

_TarjanList__TarjanList__closure: {"": "Closure;k_3",
  call$0: function() {
    var t1 = new X._TarjanNode(this.k_3, -1, null);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

_TarjanList__TarjanList__closure0: {"": "Closure;edge_4",
  call$0: function() {
    var t1 = new X._TarjanNode(this.edge_4, -1, null);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

Vector: {"": "Coordinate;x,y",
  get$length: function(_) {
    return this.get$magnitude();
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new X.Vector(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Vector", 0)]);
    return t2;
  },
  $mul: function(_, magnitude) {
    return this.scale$1(this, magnitude);
  },
  scale$1: function(_, magnitude) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof magnitude !== "number")
      throw H.iae(magnitude);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new X.Vector(t1 * magnitude, t2 * magnitude);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Vector", 0)]);
    return t2;
  },
  $asCoordinate: null,
  $asPoint: null
},

Tuple: {"": "Object;item1<,item2",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return J.$eq(this.item1, other.get$item1()) && J.$eq(this.item2, other.item2);
  },
  toString$0: function(_) {
    return "{item1: " + H.S(this.item1) + ", item2: " + H.S(this.item2) + "}";
  },
  get$hashCode: function(_) {
    return X.Util_getHashCode([this.item1, this.item2]);
  }
},

Tuple3: {"": "Tuple;item3<,item1,item2",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return J.$eq(this.item1, other.get$item1()) && J.$eq(this.item2, other.item2) && J.$eq(this.item3, other.get$item3());
  },
  toString$0: function(_) {
    return "{item1: " + H.S(this.item1) + ", item2: " + H.S(this.item2) + ", item3: " + H.S(this.item3) + "}";
  },
  get$hashCode: function(_) {
    return X.Util_getHashCode([this.item1, this.item2, this.item3]);
  },
  $asTuple: function(T1, T2, T3) {
    return [T1, T2];
  }
}}],
["bot.throttled_stream", "package:bot/src/bot/throttled_stream.dart", , Y, {
ThrottledStream: {"": "Object;_asyncMethod,_throttled_stream$_controller,_throttled_stream$_source,_sendingSource,_outputValue,_outputFuture,_forceUpdate",
  _asyncMethod$1: function(arg0) {
    return this._asyncMethod.call$1(arg0);
  },
  _tryUpdate$0: function() {
    if ((this._throttled_stream$_controller._state & 4) === 0)
      if (this._outputFuture == null)
        var t1 = !J.$eq(this._throttled_stream$_source, this._sendingSource) || this._forceUpdate;
      else
        t1 = false;
    else
      t1 = false;
    if (t1) {
      this._sendingSource = this._throttled_stream$_source;
      this._outputFuture = P.Future_Future(new Y.ThrottledStream__tryUpdate_closure(this), null).then$1(new Y.ThrottledStream__tryUpdate_closure0(this)).catchError$1(new Y.ThrottledStream__tryUpdate_closure1(this)).whenComplete$1(new Y.ThrottledStream__tryUpdate_closure2(this));
    }
  }
},

ThrottledStream__tryUpdate_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1._asyncMethod$1(t1._sendingSource);
  }
},

ThrottledStream__tryUpdate_closure0: {"": "Closure;this_1",
  call$1: function(output) {
    var t1 = this.this_1;
    t1._forceUpdate = false;
    t1._outputValue = output;
    t1 = t1._throttled_stream$_controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(output);
  },
  $is_args1: true
},

ThrottledStream__tryUpdate_closure1: {"": "Closure;this_2",
  call$2: function(error, st) {
    var t1 = this.this_2._throttled_stream$_controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendError$2(error, st);
  },
  $is_args2: true
},

ThrottledStream__tryUpdate_closure2: {"": "Closure;this_3",
  call$0: function() {
    var t1 = this.this_3;
    t1._outputFuture = null;
    t1._tryUpdate$0();
  }
}}],
["bot_html", "package:bot_web/bot_html.dart", , B, {
CanvasUtil_transform: function(ctx, tx) {
  X._metaRequireArgumentNotNullOrEmpty("ctx");
  X._metaRequireArgumentNotNullOrEmpty("tx");
  ctx.transform(tx._scX, tx._shY, tx._shX, tx._scY, tx._tX, tx._tY);
},

CanvasUtil_ellipse: function(ctx, x, y, width, height) {
  var t1, hB, t2, vB, eX, eY, mX, mY, t3;
  if (typeof width !== "number")
    throw width.$div();
  t1 = width / 2;
  hB = t1 * 0.5522847498307935;
  if (typeof height !== "number")
    throw height.$div();
  t2 = height / 2;
  vB = t2 * 0.5522847498307935;
  eX = x + width;
  eY = y + height;
  mX = x + t1;
  mY = y + t2;
  ctx.beginPath();
  ctx.moveTo(x, mY);
  t2 = mY - vB;
  t1 = mX - hB;
  ctx.bezierCurveTo(x, t2, t1, y, mX, y);
  t3 = mX + hB;
  ctx.bezierCurveTo(t3, y, eX, t2, eX, mY);
  t2 = mY + vB;
  ctx.bezierCurveTo(eX, t2, t3, eY, mX, eY);
  ctx.bezierCurveTo(t1, eY, x, t2, x, mY);
  ctx.closePath();
},

HtmlView: {"": "Object;"}}],
["bot_retained", "package:bot_web/bot_retained.dart", , B, {
Mouse_markMouseOver: function(stage, coordinate) {
  var t1, t2, items, hits;
  X._metaRequireArgumentNotNullOrEmpty("stage");
  if (stage == null)
    H.throwExpression(X.NullArgumentError$("stage"));
  t1 = coordinate != null;
  if (t1)
    t2 = X.isValidNumber(coordinate.get$x(coordinate)) && X.isValidNumber(coordinate.y);
  else
    t2 = true;
  X.requireArgument(t2, "coordinate", null);
  items = $.get$Mouse__stageMouseCacheProperty().get$1(stage);
  if (items != null) {
    J.forEach$1$ax(items, new B.Mouse_markMouseOver_closure());
    t2 = $.get$Mouse__stageMouseCacheProperty();
    t2.toString;
    stage._remove$1(t2);
  }
  if (t1) {
    hits = B.RetainedUtil__hitTest(stage.get$rootThing(), coordinate);
    t1 = $.get$Mouse__stageMouseCacheProperty();
    t1.toString;
    stage._bot$_set$2(t1, hits);
    H.IterableMixinWorkaround_forEach(hits, new B.Mouse_markMouseOver_closure0());
    if (hits.length > 0) {
      t1 = $.get$Mouse_isMouseDirectlyOverProperty();
      if (0 >= hits.length)
        throw H.ioore(hits, 0);
      t2 = hits[0];
      t1.toString;
      t2._bot$_set$2(t1, true);
    }
    return hits;
  }
  return;
},

RetainedUtil__hitTest: function(thing, point) {
  var tx, bounds, hits, $length, t1, i;
  tx = new X.AffineTransform(1, 0, 0, 1, 0, 0);
  H.IterableMixinWorkaround_forEach(thing._transforms, tx.get$concatenate());
  point = tx.createInverse$0().transformCoordinate$1(point);
  bounds = new X.Box(0, 0, thing._width, thing._height);
  bounds.$builtinTypeInfo = [null];
  hits = P.List_List(null, B.Thing);
  hits.$builtinTypeInfo = [B.Thing];
  if (bounds.containsPoint$1(bounds, point)) {
    if (!!thing.$isParentThing) {
      $length = thing.get$visualChildCount();
      for (t1 = $length - 1, i = 0; i < $length; ++i) {
        hits = B.RetainedUtil__hitTest(thing.getVisualChild$1(t1 - i), point);
        if (hits.length > 0)
          break;
      }
    }
    hits.push(thing);
  }
  return hits;
},

Mouse_markMouseOver_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = $.get$Mouse_isMouseOverProperty();
    t1.toString;
    e._remove$1(t1);
    t1 = $.get$Mouse_isMouseDirectlyOverProperty();
    t1.toString;
    e._remove$1(t1);
  },
  $is_args1: true
},

Mouse_markMouseOver_closure0: {"": "Closure;",
  call$1: function(e) {
    var t1 = $.get$Mouse_isMouseOverProperty();
    t1.toString;
    e._bot$_set$2(t1, true);
  },
  $is_args1: true
},

MouseManager: {"": "Object;_stage,_mouseDownThing,_draggingThing,_dragCoordinate",
  _mouseMove$1: function(e) {
    var t1, items, t2, cursor, args, t3;
    t1 = this._stage;
    items = B.Mouse_markMouseOver(t1, J.get$offset$x(e));
    t2 = this._draggingThing;
    cursor = t2 != null ? $.get$MouseManager_cursorProperty().get$1(t2) : null;
    t2 = items.length;
    if (t2 > 0) {
      args = new B.ThingMouseEventArgs(items[0], e);
      for (t2 = new H.ListIterator(items, t2, 0, null); t2.moveNext$0();) {
        e = t2._current;
        t3 = $.get$MouseManager__mouseMoveEvent();
        t3.toString;
        e._fireEvent$2(t3, args);
        if (cursor == null)
          cursor = $.get$MouseManager_cursorProperty().get$1(e);
      }
    }
    t2 = $.get$MouseManager_cursorProperty();
    t2.toString;
    t1._bot$_set$2(t2, cursor);
  },
  get$_mouseMove: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._mouseMove$1, null, "_mouseMove$1");
  },
  _mouseOut$1: function(e) {
    var t1, t2;
    t1 = this._stage;
    B.Mouse_markMouseOver(t1, null);
    t2 = $.get$MouseManager__mouseOutEvent();
    t2.toString;
    t1._fireEvent$2(t2, C.C_EventArgs);
    t2 = $.get$MouseManager_cursorProperty();
    t2.toString;
    t1._bot$_set$2(t2, null);
  },
  get$_mouseOut: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._mouseOut$1, null, "_mouseOut$1");
  },
  _mouseUp$1: function(e) {
    var hits, thing;
    hits = B.Mouse_markMouseOver(this._stage, J.get$offset$x(e));
    hits.toString;
    thing = H.IterableMixinWorkaround_firstWhere(hits, new B.MouseManager__mouseUp_closure(), new B.MouseManager__mouseUp_closure0());
    if (thing != null) {
      this._doMouseUp$2(thing, e);
      if (J.$eq(thing, this._mouseDownThing))
        this._doClick$2(thing, e);
      this._mouseDownThing = null;
    }
  },
  get$_mouseUp: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._mouseUp$1, null, "_mouseUp$1");
  },
  _mouseDown$1: function(e) {
    var hits, t1, t, t2;
    hits = B.Mouse_markMouseOver(this._stage, J.get$offset$x(e));
    for (t1 = new H.ListIterator(hits, hits.length, 0, null); t1.moveNext$0();) {
      t = t1._current;
      if ($.get$MouseManager__isDraggableProperty().get$1(t) === true) {
        this._draggingThing = t;
        this._startDrag$2(this._draggingThing, e);
        break;
      } else if ($.get$MouseManager__isClickableProperty().get$1(t) === true) {
        this._mouseDownThing = t;
        t1 = this._mouseDownThing;
        t2 = $.get$MouseManager__mouseDownEvent();
        t2.toString;
        t1._fireEvent$2(t2, new B.ThingMouseEventArgs(t1, e));
        break;
      }
    }
  },
  get$_mouseDown: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._mouseDown$1, null, "_mouseDown$1");
  },
  _doMouseUp$2: function(thing, e) {
    var t1 = $.get$MouseManager__mouseUpEvent();
    t1.toString;
    thing._fireEvent$2(t1, new B.ThingMouseEventArgs(thing, e));
  },
  _doClick$2: function(thing, e) {
    var t1 = $.get$MouseManager__clickEvent();
    t1.toString;
    thing._fireEvent$2(t1, new B.ThingMouseEventArgs(thing, e));
  },
  _startDrag$2: function(thing, e) {
    var args, t1;
    args = new B.ThingDragStartingEventArgs(false, thing, e);
    t1 = $.get$MouseManager__dragStartingEvent();
    t1.toString;
    thing._fireEvent$2(t1, args);
    if (!args._canceled) {
      J.preventDefault$0$x(e);
      t1 = new P.Point(e.clientX, e.clientY);
      t1.$builtinTypeInfo = [null];
      t1 = new X.Coordinate(t1.x, t1.y);
      t1.$builtinTypeInfo = [null];
      this._dragCoordinate = t1;
    }
  },
  _windowMouseMove$1: function(e) {
    var t1, newLoc, delta, t2, t3;
    if (this._dragCoordinate != null) {
      t1 = J.get$client$x(e);
      newLoc = new X.Coordinate(t1.get$x(t1), t1.y);
      H.setRuntimeTypeInfo(newLoc, [null]);
      delta = X.Coordinate_difference(newLoc, this._dragCoordinate);
      t1 = this._draggingThing;
      t2 = $.get$MouseManager__dragEvent();
      t3 = this._draggingThing;
      t2.toString;
      t3._fireEvent$2(t2, new B.ThingDragEventArgs(delta, t1, e));
      this._dragCoordinate = newLoc;
    }
  },
  get$_windowMouseMove: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._windowMouseMove$1, null, "_windowMouseMove$1");
  },
  _windowMouseUp$1: function(e) {
    this._endDrag$0();
  },
  get$_windowMouseUp: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._windowMouseUp$1, null, "_windowMouseUp$1");
  },
  _windowBlur$1: function(e) {
    this._endDrag$0();
  },
  get$_windowBlur: function() {
    return new H.BoundClosure$1(this, B.MouseManager.prototype._windowBlur$1, null, "_windowBlur$1");
  },
  _endDrag$0: function() {
    if (this._dragCoordinate != null) {
      this._dragCoordinate = null;
      this._draggingThing = null;
    }
  },
  MouseManager$_internal$1: function(_stage) {
    var t1, t2, t3, t4, t5;
    t1 = this._stage;
    t2 = t1.get$_canvas();
    t3 = C.EventStreamProvider_mousemove._eventType;
    t2 = new W._ElementEventStreamImpl(t2, t3, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t4 = this.get$_mouseMove();
    t4 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(t4), t2._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t4._tryResume$0();
    t4 = new W._ElementEventStreamImpl(t1._canvas, C.EventStreamProvider_mouseout._eventType, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t2 = this.get$_mouseOut();
    t2 = new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(t2), t4._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = t1._canvas;
    t4 = C.EventStreamProvider_mouseup._eventType;
    t2 = new W._ElementEventStreamImpl(t2, t4, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t5 = this.get$_mouseUp();
    t5 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(t5), t2._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t5._tryResume$0();
    t1 = new W._ElementEventStreamImpl(t1._canvas, C.EventStreamProvider_mousedown._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t5 = this.get$_mouseDown();
    t5 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(t5), t1._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t5._tryResume$0();
    t3 = new W._EventStream(window, t3, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t5 = this.get$_windowMouseMove();
    t5 = new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(t5), t3._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t5._tryResume$0();
    t4 = new W._EventStream(window, t4, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t5 = this.get$_windowMouseUp();
    t5 = new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(t5), t4._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t5._tryResume$0();
    t5 = new W._EventStream(window, C.EventStreamProvider_blur._eventType, false);
    H.setRuntimeTypeInfo(t5, [null]);
    t4 = this.get$_windowBlur();
    t4 = new W._EventStreamSubscription(0, t5._html$_target, t5._eventType, W._wrapZone(t4), t5._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t5, "_EventStream", 0)]);
    t4._tryResume$0();
  },
  static: {
"": "MouseManager_cursorProperty,MouseManager__clickManagerProperty,MouseManager__isClickableProperty,MouseManager__isDraggableProperty,MouseManager__clickEvent,MouseManager__mouseDownEvent,MouseManager__mouseUpEvent,MouseManager__mouseMoveEvent,MouseManager__mouseOutEvent,MouseManager__dragStartingEvent,MouseManager__dragEvent",
MouseManager_MouseManager: function(stage) {
  X._metaRequireArgumentNotNullOrEmpty("stage");
  return $.get$MouseManager__clickManagerProperty().get$2(stage, new B.MouseManager_MouseManager_closure());
},

MouseManager$_internal: function(_stage) {
  var t1 = new B.MouseManager(_stage, null, null, null);
  t1.MouseManager$_internal$1(_stage);
  return t1;
},

MouseManager__setBoolProp: function(thing, prop, value) {
  prop.toString;
  if (value)
    thing._bot$_set$2(prop, true);
  else
    thing._remove$1(prop);
}}

},

MouseManager_MouseManager_closure: {"": "Closure;",
  call$1: function(s) {
    return B.MouseManager$_internal(s);
  },
  $is_args1: true
},

MouseManager__mouseUp_closure: {"": "Closure;",
  call$1: function(e) {
    return $.get$MouseManager__isClickableProperty().get$1(e);
  },
  $is_args1: true
},

MouseManager__mouseUp_closure0: {"": "Closure;",
  call$0: function() {
    return;
  }
},

ThingDragStartingEventArgs: {"": "ThingMouseEventArgs;_canceled,thing,sourceEvent"},

ThingDragEventArgs: {"": "ThingMouseEventArgs;delta<,thing,sourceEvent"},

ParentThing: {"": "Thing;",
  childInvalidated$1: function(child) {
    this.invalidateDraw$0();
  },
  update$0: function() {
    this._forEach$1(new B.ParentThing_update_closure());
    B.Thing.prototype.update$0.call(this);
  },
  drawOverride$1: function(ctx) {
    this._forEach$1(new B.ParentThing_drawOverride_closure(ctx));
  },
  _forEach$1: function(f) {
    var $length, i;
    $length = this.get$visualChildCount();
    for (i = 0; i < $length; ++i)
      f.call$1(this.getVisualChild$1(i));
  },
  $isParentThing: true
},

ParentThing_update_closure: {"": "Closure;",
  call$1: function(e) {
    return e.update$0();
  },
  $is_args1: true
},

ParentThing_drawOverride_closure: {"": "Closure;ctx_0",
  call$1: function(e) {
    return e.drawCore$1(this.ctx_0);
  },
  $is_args1: true
},

Stage: {"": "AttachableObject;_invalidatedEventHandle,_canvas<,rootThing<,_ctx,_propertyValues,_eventHandlers,_disposed",
  draw$0: function() {
    var t1, t2, t3;
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    t1 = this._ctx;
    t2 = this._canvas;
    if (t1 == null)
      this._ctx = J.get$context2D$x(t2);
    else {
      t3 = J.getInterceptor$x(t2);
      t1.clearRect(0, 0, t3.get$width(t2), t3.get$height(t2));
    }
    return this.rootThing._stageDraw$1(this._ctx);
  },
  childInvalidated$1: function(child) {
    var t1;
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    t1 = this._invalidatedEventHandle._controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(C.C_EventArgs);
  }
},

StageWrapper: {"": "DisposableImpl;rootThing<",
  requestFrame$0: function() {
    var t1, t2;
    if (!this._frameRequested) {
      this._frameRequested = true;
      t1 = window;
      t2 = this.get$drawFrame();
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
    }
  },
  drawFrame$1: function(highResTime) {
    this._frameRequested = false;
    this.stage.draw$0();
  },
  get$drawFrame: function() {
    return new H.BoundClosure$1(this, B.StageWrapper.prototype.drawFrame$1, null, "drawFrame$1");
  },
  StageWrapper$2: function(canvas, rootThing) {
    var t1, t2;
    t1 = this.stage._invalidatedEventHandle._controller;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    this._invalidatedEventSub = t2.listen$1(new B.StageWrapper_closure(this));
  }
},

StageWrapper_closure: {"": "Closure;this_0",
  call$1: function(_) {
    return this.this_0.requestFrame$0();
  },
  $is_args1: true
},

Thing: {"": "AttachableObject;",
  get$width: function(_) {
    return this._width;
  },
  get$height: function(_) {
    return this._height;
  },
  set$cacheEnabled: function(value) {
    X._metaRequireArgumentNotNullOrEmpty("value");
    if (value !== this._cacheEnabled) {
      this._cacheEnabled = value;
      if (!this._cacheEnabled)
        this._cacheCanvas = null;
    }
  },
  getTransform$0: function() {
    var tx = X.AffineTransform$(1, 0, 0, 1, 0, 0);
    H.IterableMixinWorkaround_forEach(this._transforms, tx.get$concatenate());
    return tx;
  },
  update$0: function() {
  },
  drawCore$1: function(ctx) {
    var t1;
    ctx.save();
    B.CanvasUtil_transform(ctx, this.getTransform$0());
    t1 = ctx.globalAlpha;
    if (typeof t1 !== "number")
      throw t1.$mul();
    ctx.globalAlpha = t1 * this._alpha;
    if (this._cacheEnabled)
      this._drawCached$1(ctx);
    else {
      this._lastDrawTime = P.DateTime$_now().millisecondsSinceEpoch;
      this.drawOverride$1(ctx);
    }
    ctx.restore();
  },
  invalidateDraw$0: function() {
    if (this._disposed)
      H.throwExpression(X.DisposedError$());
    if (this._lastDrawTime != null) {
      this._lastDrawTime = null;
      this._invalidateParent$0();
    }
  },
  registerParent$1: function($parent) {
    if (this._parent != null)
      H.throwExpression(P.Exception_Exception("parent already set"));
    X._metaRequireArgumentNotNullOrEmpty("parent");
    this._parent = $parent;
  },
  _stageDraw$1: function(ctx) {
    var t1;
    this.update$0();
    t1 = this._lastDrawTime;
    this.drawCore$1(ctx);
    return t1 == null;
  },
  _drawCached$1: function(ctx) {
    var cacheCtx;
    if (this._lastDrawTime == null) {
      if (this._cacheCanvas == null)
        this._cacheCanvas = W.CanvasElement_CanvasElement(null, null);
      J.set$width$x(this._cacheCanvas, J.toInt$0$n(this._width));
      J.set$height$x(this._cacheCanvas, J.toInt$0$n(this._height));
      cacheCtx = J.get$context2D$x(this._cacheCanvas);
      this._lastDrawTime = P.DateTime$_now().millisecondsSinceEpoch;
      this.drawOverride$1(cacheCtx);
    }
    ctx.drawImage(this._cacheCanvas, 0, 0);
  },
  _invalidateParent$0: function() {
    var t1 = this._invalidatedEventHandle._controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(C.C_EventArgs);
    this._parent.childInvalidated$1(this);
  }
},

ThingMouseEventArgs: {"": "EventArgs;thing<,sourceEvent"}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
  var t1, element;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();) {
    element = t1._current;
    if (test.call$1(element) === true)
      return element;
  }
  return orElse.call$0();
},

IterableMixinWorkaround_singleWhere: function(iterable, test) {
  var t1, result, foundMatching, element;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), result = null, foundMatching = false; t1.moveNext$0();) {
    element = t1._current;
    if (test.call$1(element) === true) {
      if (foundMatching)
        throw H.wrapException(new P.StateError("More than one matching element"));
      result = element;
      foundMatching = true;
    }
  }
  if (foundMatching)
    return result;
  throw H.wrapException(new P.StateError("No matching element"));
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new H.ListIterator(this, this.get$length(this), 0, null);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  map$1: function(_, f) {
    var t1 = new H.MappedListIterable(this, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  fold$2: function(_, initialValue, combine) {
    var $length, value, i;
    $length = this.get$length(this);
    for (value = initialValue, i = 0; i < $length; ++i) {
      value = combine.call$2(value, this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return value;
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

ExpandIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  }
},

ExpandIterator: {"": "Object;_iterator,_f,_currentExpansion,_current",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    if (this._currentExpansion == null)
      return false;
    for (var t1 = this._iterator; !this._currentExpansion.moveNext$0();) {
      this._current = null;
      if (t1.moveNext$0()) {
        this._currentExpansion = null;
        this._currentExpansion = J.get$iterator$ax(this._f$1(t1.get$current()));
      } else
        return false;
    }
    this._current = this._currentExpansion.get$current();
    return true;
  }
},

EmptyIterator: {"": "Object;",
  moveNext$0: function() {
    return false;
  },
  get$current: function() {
    return;
  }
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  }
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_Future: function(computation, $T) {
  var result = P._Future$($T);
  P.Timer_Timer(C.Duration_0, new P.Future_Future_closure(computation, result));
  return result;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (onCancel == null)
    return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$2(arg1, arg2);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastStream: {"": "_ControllerStream;_async$_controller", $as_ControllerStream: null},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_async$_controller: function() {
    return this._async$_controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_async$_next?,_async$_previous?",
  get$stream: function(_) {
    var t1 = new P._BroadcastStream(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0)]);
    return t1;
  },
  get$hasListener: function() {
    return this._async$_next !== this;
  },
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription._async$_previous;
    next = subscription._async$_next;
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, t3, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1;
    if (subscription.get$_async$_next() === subscription)
      return;
    t1 = subscription._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    if ((t1 & 2) !== 0)
      subscription._eventState = (t1 | 4) >>> 0;
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  _async$_add$1: function(data) {
    this._sendData$1(data);
  },
  _addError$2: function(error, stackTrace) {
    this._sendError$2(error, stackTrace);
  },
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$or();
        link._eventState = (t1 | 2) >>> 0;
        action.call$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$xor();
        link._eventState = (t1 ^ 1) >>> 0;
        link0 = link._async$_next;
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 0)
          this._removeListener$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        link._eventState = (t1 & 4294967293) >>> 0;
        link = link0;
      } else
        link = link._async$_next;
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$2: function(error, stackTrace) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
  },
  _sendDone$0: function() {
    if (this._async$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    subscription._async$_add$1(this.data_1);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$1: function(subscription) {
    subscription._addError$2(this.error_1, this.stackTrace_2);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0",
  call$1: function(subscription) {
    subscription._close$0();
  },
  $is_args1: true
},

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    var link;
    for (link = this._async$_next; link !== this; link = link._async$_next)
      link._addPending$1(new P._DelayedData(data, null));
  },
  _sendError$2: function(error, stackTrace) {
    var link;
    for (link = this._async$_next; link !== this; link = link._async$_next)
      link._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    var link = this._async$_next;
    if (link !== this)
      for (; link !== this; link = link._async$_next)
        link._addPending$1(C.C__DelayedDone);
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_Future_closure: {"": "Closure;computation_0,result_1",
  call$0: function() {
    var e, s, exception, t1;
    try {
      this.result_1._complete$1(this.computation_0.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      this.result_1._completeError$2(e, s);
    }

  }
},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  map$1: function(_, convert) {
    var t1 = new P._MapStream(convert, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    return t1;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  $is_args1: true
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$stream: function(_) {
    var t1 = new P._ControllerStream(this);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$hasListener: function() {
    return (this._state & 1) !== 0;
  },
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _close$0: function() {
    var addState = this._varData;
    this._varData = addState.get$varData();
    this._state = (this._state & 4294967287) >>> 0;
    addState.complete$0(addState);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    if ((this._state & 8) !== 0)
      this._varData.resume$0();
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_NoCallbacks: {"": "Object;",
  get$_onListen: function() {
    return;
  },
  get$_onPause: function() {
    return;
  },
  get$_onResume: function() {
    return;
  },
  get$_onCancel: function() {
    return;
  }
},

_NoCallbackAsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch0: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_NoCallbackSyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch0: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_async$_controller()._recordCancel$1(this);
  },
  _onPause$0: function() {
    this.get$_async$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_async$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    t3 = $.Zone__current;
    t2.toString;
    t3.toString;
    if (t3 == null ? t2 != null : t3 !== t2)
      P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2, t3;
    t1 = H.getRuntimeTypeArgument(this, "_StreamImpl", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    t3 = new P._BufferingStreamSubscription(null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(t3, [t1]);
    return t3;
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var result = P._ForwardingStreamSubscription$(this, true === cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    result.onData$1(onData);
    result.onError$1(result, onError);
    result.onDone$1(onDone);
    return result;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._async$_add$1(data);
  },
  $asStream: function($S, $T) {
    return [$T];
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _async$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
  },
  _addError$2: function(error, stackTrace) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
    return;
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new H.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
  },
  _handleError$2: function(error, stackTrace) {
    this._addError$2(error, stackTrace);
  },
  get$_handleError: function() {
    return new P.BoundClosure$20(this, P._ForwardingStreamSubscription.prototype._handleError$2, null, "_handleError$2");
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
  },
  _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function($S, $T) {
    return [$T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, cancelOnError, $S, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = cancelOnError ? 1 : 0;
  t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null);
  H.setRuntimeTypeInfo(t2, [$S, $T]);
  t2._ForwardingStreamSubscription$2(_stream, cancelOnError, $S, $T);
  return t2;
}}

},

_MapStream: {"": "_ForwardingStream;_transform,_async$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(e, s);
      return;
    }

    sink._async$_add$1(outputEvent);
  },
  $as_ForwardingStream: null
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  where$1: function(_, f) {
    var t1 = new H.WhereIterable(this, f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    return t1;
  },
  expand$1: function(_, f) {
    var t1 = new H.ExpandIterable(this, f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0), null]);
    return t1;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  fold$2: function(_, initialValue, combine) {
    var t1, value;
    for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
      value = combine.call$2(value, t1.get$current());
    return value;
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (!iterator.moveNext$0())
      return "";
    buffer = P.StringBuffer$("");
    if (separator === "")
      do {
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0());
    else {
      buffer.write$1(H.S(iterator.get$current()));
      for (; iterator.moveNext$0();) {
        buffer._contents = buffer._contents + separator;
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    return it.get$current();
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(P.StateError$("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(P.StateError$("More than one element"));
    return result;
  },
  singleWhere$1: function(_, test) {
    var t1, result, foundMatching, element;
    for (t1 = this.get$iterator(this), result = null, foundMatching = false; t1.moveNext$0();) {
      element = t1.get$current();
      if (test.call$1(element) === true) {
        if (foundMatching)
          throw H.wrapException(P.StateError$("More than one matching element"));
        result = element;
        foundMatching = true;
      }
    }
    if (foundMatching)
      return result;
    throw H.wrapException(P.StateError$("No matching element"));
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (i = 0; i < this.get$length(receiver); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; i < this.get$length(receiver); ++i)
      if (J.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
        this.set$length(receiver, this.get$length(receiver) - 1);
        return true;
      }
    return false;
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, t1, i;
    if (start < 0 || start > this.get$length(receiver))
      H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
    if (end < start || end > this.get$length(receiver))
      H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    t1 = J.getInterceptor$asx(iterable);
    if (skipCount + $length > t1.get$length(iterable))
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
  },
  indexOf$2: function(receiver, element, startIndex) {
    var i;
    if (startIndex >= this.get$length(receiver))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < this.get$length(receiver); ++i)
      if (J.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t1[i], object)) {
        this._collection$_remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _collection$_remove$1: function(offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    t4 = this._tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw H.ioore(t1, prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw H.ioore(t1, i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(t2, nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  var result;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    absN = J.abs$0$n(n);
    sign = n < 0 ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  get$inMilliseconds: function() {
    return C.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message>",
  toString$0: function(_) {
    if (this.get$message(this) != null)
      return "Illegal argument(s): " + H.S(this.get$message(this));
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$: function(message) {
  return new P.RangeError(message);
},

RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterable: {"": "Object;"},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

Set: {"": "IterableBase;", $asIterableBase: null, $isEfficientLength: true},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas", null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return W._DOMWindowCrossFrame__createSafe(win);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableColElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;hostname=,href},port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;hostname=,href},port=,protocol=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;href}", "%": "HTMLBaseElement"},

BodyElement: {"": "HtmlElement;", $isBodyElement: true, "%": "HTMLBodyElement"},

ButtonElement: {"": "HtmlElement;disabled},name=,value=", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height%,width%",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  },
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": ";CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;",
  fillText$4: function(receiver, text, x, y, maxWidth) {
    receiver.fillText(text, x, y);
  },
  fillText$3: function($receiver, text, x, y) {
    return this.fillText$4($receiver, text, x, y, null);
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

DocumentFragment: {"": "Node;",
  set$innerHtml: function(receiver, value) {
    this.setInnerHtml$1(receiver, value);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    new W._ChildNodeListLazy(receiver)._this.textContent = "";
    receiver.appendChild(J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  "%": ";DocumentFragment"
},

DomError: {"": "Interceptor;name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;hidden},className%,id=,style=",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  get$classes: function(receiver) {
    return new W._ElementCssClassSet(receiver);
  },
  get$dataset: function(receiver) {
    return new W._DataAttributeMap(new W._ElementAttributeMap(receiver));
  },
  get$client: function(receiver) {
    var t1 = new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$offset: function(receiver) {
    var t1 = new P.Rectangle(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if ($.Element__defaultValidator == null) {
        t1 = [];
        H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
        t1 = new W.NodeValidatorBuilder(t1);
        t2 = t1._validators;
        t2.push(W._Html5NodeValidator$(null));
        t2.push(W._TemplatingNodeValidator$());
        $.Element__defaultValidator = t1;
      }
      validator = $.Element__defaultValidator;
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    }
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  set$innerHtml: function(receiver, html) {
    this.setInnerHtml$1(receiver, html);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  $isElement: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height%,name=,width%", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": ";EventTarget"
},

FieldSetElement: {"": "HtmlElement;disabled},name=", "%": "HTMLFieldSetElement"},

FormElement: {"": "HtmlElement;length=,name=", "%": "HTMLFormElement"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

IFrameElement: {"": "HtmlElement;height%,name=,width%", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height%,width%", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;disabled},height%,name=,value=,width%", $isElement: true, $isEventTarget: true, "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;location=", "%": "KeyboardEvent"},

KeygenElement: {"": "HtmlElement;disabled},name=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value=", "%": "HTMLLIElement"},

LinkElement: {"": "HtmlElement;disabled},href}", "%": "HTMLLinkElement"},

Location: {"": "Interceptor;hostname=,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=", "%": "HTMLAudioElement;HTMLMediaElement"},

MediaStream: {"": "EventTarget;id=", "%": "MediaStream"},

MediaStreamEvent: {"": "Event;stream=", "%": "MediaStreamEvent"},

MetaElement: {"": "HtmlElement;name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value=", "%": "HTMLMeterElement"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;id=,name=", "%": "MIDIInput;MIDIPort"},

MouseEvent: {"": "UIEvent;toElement=",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$offset: function(receiver) {
    var t1, t2, target, point;
    if (!!receiver.offsetX) {
      t1 = new P.Point(receiver.offsetX, receiver.offsetY);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    } else {
      t1 = W._convertNativeToDart_EventTarget(receiver.target);
      t2 = J.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isElement)
        throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
      target = W._convertNativeToDart_EventTarget(receiver.target);
      t1 = new P.Point(receiver.clientX, receiver.clientY);
      H.setRuntimeTypeInfo(t1, [null]);
      point = t1.$sub(t1, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
      t1 = new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y));
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
  },
  "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
},

NavigatorUserMediaError: {"": "Interceptor;name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;lastChild=,nodeType=",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  "%": "Document|DocumentType|Entity|HTMLDocument|Notation|SVGDocument;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

ObjectElement: {"": "HtmlElement;height%,name=,width%", "%": "HTMLObjectElement"},

OptGroupElement: {"": "HtmlElement;disabled}", "%": "HTMLOptGroupElement"},

OptionElement: {"": "HtmlElement;disabled},index=,value=", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,value=", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value=", "%": "HTMLParamElement"},

ProgressElement: {"": "HtmlElement;value=", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

RtcIceCandidate: {"": "Interceptor;candidate=", "%": "RTCIceCandidate|mozRTCIceCandidate"},

RtcIceCandidateEvent: {"": "Event;candidate=", "%": "RTCIceCandidateEvent"},

SelectElement: {"": "HtmlElement;disabled},length=,name=,value=", "%": "HTMLSelectElement"},

ShadowRoot: {"": "DocumentFragment;innerHtml:innerHTML}", "%": "ShadowRoot"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

StyleElement: {"": "HtmlElement;disabled}", "%": "HTMLStyleElement"},

TableCellElement: {"": "HtmlElement;colSpan},rowSpan}", "%": "HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement"},

TableElement: {"": "HtmlElement;",
  insertRow$1: function(receiver, index) {
    return receiver.insertRow(index);
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  insertCell$1: function(receiver, index) {
    return receiver.insertCell(index);
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  insertRow$1: function(receiver, index) {
    return receiver.insertRow(index);
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;",
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment;
    receiver.textContent = null;
    fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
    receiver.content.appendChild(fragment);
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  $isTemplateElement: true,
  "%": "HTMLTemplateElement"
},

TextAreaElement: {"": "HtmlElement;disabled},name=,value=", "%": "HTMLTextAreaElement"},

UIEvent: {"": "Event;", "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"},

VideoElement: {"": "MediaElement;height%,width%", "%": "HTMLVideoElement"},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  set$location: function(receiver, value) {
    receiver.location = value;
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$top: function(receiver) {
    return W._convertNativeToDart_Window(receiver.top);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  get$topLeft: function(receiver) {
    var t1 = new P.Point(receiver.left, receiver.top);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new W.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  static: {
"": "Console__safeConsole",
}

},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  set$background: function(receiver, value) {
    this.setProperty$3(receiver, "background", value, "");
  },
  set$color: function(receiver, value) {
    this.setProperty$3(receiver, "color", value, "");
  },
  set$fontStyle: function(receiver, value) {
    this.setProperty$3(receiver, "font-style", value, "");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  set$textAlign: function(receiver, value) {
    this.setProperty$3(receiver, "text-align", value, "");
  },
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1 = this.toList$0(this);
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    return false;
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  $asList: function() {
    return [W.Element];
  }
},

_FrozenElementList: {"": "ListBase;_nodeList,_elementList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  get$classes: function(_) {
    return W._MultiElementCssClassSet$(this._elementList);
  },
  _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $isList: true,
  $isEfficientLength: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
}}

},

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(P.StateError$("No elements"));
    if (l > 1)
      throw H.wrapException(P.StateError$("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = iterable._this;
    t2 = this._this;
    if (t1 !== t2)
      for (len = t1.childNodes.length, i = 0; i < len; ++i)
        t2.appendChild(t1.firstChild);
    return;
  },
  remove$1: function(_, object) {
    return false;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(J.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push(J.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_DataAttributeMap: {"": "Object;_attributes",
  $index: function(_, key) {
    return this._attributes._element.getAttribute("data-" + this._toHyphenedName$1(key));
  },
  $indexSet: function(_, key, value) {
    this._attributes._element.setAttribute("data-" + this._toHyphenedName$1(key), value);
  },
  remove$1: function(_, key) {
    var t1, t2, value;
    t1 = "data-" + this._toHyphenedName$1(key);
    t2 = this._attributes._element;
    value = t2.getAttribute(t1);
    t2.removeAttribute(t1);
    return value;
  },
  forEach$1: function(_, f) {
    var t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_forEach_closure(this, f));
  },
  get$keys: function() {
    var keys, t1;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_keys_closure(this, keys));
    return keys;
  },
  get$values: function(_) {
    var values, t1;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_values_closure(this, values));
    return values;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
    var segments, start, i, segment, t1, t2;
    segments = hyphenedName.split("-");
    start = startUppercase ? 0 : 1;
    for (i = start; i < segments.length; ++i) {
      segment = segments[i];
      t1 = J.getInterceptor$asx(segment);
      t2 = t1.get$length(segment);
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (t2 > 0) {
        t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
        if (i >= segments.length)
          throw H.ioore(segments, i);
        segments[i] = t1;
      }
    }
    return C.JSArray_methods.join$1(segments, "");
  },
  _toCamelCase$1: function(hyphenedName) {
    return this._toCamelCase$2$startUppercase(hyphenedName, false);
  },
  _toHyphenedName$1: function(word) {
    var sb, t1, i, t2, lower;
    sb = P.StringBuffer$("");
    t1 = J.getInterceptor$asx(word);
    i = 0;
    while (true) {
      t2 = t1.get$length(word);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      lower = J.toLowerCase$0$s(t1.$index(word, i));
      if (!J.$eq(t1.$index(word, i), lower) && i > 0)
        sb._contents = sb._contents + "-";
      sb._contents = sb._contents + lower;
      ++i;
    }
    return sb._contents;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_DataAttributeMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$2: function(key, value) {
    if (J.getInterceptor$s(key).startsWith$1(key, "data-"))
      this.f_1.call$2(this.this_0._toCamelCase$1(C.JSString_methods.substring$1(key, 5)), value);
  },
  $is_args2: true
},

_DataAttributeMap_keys_closure: {"": "Closure;this_0,keys_1",
  call$2: function(key, value) {
    if (J.getInterceptor$s(key).startsWith$1(key, "data-"))
      this.keys_1.push(this.this_0._toCamelCase$1(C.JSString_methods.substring$1(key, 5)));
  },
  $is_args2: true
},

_DataAttributeMap_values_closure: {"": "Closure;this_0,values_1",
  call$2: function(key, value) {
    if (J.startsWith$1$s(key, "data-"))
      this.values_1.push(value);
  },
  $is_args2: true
},

_MultiElementCssClassSet: {"": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
  readClasses$0: function() {
    var s, t1;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  writeClasses$1: function(s) {
    var classes, t1;
    classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
    for (t1 = this._elementIterable, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      J.set$className$x(t1._current, classes);
  },
  modify$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_modify_closure(f));
  },
  remove$1: function(_, value) {
    return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
  },
  _modifyWithReturnValue$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    return t1.fold$2(t1, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
  },
  _MultiElementCssClassSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssClassSetIterable = t1;
  },
  static: {
_MultiElementCssClassSet$: function(_elementIterable) {
  var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
}}

},

_MultiElementCssClassSet_closure: {"": "Closure;",
  call$1: function(e) {
    return new W._ElementCssClassSet(e);
  },
  $is_args1: true
},

_MultiElementCssClassSet_readClasses_closure: {"": "Closure;s_0",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  $is_args1: true
},

_MultiElementCssClassSet_modify_closure: {"": "Closure;f_0",
  call$1: function(e) {
    return e.modify$1(this.f_0);
  },
  $is_args1: true
},

_MultiElementCssClassSet_remove_closure: {"": "Closure;value_0",
  call$1: function(e) {
    return J.remove$1$ax(e, this.value_0);
  },
  $is_args1: true
},

_MultiElementCssClassSet__modifyWithReturnValue_closure: {"": "Closure;f_0",
  call$2: function(prevValue, element) {
    return this.f_0.call$1(element) === true || prevValue === true;
  },
  $is_args2: true
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    for (t1 = J.get$className$x(this._element).split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = J.trim$0$s(t1._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    P.List_List$from(s, true, null);
    J.set$className$x(this._element, s.join$1(s, " "));
  }
},

EventStreamProvider: {"": "Object;_eventType"},

_EventStream: {"": "Stream;_html$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_html$_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._html$_target == null)
      return;
    this._unlisten$0();
    this._html$_target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._html$_target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._html$_target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = element.tagName;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  remove$1: function(receiver, object) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

NodeValidatorBuilder: {"": "Object;_validators",
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  }
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = element.tagName;
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  }
},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (new W._ElementAttributeMap(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (!!t1.$isScriptElement)
      return false;
    if (!!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  }
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._html$_length;
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$location: function(_) {
    return W._LocationCrossFrame__createSafe(this._window.location);
  },
  get$top: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  $isEventTarget: true,
  static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}

},

_LocationCrossFrame: {"": "Object;_html$_location", static: {
_LocationCrossFrame__createSafe: function($location) {
  if ($location === C.Window_methods.get$location(window))
    return $location;
  else
    return new W._LocationCrossFrame($location);
}}
},

_LocationWrapper: {"": "Object;_ptr",
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
},

NodeValidator: {"": "Object;"},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + node.tagName + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys();
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys().length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = child.previousSibling;
      this.call$1(child);
    }
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
CircleElement: {"": "GraphicsElement;r=", "%": "SVGCircleElement"},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=",
  scale$1: function($receiver, arg0) {
    return this.scale.call$1(arg0);
  },
  "%": "SVGFEDisplacementMapElement"
},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

RadialGradientElement: {"": "_GradientElement;r=", "%": "SVGRadialGradientElement"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

ScriptElement: {"": "SvgElement;", $isScriptElement: true, "%": "SVGScriptElement"},

StyleElement0: {"": "SvgElement;disabled}", "%": "SVGStyleElement"},

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new P._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  set$innerHtml: function(receiver, value) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    t1 = [];
    H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
    validator = new W.NodeValidatorBuilder(t1);
    t1 = validator._validators;
    t1.push(W._Html5NodeValidator$(null));
    t1.push(W._TemplatingNodeValidator$());
    t1.push(new W._SvgNodeValidator());
    treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    html = "<svg version=\"1.1\">" + H.S(svg) + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"},

_GradientElement: {"": "SvgElement;", "%": "SVGLinearGradientElement;SVGGradientElement"},

_AttributeClassSet: {"": "CssClassSetImpl;_svg$_element",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = new W._ElementAttributeMap(this._svg$_element)._element.getAttribute("class");
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = J.trim$0$s(t1._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    new W._ElementAttributeMap(this._svg$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  var t1;
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0)
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;"},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = other.x;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = this.y;
    t4 = other.y;
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t4 = new P.Point(t1 - t2, t3 - t4);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t4;
  },
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof factor !== "number")
      throw H.iae(factor);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new P.Point(t1 * factor, t2 * factor);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  get$magnitude: function() {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    return Math.sqrt(t1 * t1 + t2 * t2);
  },
  distanceTo$1: function(other) {
    var t1, t2, t3, dx, dy;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    dx = t1 - t3;
    t3 = this.y;
    t2 = t2.get$y(other);
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    dy = t3 - t2;
    return Math.sqrt(dx * dx + dy * dy);
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      t1 = (t2 == null ? t3 == null : t2 === t3) && J.$eq(this.width, t1.get$width(other)) && J.$eq(this.height, t1.get$height(other));
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  },
  containsPoint$1: function(_, another) {
    var t1, t2, t3;
    t1 = another.x;
    t2 = this.get$left(this);
    if (typeof t1 !== "number")
      throw t1.$ge();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 >= t2) {
      t2 = this.left;
      t3 = this.width;
      if (typeof t2 !== "number")
        throw t2.$add();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (t1 <= t2 + t3) {
        t1 = another.y;
        t2 = this.top;
        if (typeof t1 !== "number")
          throw t1.$ge();
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (t1 >= t2) {
          t3 = this.height;
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t3 = t1 <= t2 + t3;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$topLeft: function(_) {
    var t1 = this.get$left(this);
    t1 = new P.Point(t1, this.top);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_RectangleBase", 0)]);
    return t1;
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": ";ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null}}],
["html_common", "dart:html_common", , P, {
Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
},

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  get$length: function(_) {
    return this.readClasses$0()._collection$_length;
  },
  lookup$1: function(value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value) ? value : null;
  },
  add$1: function(_, value) {
    return this.modify$1(new P.CssClassSetImpl_add_closure(value));
  },
  remove$1: function(_, value) {
    var s, result;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  modify$1: function(f) {
    var s, ret;
    s = this.readClasses$0();
    ret = f.call$1(s);
    this.writeClasses$1(s);
    return ret;
  },
  $isEfficientLength: true
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return J.add$1$ax(s, this.value_0);
  },
  $is_args1: true
},

FilteredElementList: {"": "ListBase;_html_common$_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  remove$1: function(_, element) {
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  $asListBase: null,
  $asList: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  $is_args1: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  $is_args1: true
}}],
["vote", "package:vote/vote.dart", , R, {
majorityThreshold: function(votes) {
  return C.JSNumber_methods.$tdiv(votes, 2) + 1;
},

Ballot: {"": "Object;voter<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return J.$eq(other.get$voter(), this.voter);
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.voter);
  }
},

CondorcetCandidateProfile: {"": "Object;candidate>,lostTo,beat,tied",
  get$hashCode: function(_) {
    return J.get$hashCode$(this.candidate);
  },
  toString$0: function(_) {
    return "[ " + H.S(this.candidate) + ": Beat: " + this.beat._items.length + ", Tied: " + this.tied._items.length + ", Lost to: " + this.lostTo._items.length;
  }
},

CondorcetElection: {"": "Election;_pairs,_profiles,ballots<,places<",
  get$candidates: function() {
    var t1, t2;
    t1 = this._profiles;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
    return t2;
  },
  getPair$2: function(c1, c2) {
    var t1, filter;
    t1 = this._pairs;
    filter = new H.WhereIterable(t1, new R.CondorcetElection_getPair_closure(c1, c2));
    H.setRuntimeTypeInfo(filter, [H.getRuntimeTypeArgument(t1, "IterableBase", 0)]);
    if (!filter.get$iterator(filter).moveNext$0())
      return;
    else
      return filter.get$first(filter).flip$2(c1, c2);
  },
  $asElection: null,
  static: {
CondorcetElection_CondorcetElection: function(ballots, TVoter, TCandidate) {
  var roBallots, voterList, map, candidateSet, t1, ballot, t2, i, candidateI, j, j0, set, candidateProfiles, tarjanMap, candidate, lostTo, beat, tied, tarjanLostTiedSet, pair, other, t3, t4, profile, components, places, placeNumber, round, place;
  roBallots = new X.ReadOnlyCollection(P.List_List$from(ballots, false, null));
  H.setRuntimeTypeInfo(roBallots, [null]);
  voterList = new X.ReadOnlyCollection(P.List_List$from(X.$$(P.IterableBase.prototype.map$1.call(roBallots, roBallots, new R.CondorcetElection_CondorcetElection_closure())), false, null));
  H.setRuntimeTypeInfo(voterList, [null]);
  X.requireArgument(X.CollectionUtil_allUnique(voterList), "Only one ballot per voter is allowed", null);
  map = P.LinkedHashMap_LinkedHashMap(null, null, null, [R.CondorcetPair, TVoter, TCandidate], [J.JSArray, [R.RankedBallot, TVoter, TCandidate]]);
  candidateSet = P.LinkedHashSet_LinkedHashSet(null, null, null, TCandidate);
  for (t1 = J.get$iterator$ax(ballots); t1.moveNext$0();) {
    ballot = t1.get$current();
    for (t2 = ballot.rank._items, i = 0; i < ballot.get$rank()._items.length; i = j) {
      if (i >= t2.length)
        throw H.ioore(t2, i);
      candidateI = t2[i];
      candidateSet.add$1(candidateSet, candidateI);
      for (j = i + 1, j0 = j; j0 < t2.length; ++j0)
        J.add$1$ax(map.putIfAbsent$2(R.CondorcetPair_CondorcetPair(candidateI, t2[j0], null, null, null), new R.CondorcetElection_CondorcetElection_closure0(TVoter, TCandidate)), ballot);
    }
  }
  set = P.LinkedHashSet_LinkedHashSet(null, null, null, [R.CondorcetPair, TVoter, TCandidate]);
  map.forEach$1(map, new R.CondorcetElection_CondorcetElection_closure1(set));
  candidateProfiles = P.LinkedHashMap_LinkedHashMap(null, null, null, TCandidate, [R.CondorcetCandidateProfile, TCandidate]);
  tarjanMap = P.LinkedHashMap_LinkedHashMap(null, null, null, TCandidate, [P.Set, TCandidate]);
  for (t1 = new P.LinkedHashSetIterator(candidateSet, candidateSet._modifications, null, null), t1._cell = t1._set._first; t1.moveNext$0();) {
    candidate = t1._collection$_current;
    lostTo = P.List_List(null, TCandidate);
    lostTo.$builtinTypeInfo = [TCandidate];
    beat = P.List_List(null, TCandidate);
    beat.$builtinTypeInfo = [TCandidate];
    tied = P.List_List(null, TCandidate);
    tied.$builtinTypeInfo = [TCandidate];
    tarjanLostTiedSet = P.LinkedHashSet_LinkedHashSet(null, null, null, TCandidate);
    for (t2 = new P.LinkedHashSetIterator(set, set._modifications, null, null), t2._cell = t2._set._first; t2.moveNext$0();) {
      pair = t2._collection$_current;
      if (J.$eq(pair.get$item1(), candidate) || J.$eq(pair.item2, candidate)) {
        other = pair.item1;
        if (J.$eq(other, candidate))
          other = pair.item2;
        if (pair.get$isTie()) {
          tied.push(other);
          tarjanLostTiedSet.add$1(tarjanLostTiedSet, other);
        } else if (J.$eq(pair.get$winner(), candidate))
          beat.push(other);
        else {
          lostTo.push(other);
          tarjanLostTiedSet.add$1(tarjanLostTiedSet, other);
        }
      }
    }
    t2 = new X.ReadOnlyCollection(P.List_List$from(lostTo, false, null));
    t2.$builtinTypeInfo = [null];
    t3 = new X.ReadOnlyCollection(P.List_List$from(beat, false, null));
    t3.$builtinTypeInfo = [null];
    t4 = new X.ReadOnlyCollection(P.List_List$from(tied, false, null));
    t4.$builtinTypeInfo = [null];
    profile = new R.CondorcetCandidateProfile(candidate, t2, t3, t4);
    profile.$builtinTypeInfo = [null];
    candidateProfiles.$indexSet(candidateProfiles, candidate, profile);
    tarjanMap.$indexSet(tarjanMap, candidate, tarjanLostTiedSet);
  }
  components = X.TarjanCycleDetect_getStronglyConnectedComponents(tarjanMap);
  places = P.List_List(null, [R.ElectionPlace, TCandidate]);
  H.setRuntimeTypeInfo(places, [[R.ElectionPlace, TCandidate]]);
  for (t1 = new H.ListIterator(components, components.length, 0, null), placeNumber = 1; t1.moveNext$0();) {
    round = t1._current;
    place = new R.ElectionPlace(placeNumber, P.List_List$from(round, false, null));
    place.$builtinTypeInfo = [null];
    places.push(place);
    t2 = J.get$length$asx(round);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    placeNumber += t2;
  }
  t1 = [R.ElectionPlace, TCandidate];
  t2 = new X.ReadOnlyCollection(P.List_List$from(places, false, t1));
  H.setRuntimeTypeInfo(t2, [t1]);
  t2 = new R.CondorcetElection(set, candidateProfiles, roBallots, t2);
  H.setRuntimeTypeInfo(t2, [null, null]);
  return t2;
}}

},

CondorcetElection_CondorcetElection_closure: {"": "Closure;",
  call$1: function(b) {
    return b.get$voter();
  },
  $is_args1: true
},

CondorcetElection_CondorcetElection_closure0: {"": "Closure;TVoter_0,TCandidate_1",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.TVoter_0;
    t2 = this.TCandidate_1;
    t3 = P.List_List(null, [R.RankedBallot, t1, t2]);
    H.setRuntimeTypeInfo(t3, [[R.RankedBallot, t1, t2]]);
    return t3;
  }
},

CondorcetElection_CondorcetElection_closure1: {"": "Closure;set_2",
  call$2: function(k, v) {
    var t1 = this.set_2;
    t1.add$1(t1, R.CondorcetPair_CondorcetPair(k.get$item1(), k.item2, v, null, null));
  },
  $is_args2: true
},

CondorcetElection_getPair_closure: {"": "Closure;c1_0,c2_1",
  call$1: function(p) {
    return J.matches$2$x(p, this.c1_0, this.c2_1);
  },
  $is_args1: true
},

CondorcetPair: {"": "Tuple;ballots<,firstOverSecond,secondOverFirst,item1,item2",
  get$winner: function() {
    var t1, t2;
    t1 = this.firstOverSecond;
    t2 = this.secondOverFirst;
    if (t1 > t2)
      return this.item1;
    else if (t2 > t1)
      return this.item2;
    else
      return;
  },
  get$isTie: function() {
    return this.firstOverSecond === this.secondOverFirst;
  },
  matches$2: function(_, can1, can2) {
    var t1, t0;
    X._metaRequireArgumentNotNullOrEmpty("can1");
    if (can1 == null)
      H.throwExpression(X.NullArgumentError$("can1"));
    X._metaRequireArgumentNotNullOrEmpty("can2");
    if (can2 == null)
      H.throwExpression(X.NullArgumentError$("can2"));
    t1 = J.getInterceptor(can1);
    X.requireArgument(!t1.$eq(can1, can2), "can1 and can2 must be different", null);
    if (t1.compareTo$1(can1, can2) > 0) {
      t0 = can2;
      can2 = can1;
      can1 = t0;
    }
    return J.$eq(this.item1, can1) && J.$eq(this.item2, can2);
  },
  flip$2: function(can1, can2) {
    var t1, t2, t3, t0, flipped;
    t1 = this.item1;
    t2 = this.item2;
    if (J.compareTo$1$ns(t1, t2) > 0)
      throw H.wrapException("already flipped!");
    X._metaRequireArgumentNotNullOrEmpty("can1");
    if (can1 == null)
      H.throwExpression(X.NullArgumentError$("can1"));
    X._metaRequireArgumentNotNullOrEmpty("can2");
    if (can2 == null)
      H.throwExpression(X.NullArgumentError$("can2"));
    t3 = J.getInterceptor(can1);
    X.requireArgument(!t3.$eq(can1, can2), "can1 and can2 must be different", null);
    if (t3.compareTo$1(can1, can2) > 0) {
      t0 = can2;
      can2 = can1;
      can1 = t0;
      flipped = true;
    } else
      flipped = false;
    X.requireArgument(J.$eq(can1, t1), "can1", null);
    X.requireArgument(J.$eq(can2, t2), "can1", null);
    if (flipped) {
      t1 = new R.CondorcetPair(this.ballots, this.secondOverFirst, this.firstOverSecond, can2, can1);
      H.setRuntimeTypeInfo(t1, [null, null]);
      return t1;
    } else
      return this;
  },
  $asTuple: function(TVoter, TCandidate) {
    return [TCandidate, TCandidate];
  },
  static: {
CondorcetPair_CondorcetPair: function(can1, can2, bals, TVoter, TCandidate) {
  var t1, t2, temp, roBallots, t3;
  t1 = {};
  t1.can1_0 = can1;
  t1.can2_1 = can2;
  t2 = t1.can1_0;
  if (t2 == null)
    H.throwExpression(X.NullArgumentError$("can1"));
  t2 = t1.can2_1;
  if (t2 == null)
    H.throwExpression(X.NullArgumentError$("can2"));
  t2 = J.$eq(t1.can1_0, t1.can2_1);
  if (t2)
    H.throwExpression(X.DetailedArgumentError$("can1 and can2 must be different", "value was invalid"));
  if (J.compareTo$1$ns(t1.can1_0, t1.can2_1) > 0) {
    temp = t1.can2_1;
    t1.can2_1 = t1.can1_0;
    t1.can1_0 = temp;
  }
  if (bals == null) {
    t1 = new R.CondorcetPair(null, 0, 0, t1.can1_0, t1.can2_1);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  } else {
    t2 = [R.RankedBallot, TVoter, TCandidate];
    roBallots = new X.ReadOnlyCollection(P.List_List$from(bals, false, t2));
    roBallots.$builtinTypeInfo = [t2];
    t2 = X.CollectionUtil_allUnique(roBallots);
    if (!t2)
      H.throwExpression(X.DetailedArgumentError$("Only one ballot per voter is allowed", "value was invalid"));
    t1.fos_2 = 0;
    t1.sof_3 = 0;
    roBallots.forEach$1(roBallots, new R.CondorcetPair_CondorcetPair_closure(t1));
    t2 = t1.can1_0;
    t3 = t1.can2_1;
    t3 = new R.CondorcetPair(roBallots, t1.fos_2, t1.sof_3, t2, t3);
    t3.$builtinTypeInfo = [null, null];
    return t3;
  }
}}

},

CondorcetPair_CondorcetPair_closure: {"": "Closure;box_0",
  call$1: function(b) {
    var t1, t2, firstIndex, secondIndex;
    t1 = b.get$rank();
    t2 = this.box_0;
    firstIndex = t1.indexOf$1(t1, t2.can1_0);
    X.requireArgument(firstIndex >= 0, "bals", null);
    t1 = b.rank;
    secondIndex = t1.indexOf$1(t1, t2.can2_1);
    X.requireArgument(secondIndex >= 0, "bals", null);
    if (firstIndex < secondIndex)
      t2.fos_2 = t2.fos_2 + 1;
    else
      t2.sof_3 = t2.sof_3 + 1;
  },
  $is_args1: true
},

Election: {"": "Object;"},

ElectionPlace: {"": "ReadOnlyCollection;place<,_items",
  toString$0: function(_) {
    return "Place: " + H.S(this.place) + "; " + X.Enumerable.prototype.toString$0.call(this, this);
  },
  ElectionPlace$2: function(place, candidates, TCandidate) {
  },
  $asReadOnlyCollection: null,
  $asEnumerable: null
},

IrvElection: {"": "Election;candidates<,ballots<,rounds<", $asElection: null, static: {
IrvElection_IrvElection: function(ballots, TVoter, TCandidate) {
  var roBallots, t1, t2, roCandidates, rounds, eliminatedCandidates, round, $arguments;
  roBallots = new X.ReadOnlyCollection(P.List_List$from(ballots, false, null));
  H.setRuntimeTypeInfo(roBallots, [null]);
  t1 = X.CollectionUtil_distinct(X.$$(P.IterableBase.prototype.expand$1.call(roBallots, roBallots, new R.IrvElection_IrvElection_closure())), null);
  t2 = H.getRuntimeTypeArgument(t1, "Enumerable", 0);
  roCandidates = new X.ReadOnlyCollection(P.List_List$from(t1, false, t2));
  H.setRuntimeTypeInfo(roCandidates, [t2]);
  rounds = P.List_List(null, [R.IrvRound, TVoter, TCandidate]);
  H.setRuntimeTypeInfo(rounds, [[R.IrvRound, TVoter, TCandidate]]);
  eliminatedCandidates = P.List_List(null, TCandidate);
  H.setRuntimeTypeInfo(eliminatedCandidates, [TCandidate]);
  do {
    round = R.IrvRound_IrvRound(roBallots, eliminatedCandidates, TVoter, TCandidate);
    rounds.push(round);
    t1 = round.get$eliminatedCandidates();
    $arguments = H.substitute(t1.$asIterableBase, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    C.JSArray_methods.addAll$1(eliminatedCandidates, P.List_List$from(t1, true, t2));
  } while (round.eliminations._items.length !== 0);
  t1 = new X.ReadOnlyCollection(rounds);
  H.setRuntimeTypeInfo(t1, [null]);
  t1 = new R.IrvElection(roCandidates, roBallots, t1);
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
}}
},

IrvElection_IrvElection_closure: {"": "Closure;",
  call$1: function(b) {
    return b.get$rank();
  },
  $is_args1: true
},

IrvElimination: {"": "Object;candidate>,_transfers,exhausted",
  getTransferCount$1: function(key) {
    var t1, list;
    t1 = this._transfers;
    list = t1.$index(t1, key);
    if (list == null)
      return 0;
    else
      return J.get$length$asx(list);
  },
  IrvElimination$3: function(candidate, _transfers, exhausted) {
  },
  static: {
IrvElimination$: function(candidate, _transfers, exhausted) {
  var t1 = new R.IrvElimination(candidate, _transfers, exhausted);
  t1.IrvElimination$3(candidate, _transfers, exhausted);
  return t1;
}}

},

IrvRound: {"": "Object;places<,eliminations<",
  get$eliminatedCandidates: function() {
    var t1 = this.eliminations;
    return X.$$(P.IterableBase.prototype.map$1.call(t1, t1, new R.IrvRound_eliminatedCandidates_closure()));
  },
  get$candidates: function() {
    var t1 = this.places;
    return X.$$(P.IterableBase.prototype.expand$1.call(t1, t1, new R.IrvRound_candidates_closure()));
  },
  static: {
IrvRound_IrvRound: function(ballots, eliminatedCandidates, TVoter, TCandidate) {
  var t1, cleanedBallots, candidateAllocations, t2, $arguments, t3, voteGroups, placeVotes, places, newlyEliminatedCandidates, eliminations;
  t1 = {};
  cleanedBallots = X.$$(P.IterableBase.prototype.map$1.call(ballots, ballots, new R.IrvRound_IrvRound_closure(eliminatedCandidates)));
  X.CollectionUtil_count(cleanedBallots, new R.IrvRound_IrvRound_closure0());
  candidateAllocations = X.Grouping$(X.$$(P.IterableBase.prototype.where$1.call(cleanedBallots, cleanedBallots, new R.IrvRound_IrvRound_closure1())), new R.IrvRound_IrvRound_closure2(), null, null);
  t2 = candidateAllocations._values;
  $arguments = H.substitute(t2.$as_HashMap, H.getRuntimeTypeInfo(t2));
  t3 = $arguments == null ? null : $arguments[0];
  t2 = new P.HashMapKeyIterable(t2);
  t2.$builtinTypeInfo = [t3];
  voteGroups = X.Grouping$(t2, new R.IrvRound_IrvRound_closure3(candidateAllocations), null, null);
  t2 = voteGroups._values;
  $arguments = H.substitute(t2.$as_HashMap, H.getRuntimeTypeInfo(t2));
  t3 = $arguments == null ? null : $arguments[0];
  t2 = new P.HashMapKeyIterable(t2);
  t2.$builtinTypeInfo = [t3];
  $arguments = H.substitute(t2.$asIterableBase, H.getRuntimeTypeInfo(t2));
  t3 = $arguments == null ? null : $arguments[0];
  placeVotes = P.List_List$from(t2, true, t3);
  t3 = new R.IrvRound_IrvRound_closure4();
  t2 = placeVotes.length - 1;
  if (t2 - 0 <= 32)
    H.Sort__insertionSort(placeVotes, 0, t2, t3);
  else
    H.Sort__dualPivotQuicksort(placeVotes, 0, t2, t3);
  t1.placeNumber_0 = 1;
  t1 = new H.MappedListIterable(placeVotes, new R.IrvRound_IrvRound_closure5(t1, TCandidate, voteGroups));
  t1.$builtinTypeInfo = [null, null];
  places = new X.ReadOnlyCollection(P.List_List$from(t1, false, null));
  places.$builtinTypeInfo = [null];
  newlyEliminatedCandidates = R.IrvRound__getEliminatedCandidates(places);
  eliminations = new X.ReadOnlyCollection(P.List_List$from(J.map$1$ax(newlyEliminatedCandidates, new R.IrvRound_IrvRound_closure6(TVoter, TCandidate, cleanedBallots, newlyEliminatedCandidates)), false, null));
  eliminations.$builtinTypeInfo = [null];
  t1 = new R.IrvRound(places, eliminations);
  t1.$builtinTypeInfo = [null, null];
  return t1;
},

IrvRound__getEliminatedCandidates: function(places) {
  var t1, t2, majorityCount, t3;
  t1 = places._items;
  if (t1.length === 1)
    return [];
  t2 = X.$$(P.IterableBase.prototype.map$1.call(places, places, new R.IrvRound__getEliminatedCandidates_closure()));
  X._metaRequireArgumentNotNullOrEmpty("source");
  t2 = new X._SimpleNumEnumerable(t2);
  H.setRuntimeTypeInfo(t2, [null]);
  majorityCount = R.majorityThreshold(t2.sum$0());
  if (0 >= t1.length)
    throw H.ioore(t1, 0);
  if (J.get$length$asx(t1[0]) === 1) {
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t2 = J.$ge$n(t1[0].get$voteCount(), majorityCount);
  } else
    t2 = false;
  if (t2)
    return [];
  t2 = t1.length;
  t3 = t2 - 1;
  if (t3 < 0)
    throw H.ioore(t1, t3);
  t3 = J.map$1$ax(t1[t3], new R.IrvRound__getEliminatedCandidates_closure0());
  return t3.toList$0(t3);
}}

},

IrvRound_IrvRound_closure: {"": "Closure;eliminatedCandidates_1",
  call$1: function(b) {
    var t1, t2, pruned, winner;
    t1 = X.CollectionUtil_exclude(X.$$(b.get$rank()), this.eliminatedCandidates_1);
    t2 = H.getRuntimeTypeArgument(t1, "Enumerable", 0);
    pruned = new X.ReadOnlyCollection(P.List_List$from(t1, false, t2));
    H.setRuntimeTypeInfo(pruned, [t2]);
    t1 = pruned._items;
    t2 = t1.length;
    if (t2 === 0)
      winner = null;
    else {
      if (0 >= t2)
        throw H.ioore(t1, 0);
      winner = t1[0];
    }
    t1 = new X.Tuple3(winner, b, pruned);
    H.setRuntimeTypeInfo(t1, [null, null, null]);
    return t1;
  },
  $is_args1: true
},

IrvRound_IrvRound_closure0: {"": "Closure;",
  call$1: function(t) {
    return t.get$item3() != null;
  },
  $is_args1: true
},

IrvRound_IrvRound_closure1: {"": "Closure;",
  call$1: function(t) {
    return t.get$item3() != null;
  },
  $is_args1: true
},

IrvRound_IrvRound_closure2: {"": "Closure;",
  call$1: function(tuple) {
    return tuple.get$item3();
  },
  $is_args1: true
},

IrvRound_IrvRound_closure3: {"": "Closure;candidateAllocations_2",
  call$1: function(c) {
    var t1 = this.candidateAllocations_2._values;
    return J.get$length$asx(t1.$index(t1, c));
  },
  $is_args1: true
},

IrvRound_IrvRound_closure4: {"": "Closure;",
  call$2: function(a, b) {
    return J.compareTo$1$ns(b, a);
  },
  $is_args2: true
},

IrvRound_IrvRound_closure5: {"": "Closure;box_0,TCandidate_3,voteGroups_4",
  call$1: function(pv) {
    var t1, vg, currentPlaceNumber, t2, t3;
    t1 = this.voteGroups_4._values;
    vg = t1.$index(t1, pv);
    t1 = this.box_0;
    currentPlaceNumber = t1.placeNumber_0;
    t2 = J.get$length$asx(vg);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1.placeNumber_0 = currentPlaceNumber + t2;
    t2 = this.TCandidate_3;
    t1 = t2;
    t3 = new R.PluralityElectionPlace(pv, currentPlaceNumber, P.List_List$from(vg, false, t1));
    H.setRuntimeTypeInfo(t3, [t2]);
    t3.ElectionPlace$2(currentPlaceNumber, vg, t1);
    return t3;
  },
  $is_args1: true
},

IrvRound_IrvRound_closure6: {"": "Closure;TVoter_5,TCandidate_6,cleanedBallots_7,newlyEliminatedCandidates_8",
  call$1: function(c) {
    var t1, t2, xfers, exhausted, b, rb, pruned, it;
    t1 = this.TCandidate_6;
    t2 = this.TVoter_5;
    xfers = P.LinkedHashMap_LinkedHashMap(null, null, null, t1, [J.JSArray, [R.RankedBallot, t2, t1]]);
    exhausted = P.List_List(null, [R.RankedBallot, t2, t1]);
    H.setRuntimeTypeInfo(exhausted, [[R.RankedBallot, t2, t1]]);
    for (t1 = this.cleanedBallots_7, t1 = X.$$(P.IterableBase.prototype.where$1.call(t1, t1, new R.IrvRound_IrvRound__closure(c))), t1 = t1.get$iterator(t1), t2 = this.newlyEliminatedCandidates_8; t1.moveNext$0();) {
      b = t1.get$current();
      rb = b.get$item1();
      pruned = b.item2.exclude$1(t2);
      if (!pruned.get$iterator(pruned).moveNext$0())
        exhausted.push(rb);
      else {
        it = pruned.get$iterator(pruned);
        if (!it.moveNext$0())
          H.throwExpression(new P.StateError("No elements"));
        J.add$1$ax(xfers.putIfAbsent$2(it.get$current(), new R.IrvRound_IrvRound__closure0()), rb);
      }
    }
    t1 = new X.ReadOnlyCollection(exhausted);
    H.setRuntimeTypeInfo(t1, [null]);
    return R.IrvElimination$(c, xfers, t1);
  },
  $is_args1: true
},

IrvRound_IrvRound__closure: {"": "Closure;c_9",
  call$1: function(t) {
    return J.$eq(t.get$item3(), this.c_9);
  },
  $is_args1: true
},

IrvRound_IrvRound__closure0: {"": "Closure;",
  call$0: function() {
    return P.List_List(null, null);
  }
},

IrvRound_eliminatedCandidates_closure: {"": "Closure;",
  call$1: function(ie) {
    return J.get$candidate$x(ie);
  },
  $is_args1: true
},

IrvRound_candidates_closure: {"": "Closure;",
  call$1: function(p) {
    return p;
  },
  $is_args1: true
},

IrvRound__getEliminatedCandidates_closure: {"": "Closure;",
  call$1: function(p) {
    return J.$mul$n(p.get$voteCount(), p._items.length);
  },
  $is_args1: true
},

IrvRound__getEliminatedCandidates_closure0: {"": "Closure;",
  call$1: function(p) {
    return p;
  },
  $is_args1: true
},

Player: {"": "Object;"},

PluralityBallot: {"": "Ballot;choice<"},

PluralityElection: {"": "Election;ballots<,_ballotGroup,places<",
  get$candidates: function() {
    var t1, t2;
    t1 = this._ballotGroup._values;
    t2 = new P.HashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_HashMap", 0)]);
    return t2;
  },
  $asElection: null,
  static: {
PluralityElection_PluralityElection: function(ballots, TVoter, TCandidate) {
  var roBallots, voterList, group, voteCounts, t1, ballotCounts, places, place, count, p;
  roBallots = new X.ReadOnlyCollection(P.List_List$from(ballots, false, null));
  H.setRuntimeTypeInfo(roBallots, [null]);
  voterList = new X.ReadOnlyCollection(P.List_List$from(X.$$(P.IterableBase.prototype.map$1.call(roBallots, roBallots, new R.PluralityElection_PluralityElection_closure())), false, null));
  H.setRuntimeTypeInfo(voterList, [null]);
  X.requireArgument(X.CollectionUtil_allUnique(voterList), "Only one ballot per voter is allowed", null);
  group = X.Grouping$(roBallots, new R.PluralityElection_PluralityElection_closure0(), null, null);
  voteCounts = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [J.JSArray, TCandidate]);
  t1 = group._values;
  t1.forEach$1(t1, new R.PluralityElection_PluralityElection_closure1(TCandidate, voteCounts));
  t1 = new P.LinkedHashMapKeyIterable(voteCounts);
  H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(voteCounts, "_LinkedHashMap", 0)]);
  ballotCounts = P.List_List$from(t1, true, J.JSInt);
  H.IterableMixinWorkaround_sortList(ballotCounts, new R.PluralityElection_PluralityElection_closure2());
  places = P.List_List(null, [R.PluralityElectionPlace, TCandidate]);
  H.setRuntimeTypeInfo(places, [[R.PluralityElectionPlace, TCandidate]]);
  for (t1 = new H.ListIterator(ballotCounts, ballotCounts.length, 0, null), place = 1; t1.moveNext$0();) {
    count = t1._current;
    p = new R.PluralityElectionPlace(count, place, P.List_List$from(voteCounts.$index(voteCounts, count), false, null));
    p.$builtinTypeInfo = [null];
    places.push(p);
    place += p._items.length;
  }
  t1 = new X.ReadOnlyCollection(P.List_List$from(places, false, null));
  H.setRuntimeTypeInfo(t1, [null]);
  t1 = new R.PluralityElection(roBallots, group, t1);
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
}}

},

PluralityElection_PluralityElection_closure: {"": "Closure;",
  call$1: function(pb) {
    return pb.get$voter();
  },
  $is_args1: true
},

PluralityElection_PluralityElection_closure0: {"": "Closure;",
  call$1: function(pb) {
    return pb.get$choice();
  },
  $is_args1: true
},

PluralityElection_PluralityElection_closure1: {"": "Closure;TCandidate_0,voteCounts_1",
  call$2: function(c, b) {
    J.add$1$ax(this.voteCounts_1.putIfAbsent$2(J.get$length$asx(b), new R.PluralityElection_PluralityElection__closure(this.TCandidate_0)), c);
  },
  $is_args2: true
},

PluralityElection_PluralityElection__closure: {"": "Closure;TCandidate_2",
  call$0: function() {
    var t1, t2;
    t1 = this.TCandidate_2;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  }
},

PluralityElection_PluralityElection_closure2: {"": "Closure;",
  call$2: function(a, b) {
    return J.compareTo$1$ns(b, a);
  },
  $is_args2: true
},

PluralityElectionPlace: {"": "ElectionPlace;voteCount<,place,_items",
  toString$0: function(_) {
    return "Votes: " + H.S(this.voteCount) + "; " + R.ElectionPlace.prototype.toString$0.call(this, this);
  },
  $asElectionPlace: null,
  $asEnumerable: null
},

RankedBallot: {"": "PluralityBallot;rank<",
  toString$0: function(_) {
    return "{RankedBallot for '" + H.S(this.voter) + "', ranked " + this.rank._items.length + " candidates}";
  },
  $asPluralityBallot: null
}}],
["vote_calc", "package:vote/calc.dart", , R, {
_distanceElectionIsolate: function(data) {
  return S.DistanceElection_DistanceElection(data.get$voters(), data.get$candidates(), null, null);
},

_pluralityElectionIsolate: function(ballots) {
  return R.PluralityElection_PluralityElection(ballots, null, null);
},

_condorcetElectionIsolate: function(ballots) {
  return R.CondorcetElection_CondorcetElection(ballots, null, null);
},

_irvElectionIsolate: function(ballots) {
  return R.IrvElection_IrvElection(ballots, null, null);
},

_voterHexIsolate: function(tuple) {
  var map, t1, b, candidate, t2, it, hue;
  map = P.LinkedHashMap_LinkedHashMap(null, null, null, S.MapPlayer, J.JSString);
  for (t1 = tuple.get$item1().get$ballots(), t1.toString, t1 = X._SequenceIterator$(t1); t1.moveNext$0();) {
    b = t1._bot$_current;
    if (tuple.get$item3() == null)
      candidate = b.get$choice();
    else {
      t2 = b.get$rank();
      t2 = X.$$(P.IterableBase.prototype.where$1.call(t2, t2, new R._voterHexIsolate_closure(tuple)));
      it = t2.get$iterator(t2);
      if (!it.moveNext$0())
        H.throwExpression(new P.StateError("No elements"));
      candidate = it.get$current();
    }
    if (candidate != null) {
      hue = S.LocationData_getHue(candidate);
      map.$indexSet(map, b.get$voter(), X.HslColor_HslColor(hue, 0.5, 0.75).toRgb$0().toHex$0());
    }
  }
  return map;
},

CalcEngine: {"": "Object;_distanceElectionMapper,_pluralityElectionMapper,_condorcetElectionMapper,_irvElectionMapper,_voterHexMapper,_locationDataStream,_highlightCandidates",
  set$locationData: function(data) {
    var t1;
    X._metaRequireArgumentNotNullOrEmpty("data");
    t1 = this._distanceElectionMapper;
    t1._throttled_stream$_source = data;
    t1._tryUpdate$0();
    t1 = this._locationDataStream;
    if (t1._state >= 4)
      H.throwExpression(t1._badEventState$0());
    t1._async$_add$1(data);
  },
  addCandidate$0: function() {
    this.set$locationData(this._distanceElectionMapper._throttled_stream$_source.cloneAndAddCandidate$0());
  },
  _distanceElectionChanged$0: function() {
    var t1, t2;
    t1 = this._pluralityElectionMapper;
    t2 = this._distanceElectionMapper;
    t1._throttled_stream$_source = t2._outputValue.get$ballots();
    t1._tryUpdate$0();
    t1 = this._condorcetElectionMapper;
    t1._throttled_stream$_source = t2._outputValue.get$ballots();
    t1._tryUpdate$0();
    t1 = this._irvElectionMapper;
    t1._throttled_stream$_source = t2._outputValue.get$ballots();
    t1._tryUpdate$0();
    this._updateVoterHexMapper$0();
  },
  _updateVoterHexMapper$0: function() {
    var t1, t2, val;
    t1 = this._distanceElectionMapper;
    t2 = t1._outputValue;
    t1 = t1._throttled_stream$_source;
    val = new X.Tuple3(this._highlightCandidates, t2, t1);
    H.setRuntimeTypeInfo(val, [null, null, null]);
    t1 = this._voterHexMapper;
    t1._throttled_stream$_source = val;
    t1._tryUpdate$0();
  },
  CalcEngine$0: function() {
    var t1, t2;
    t1 = this._distanceElectionMapper._throttled_stream$_controller;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    t2.listen$1(new R.CalcEngine_closure(this));
  },
  static: {
CalcEngine$: function() {
  var t1, t2, t3, t4, t5;
  t1 = new Y.ThrottledStream(R._distanceElectionIsolate$closure, P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, false);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = new Y.ThrottledStream(R._pluralityElectionIsolate$closure, P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, false);
  H.setRuntimeTypeInfo(t2, [[X.Sequence, [R.PluralityBallot, S.MapPlayer, S.MapPlayer]], R.PluralityElection]);
  t3 = new Y.ThrottledStream(R._condorcetElectionIsolate$closure, P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, false);
  H.setRuntimeTypeInfo(t3, [[X.Sequence, [R.RankedBallot, S.MapPlayer, S.MapPlayer]], R.CondorcetElection]);
  t4 = new Y.ThrottledStream(R._irvElectionIsolate$closure, P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, false);
  H.setRuntimeTypeInfo(t4, [[X.Sequence, [R.RankedBallot, S.MapPlayer, S.MapPlayer]], R.IrvElection]);
  t5 = new Y.ThrottledStream(R._voterHexIsolate$closure, P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, false);
  H.setRuntimeTypeInfo(t5, [[X.Tuple3, S.DistanceElection, S.LocationData, [J.JSArray, S.MapPlayer]], [P.Map, S.MapPlayer, J.JSString]]);
  t5 = new R.CalcEngine(t1, t2, t3, t4, t5, P.StreamController_StreamController(null, null, null, null, false, S.LocationData), null);
  t5.CalcEngine$0();
  return t5;
}}

},

CalcEngine_closure: {"": "Closure;this_0",
  call$1: function(args) {
    this.this_0._distanceElectionChanged$0();
  },
  $is_args1: true
},

_voterHexIsolate_closure: {"": "Closure;tuple_0",
  call$1: function(c) {
    return J.indexOf$1$asx(this.tuple_0.item3, c) >= 0;
  },
  $is_args1: true
}}],
["", "vote_demo.dart", , R, {
main: function() {
  R.VoteDemo_VoteDemo(document.querySelector("#content"), document.querySelector("#pluralityView"), document.querySelector("#distanceView"), document.querySelector("#condorcetView"), document.querySelector("#canManView"), document.querySelector("#irvView")).requestFrame$0();
},

VoteDemo: {"": "StageWrapper;_calcEngine,_playerHues,_condorcetView,_irvView,_distanceView,_pluralityView,_canManView,_candidateHues,canvas,stage,rootThing,_invalidatedEventSub,_frameRequested,_disposed",
  _locationDataUpdated$1: function(args) {
    var locData = this._calcEngine._distanceElectionMapper._throttled_stream$_source;
    this.rootThing.set$locationData(locData);
    this._canManView.set$candidates(locData.get$candidates());
  },
  get$_locationDataUpdated: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype._locationDataUpdated$1, null, "_locationDataUpdated$1");
  },
  _distanceElectionUpdated$1: function(args) {
    var t1 = this._distanceView;
    t1._election = this._calcEngine._distanceElectionMapper._outputValue;
    t1._dirty = true;
    this.requestFrame$0();
  },
  get$_distanceElectionUpdated: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype._distanceElectionUpdated$1, null, "_distanceElectionUpdated$1");
  },
  _pluralityElectionUpdated$1: function(args) {
    var t1 = this._pluralityView;
    t1._election = this._calcEngine._pluralityElectionMapper._outputValue;
    t1._dirty = true;
    this.requestFrame$0();
  },
  get$_pluralityElectionUpdated: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype._pluralityElectionUpdated$1, null, "_pluralityElectionUpdated$1");
  },
  _condorcetElectionUpdated$1: function(args) {
    var t1 = this._condorcetView;
    t1._election = this._calcEngine._condorcetElectionMapper._outputValue;
    t1._candidates = null;
    t1._dirty = true;
    this.requestFrame$0();
  },
  get$_condorcetElectionUpdated: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype._condorcetElectionUpdated$1, null, "_condorcetElectionUpdated$1");
  },
  _irvElectionUpdated$1: function(args) {
    var t1 = this._irvView;
    t1._election = this._calcEngine._irvElectionMapper._outputValue;
    t1._dirty = true;
    this.requestFrame$0();
  },
  get$_irvElectionUpdated: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype._irvElectionUpdated$1, null, "_irvElectionUpdated$1");
  },
  _voterHexMapperUpdated$1: function(args) {
    this.rootThing._voterMap.set$playerHexMap(this._calcEngine._voterHexMapper._outputValue);
    this.requestFrame$0();
  },
  get$_voterHexMapperUpdated: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype._voterHexMapperUpdated$1, null, "_voterHexMapperUpdated$1");
  },
  drawFrame$1: function(highResTime) {
    var t1;
    B.StageWrapper.prototype.drawFrame$1.call(this, highResTime);
    t1 = this._condorcetView;
    if (t1._dirty) {
      t1.updateElement$0();
      t1._dirty = false;
    }
    t1 = this._irvView;
    if (t1._dirty) {
      t1.updateElement$0();
      t1._dirty = false;
    }
    t1 = this._pluralityView;
    if (t1._dirty) {
      t1.updateElement$0();
      t1._dirty = false;
    }
    t1 = this._distanceView;
    if (t1._dirty) {
      t1.updateElement$0();
      t1._dirty = false;
    }
    t1 = this._canManView;
    if (t1._dirty) {
      t1.updateElement$0();
      t1._dirty = false;
    }
  },
  get$drawFrame: function() {
    return new H.BoundClosure$1(this, R.VoteDemo.prototype.drawFrame$1, null, "drawFrame$1");
  },
  VoteDemo$_internal$7: function(canvas, rootMapElement, _condorcetView, _pluralityView, _distanceView, _canManView, _irvView) {
    var t1, t2, t3, t4;
    B.MouseManager_MouseManager(this.stage);
    t1 = this._calcEngine;
    t2 = new P._ControllerStream(t1._locationDataStream);
    H.setRuntimeTypeInfo(t2, [null]);
    t2.listen$1(this.get$_locationDataUpdated());
    t2 = t1._distanceElectionMapper._throttled_stream$_controller;
    t3 = new P._BroadcastStream(t2);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_BroadcastStreamController", 0)]);
    t3.listen$1(this.get$_distanceElectionUpdated());
    t3 = t1._pluralityElectionMapper._throttled_stream$_controller;
    t2 = new P._BroadcastStream(t3);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_BroadcastStreamController", 0)]);
    t2.listen$1(this.get$_pluralityElectionUpdated());
    t2 = t1._condorcetElectionMapper._throttled_stream$_controller;
    t3 = new P._BroadcastStream(t2);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_BroadcastStreamController", 0)]);
    t3.listen$1(this.get$_condorcetElectionUpdated());
    t3 = t1._irvElectionMapper._throttled_stream$_controller;
    t2 = new P._BroadcastStream(t3);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_BroadcastStreamController", 0)]);
    t2.listen$1(this.get$_irvElectionUpdated());
    t2 = t1._voterHexMapper._throttled_stream$_controller;
    t3 = new P._BroadcastStream(t2);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_BroadcastStreamController", 0)]);
    t3.listen$1(this.get$_voterHexMapperUpdated());
    t3 = this.rootThing._candidatesMovedHandle._controller;
    t2 = new P._BroadcastStream(t3);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_BroadcastStreamController", 0)]);
    t2.listen$1(new R.VoteDemo$_internal_closure(this));
    t2 = this._canManView;
    t3 = t2._requestRemoveCandidateHandle._controller;
    t4 = new P._BroadcastStream(t3);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_BroadcastStreamController", 0)]);
    t4.listen$1(new R.VoteDemo$_internal_closure0(this));
    t2 = t2._requestNewCandidateHandle._controller;
    t4 = new P._BroadcastStream(t2);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t2, "_BroadcastStreamController", 0)]);
    t4.listen$1(new R.VoteDemo$_internal_closure1(this));
    t4 = this._condorcetView._hoverChangedHandle._controller;
    t2 = new P._BroadcastStream(t4);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t4, "_BroadcastStreamController", 0)]);
    t2.listen$1(new R.VoteDemo$_internal_closure2(this));
    t2 = this._irvView._hoverChangedHandle._controller;
    t4 = new P._BroadcastStream(t2);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t2, "_BroadcastStreamController", 0)]);
    t4.listen$1(new R.VoteDemo$_internal_closure3(this));
    t1.set$locationData(S.LocationData_LocationData$random());
  },
  static: {
VoteDemo_VoteDemo: function(canvas, pluralityDiv, distanceDiv, condorcetDiv, canManDiv, irvDiv) {
  var t1, voterMap, distanceView, pluralityView, condorcetView, irvView;
  t1 = J.getInterceptor$x(canvas);
  voterMap = N.RootMapElement$(t1.get$width(canvas), t1.get$height(canvas));
  distanceView = new G.DistanceView(null, distanceDiv, null);
  X._metaRequireArgumentNotNullOrEmpty("node");
  if (distanceView._node == null)
    H.throwExpression(X.NullArgumentError$("node"));
  distanceView._dirty = true;
  pluralityView = new G.PluralityView(null, pluralityDiv, null);
  X._metaRequireArgumentNotNullOrEmpty("node");
  if (pluralityView._node == null)
    H.throwExpression(X.NullArgumentError$("node"));
  pluralityView._dirty = true;
  t1 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t1, [X.EventArgs]);
  condorcetView = new G.CondorcetView(t1, null, null, null, condorcetDiv, null);
  X._metaRequireArgumentNotNullOrEmpty("node");
  if (condorcetView._node == null)
    H.throwExpression(X.NullArgumentError$("node"));
  condorcetView._dirty = true;
  t1 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t1, [X.EventArgs]);
  irvView = new G.IrvView(t1, null, null, irvDiv, null);
  X._metaRequireArgumentNotNullOrEmpty("node");
  if (irvView._node == null)
    H.throwExpression(X.NullArgumentError$("node"));
  irvView._dirty = true;
  return R.VoteDemo$_internal(canvas, voterMap, condorcetView, pluralityView, distanceView, G.CandidateManagerView$(canManDiv), irvView);
},

VoteDemo$_internal: function(canvas, rootMapElement, _condorcetView, _pluralityView, _distanceView, _canManView, _irvView) {
  var t1, t2, t3;
  t1 = R.CalcEngine$();
  t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, S.MapPlayer, J.JSNumber);
  t3 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t3, [X.EventArgs]);
  t3 = new B.Stage(t3, canvas, rootMapElement, null, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
  t3.rootThing.registerParent$1(t3);
  t3 = new R.VoteDemo(t1, t2, _condorcetView, _irvView, _distanceView, _pluralityView, _canManView, null, canvas, t3, rootMapElement, null, false, false);
  t3.StageWrapper$2(canvas, rootMapElement);
  t3.VoteDemo$_internal$7(canvas, rootMapElement, _condorcetView, _pluralityView, _distanceView, _canManView, _irvView);
  return t3;
}}

},

VoteDemo$_internal_closure: {"": "Closure;this_0",
  call$1: function(data) {
    var t1, t2;
    t1 = this.this_0._calcEngine;
    t2 = t1._distanceElectionMapper;
    t2._forceUpdate = true;
    t2._tryUpdate$0();
    t1 = t1._locationDataStream;
    t2 = t2._throttled_stream$_source;
    if (t1._state >= 4)
      H.throwExpression(t1._badEventState$0());
    t1._async$_add$1(t2);
    return;
  },
  $is_args1: true
},

VoteDemo$_internal_closure0: {"": "Closure;this_1",
  call$1: function(data) {
    var t1 = this.this_1._calcEngine;
    t1.set$locationData(t1._distanceElectionMapper._throttled_stream$_source.cloneAndRemove$1(data));
  },
  $is_args1: true
},

VoteDemo$_internal_closure1: {"": "Closure;this_2",
  call$1: function(args) {
    this.this_2._calcEngine.addCandidate$0();
  },
  $is_args1: true
},

VoteDemo$_internal_closure2: {"": "Closure;this_3",
  call$1: function(args) {
    var t1, t2, t3;
    t1 = this.this_3;
    t2 = t1._condorcetView._vote_html$_highlightCandidates;
    t3 = t1._calcEngine;
    t3._highlightCandidates = t2;
    t3._updateVoterHexMapper$0();
    t1.rootThing._candidateMap.set$showOnlyPlayers(t2);
  },
  $is_args1: true
},

VoteDemo$_internal_closure3: {"": "Closure;this_4",
  call$1: function(args) {
    var t1, t2, t3;
    t1 = this.this_4;
    t2 = t1._irvView.get$highlightCandidates();
    t3 = t1._calcEngine;
    t3._highlightCandidates = t2;
    t3._updateVoterHexMapper$0();
    t1.rootThing._candidateMap.set$showOnlyPlayers(t2);
  },
  $is_args1: true
}},
1],
["vote_html", "package:vote/html.dart", , G, {
getCandidateHexColor: function(c, dark) {
  var hue = S.LocationData_getHue(c);
  if (hue == null)
    return "#999999";
  else
    return X.HslColor_HslColor(hue, 1, dark ? 0.3 : 0.75).toRgb$0().toHex$0();
},

CandidateManagerView: {"": "HtmlView;_requestRemoveCandidateHandle,_requestNewCandidateHandle,_candidates,_node,_dirty",
  set$candidates: function(value) {
    this._candidates = value;
    this._dirty = true;
  },
  updateElement$0: function() {
    var t1, t2, t3, table, cell, addButton, t4, t5, candidate, row, hue, rgb, deleteButton, t6, $arguments, t7;
    t1 = this._node;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$children(t1);
    t3.clear$0(t3);
    table = document.createElement("table", null);
    t3 = J.getInterceptor$x(table);
    cell = J.insertCell$1$x(t3.insertRow$1(table, -1), -1);
    J.set$colSpan$x(cell, 2);
    addButton = document.createElement("button", null);
    addButton.textContent = "Add Candidate";
    if (this._candidates._items.length < 26) {
      t4 = new W._ElementEventStreamImpl(addButton, C.EventStreamProvider_click._eventType, false);
      H.setRuntimeTypeInfo(t4, [null]);
      t5 = this.get$_requestNewCandidate();
      t5 = new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(t5), t4._useCapture);
      H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
      t5._tryResume$0();
    } else
      J.set$disabled$x(addButton, true);
    new W._ChildrenElementList(cell, cell.children)._element.appendChild(addButton);
    for (t4 = X._SequenceIterator$(this._candidates); t4.moveNext$0();) {
      candidate = t4._bot$_current;
      row = t3.insertRow$1(table, -1);
      hue = S.LocationData_getHue(candidate);
      if (hue != null) {
        rgb = X.HslColor_HslColor(hue, 1, 0.75).toRgb$0();
        J.set$background$x(row.style, rgb.toHex$0());
      }
      cell = J.insertCell$1$x(row, -1);
      cell.toString;
      t5 = new W._ElementCssClassSet(cell);
      t5.add$1(t5, "candidate-cell");
      t5 = J.getInterceptor(candidate);
      J.setInnerHtml$1$x(cell, t5.toString$0(candidate));
      cell = row.insertCell(-1);
      deleteButton = document.createElement("button", null);
      deleteButton.textContent = "Delete";
      t6 = new W._DataAttributeMap(new W._ElementAttributeMap(deleteButton));
      t5 = J.toString$0(t5.get$id(candidate));
      t6._attributes._element.setAttribute("data-" + t6._toHyphenedName$1("candidate-id"), t5);
      if (this._candidates._items.length > 1) {
        t5 = new W._ElementEventStreamImpl(deleteButton, C.EventStreamProvider_click._eventType, false);
        t5.$builtinTypeInfo = [null];
        t6 = this.get$_deleteClick();
        $arguments = H.substitute(t5.$as_EventStream, H.getRuntimeTypeInfo(t5));
        t7 = $arguments == null ? null : $arguments[0];
        t5 = new W._EventStreamSubscription(0, t5._html$_target, t5._eventType, W._wrapZone(t6), t5._useCapture);
        t5.$builtinTypeInfo = [t7];
        t6 = t5._onData;
        if (t6 != null && t5._pauseCount <= 0)
          J.addEventListener$3$x(t5._html$_target, t5._eventType, t6, t5._useCapture);
      } else
        J.set$disabled$x(deleteButton, true);
      new W._ChildrenElementList(cell, cell.children)._element.appendChild(deleteButton);
    }
    t1 = t2.get$children(t1);
    t1.add$1(t1, table);
  },
  _requestNewCandidate$1: function(args) {
    var source, t1;
    source = J.get$toElement$x(args);
    t1 = this._requestNewCandidateHandle._controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(C.C_EventArgs);
    J.set$disabled$x(source, true);
  },
  get$_requestNewCandidate: function() {
    return new H.BoundClosure$1(this, G.CandidateManagerView.prototype._requestNewCandidate$1, null, "_requestNewCandidate$1");
  },
  _deleteClick$1: function(args) {
    var source, t1, t2;
    source = J.get$toElement$x(args);
    t1 = J.getInterceptor$x(source);
    t2 = t1.get$dataset(source);
    this._removeCandidateWithId$1(H.Primitives_parseInt(t2._attributes._element.getAttribute("data-" + t2._toHyphenedName$1("candidate-id")), null, null));
    t1.set$disabled(source, true);
  },
  get$_deleteClick: function() {
    return new H.BoundClosure$1(this, G.CandidateManagerView.prototype._deleteClick$1, null, "_deleteClick$1");
  },
  _removeCandidateWithId$1: function(id) {
    var t1, candidate;
    t1 = this._candidates;
    candidate = t1.singleWhere$1(t1, new G.CandidateManagerView__removeCandidateWithId_closure(id));
    t1 = this._requestRemoveCandidateHandle._controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(candidate);
  },
  static: {
"": "CandidateManagerView__candidateIdAttribute",
CandidateManagerView$: function(node) {
  var t1, t2, t3;
  t1 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t1, [S.MapPlayer]);
  t2 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t2, [X.EventArgs]);
  t3 = new X.ReadOnlyCollection(C.List_empty);
  H.setRuntimeTypeInfo(t3, [S.MapPlayer]);
  t3 = new G.CandidateManagerView(t1, t2, t3, node, null);
  X._metaRequireArgumentNotNullOrEmpty("node");
  if (t3._node == null)
    H.throwExpression(X.NullArgumentError$("node"));
  t3._dirty = true;
  return t3;
}}

},

CandidateManagerView__removeCandidateWithId_closure: {"": "Closure;id_0",
  call$1: function(mp) {
    var t1, t2;
    t1 = J.get$id$x(mp);
    t2 = this.id_0;
    return t1 == null ? t2 == null : t1 === t2;
  },
  $is_args1: true
},

CondorcetView: {"": "HtmlView;_hoverChangedHandle,_election,_candidates,_vote_html$_highlightCandidates,_node,_dirty",
  updateElement$0: function() {
    var t1, t2, t3, table, row, cell, t4, t5, opp, evenPlaceRow, evenCandidateRow, place, t6, first, candidate, t7, t8, t9, pair, leftColor, rightColor, middleText, cellClass, cellData;
    t1 = this._node;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$children(t1);
    t3.clear$0(t3);
    table = document.createElement("table", null);
    t3 = J.getInterceptor$x(table);
    row = t3.insertRow$1(table, -1);
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    t4 = new W._ElementCssClassSet(row);
    t4.add$1(t4, "row-odd");
    J.set$innerHtml$x(cell, "Place");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Candidate");
    t4 = this._election;
    if (t4 != null) {
      t4 = t4.get$places();
      t4 = X.$$(P.IterableBase.prototype.expand$1.call(t4, t4, new G.CondorcetView_updateElement_closure()));
      t5 = H.getRuntimeTypeArgument(t4, "Enumerable", 0);
      t4 = new X.ReadOnlyCollection(P.List_List$from(t4, false, t5));
      H.setRuntimeTypeInfo(t4, [t5]);
      this._candidates = t4;
      for (t4 = this._candidates, t4.toString, t4 = X._SequenceIterator$(t4); t4.moveNext$0();) {
        opp = t4._bot$_current;
        cell = W._ElementFactoryProvider_createElement_tag("th", null);
        new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
        t5 = J.getInterceptor$x(cell);
        t5.set$innerHtml(cell, J.toString$0(opp));
        J.set$background$x(t5.get$style(cell), G.getCandidateHexColor(opp, false));
        t5.set$colSpan(cell, 3);
      }
      for (t4 = X._SequenceIterator$(this._election.get$places()), evenPlaceRow = true, evenCandidateRow = true; t4.moveNext$0();) {
        place = t4._bot$_current;
        for (t5 = J.getInterceptor$ax(place), t6 = t5.get$iterator(place), first = true; t6.moveNext$0();) {
          candidate = t6.get$current();
          row = t3.insertRow$1(table, -1);
          row.toString;
          t7 = new W._ElementCssClassSet(row);
          t7.add$1(t7, evenPlaceRow ? "row-even" : "row-odd");
          if (first) {
            cell = W._ElementFactoryProvider_createElement_tag("th", null);
            new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
            t7 = J.getInterceptor$x(cell);
            t8 = t7.get$classes(cell);
            t8.add$1(t8, "place-number");
            t7.set$rowSpan(cell, t5.get$length(place));
            C.TableCellElement_methods.setInnerHtml$1(cell, C.JSNumber_methods.toString$0(place.get$place()));
            first = false;
          }
          cell = J.insertCell$1$x(row, -1);
          cell.toString;
          t7 = new W._ElementCssClassSet(cell);
          t7.add$1(t7, "candidate-cell");
          J.set$background$x(cell.style, G.getCandidateHexColor(candidate, false));
          t7 = J.getInterceptor(candidate);
          J.setInnerHtml$1$x(cell, t7.toString$0(candidate));
          for (t8 = this._candidates, t8 = new X._SequenceIterator(t8, t8.get$length(t8), -1, null); t8.moveNext$0();) {
            opp = t8._bot$_current;
            t9 = J.getInterceptor(opp);
            if (t9.$eq(opp, candidate)) {
              cell = row.insertCell(-1);
              J.set$background$x(cell.style, "#999999");
              J.set$colSpan$x(cell, 3);
            } else {
              pair = this._election.getPair$2(candidate, opp);
              if (t7.$eq(candidate, pair.get$winner())) {
                leftColor = G.getCandidateHexColor(candidate, true);
                rightColor = G.getCandidateHexColor(opp, true);
                middleText = "&gt;";
                cellClass = "winner";
              } else if (t9.$eq(opp, pair.get$winner())) {
                leftColor = G.getCandidateHexColor(candidate, false);
                rightColor = G.getCandidateHexColor(opp, false);
                middleText = "&lt;";
                cellClass = "loser";
              } else {
                leftColor = G.getCandidateHexColor(candidate, true);
                rightColor = G.getCandidateHexColor(opp, true);
                middleText = "=";
                cellClass = "tie";
              }
              cellData = this._getPairElementName$2(candidate, opp);
              cell = row.insertCell(-1);
              J.setInnerHtml$1$x(cell, C.JSInt_methods.toString$0(pair.firstOverSecond));
              J.set$color$x(cell.style, leftColor);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "vote-count");
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "pair-cell");
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, cellData);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, cellClass);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "left_value");
              t9 = new W._DataAttributeMap(new W._ElementAttributeMap(cell));
              t9._attributes._element.setAttribute("data-" + t9._toHyphenedName$1("pair-ids"), cellData);
              cell = row.insertCell(-1);
              J.setInnerHtml$1$x(cell, middleText);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "pair-cell");
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, cellClass);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, cellData);
              t9 = new W._DataAttributeMap(new W._ElementAttributeMap(cell));
              t9._attributes._element.setAttribute("data-" + t9._toHyphenedName$1("pair-ids"), cellData);
              cell = row.insertCell(-1);
              J.setInnerHtml$1$x(cell, C.JSInt_methods.toString$0(pair.secondOverFirst));
              J.set$color$x(cell.style, rightColor);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "vote-count");
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "right_value");
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, cellClass);
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, "pair-cell");
              t9 = new W._ElementCssClassSet(cell);
              t9.add$1(t9, cellData);
              t9 = new W._DataAttributeMap(new W._ElementAttributeMap(cell));
              t9._attributes._element.setAttribute("data-" + t9._toHyphenedName$1("pair-ids"), cellData);
            }
          }
          evenCandidateRow = !evenCandidateRow;
        }
        evenPlaceRow = !evenPlaceRow;
      }
    }
    t3 = new W._ElementEventStreamImpl(table, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = this.get$_onMouseOver();
    t4 = new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(t4), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    t4 = new W._ElementEventStreamImpl(table, C.EventStreamProvider_mouseout._eventType, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t3 = this.get$_onMouseOut();
    t3 = new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(t3), t4._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t3._tryResume$0();
    t1 = t2.get$children(t1);
    t1.add$1(t1, table);
  },
  set$_thePair: function(pair) {
    var t1 = this._vote_html$_highlightCandidates;
    if (pair == null ? t1 != null : pair !== t1) {
      this._vote_html$_highlightCandidates = pair;
      this._updateCellHoverStyle$0();
      t1 = this._hoverChangedHandle._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(C.C_EventArgs);
    }
  },
  _updateCellHoverStyle$0: function() {
    var t1, cells, t2, t3, t4, thePairs;
    t1 = this._node;
    cells = W._FrozenElementList$_wrap(t1.querySelectorAll("td.pair-cell.hover-pair"), null);
    cells.forEach$1(cells, new G.CondorcetView__updateCellHoverStyle_closure("hover-pair"));
    t2 = this._vote_html$_highlightCandidates;
    if (t2 != null) {
      t3 = t2.length;
      if (0 >= t3)
        throw H.ioore(t2, 0);
      t4 = t2[0];
      if (1 >= t3)
        throw H.ioore(t2, 1);
      thePairs = W._FrozenElementList$_wrap(t1.querySelectorAll("td.pair-cell." + this._getPairElementName$2(t4, t2[1])), null);
      thePairs.forEach$1(thePairs, new G.CondorcetView__updateCellHoverStyle_closure0("hover-pair"));
    }
  },
  _onMouseOver$1: function(e) {
    var t1, t2, pair, t3, t4;
    t1 = J.get$toElement$x(e);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isElement) {
      pair = G.CondorcetView__getPair(e.toElement);
      if (pair != null) {
        t1 = this._candidates;
        t2 = pair.item1;
        t1 = t1._items;
        t3 = t1.length;
        if (t2 >>> 0 !== t2 || t2 >= t3)
          throw H.ioore(t1, t2);
        t2 = t1[t2];
        t4 = pair.item2;
        if (t4 >>> 0 !== t4 || t4 >= t3)
          throw H.ioore(t1, t4);
        this.set$_thePair([t2, t1[t4]]);
        return;
      }
    }
    this.set$_thePair(null);
  },
  get$_onMouseOver: function() {
    return new H.BoundClosure$1(this, G.CondorcetView.prototype._onMouseOver$1, null, "_onMouseOver$1");
  },
  _onMouseOut$1: function(args) {
    this.set$_thePair(null);
  },
  get$_onMouseOut: function() {
    return new H.BoundClosure$1(this, G.CondorcetView.prototype._onMouseOut$1, null, "_onMouseOut$1");
  },
  _getPairElementName$2: function(can1, can2) {
    var t1, cIndex, oIndex;
    t1 = this._candidates;
    cIndex = t1.indexOf$1(t1, can1);
    t1 = this._candidates;
    oIndex = t1.indexOf$1(t1, can2);
    return "pair" + H.S(P.min(cIndex, oIndex)) + "_" + H.S(P.max(cIndex, oIndex));
  },
  static: {
"": "CondorcetView__pairIdsKey",
CondorcetView__getPair: function(elem) {
  var t1, pairIdStr, ids, t2;
  t1 = J.get$dataset$x(elem);
  pairIdStr = t1._attributes._element.getAttribute("data-" + t1._toHyphenedName$1("pair-ids"));
  if (pairIdStr != null) {
    t1 = new H.MappedListIterable(J.substring$1$s(pairIdStr, 4).split("_"), new G.CondorcetView__getPair_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    ids = t1.toList$0(t1);
    t1 = ids.length;
    if (0 >= t1)
      throw H.ioore(ids, 0);
    t2 = ids[0];
    if (1 >= t1)
      throw H.ioore(ids, 1);
    t2 = new X.Tuple(t2, ids[1]);
    H.setRuntimeTypeInfo(t2, [J.JSInt, J.JSInt]);
    return t2;
  }
  return;
}}

},

CondorcetView_updateElement_closure: {"": "Closure;",
  call$1: function(p) {
    return p;
  },
  $is_args1: true
},

CondorcetView__updateCellHoverStyle_closure: {"": "Closure;hoverPairClass_0",
  call$1: function(e) {
    var t1 = J.get$classes$x(e);
    t1.remove$1(t1, this.hoverPairClass_0);
  },
  $is_args1: true
},

CondorcetView__updateCellHoverStyle_closure0: {"": "Closure;hoverPairClass_1",
  call$1: function(e) {
    var t1 = J.get$classes$x(e);
    t1.add$1(t1, this.hoverPairClass_1);
  },
  $is_args1: true
},

CondorcetView__getPair_closure: {"": "Closure;",
  call$1: function(s) {
    return H.Primitives_parseInt(s, null, null);
  },
  $is_args1: true
},

DistanceView: {"": "HtmlView;_election,_node,_dirty",
  updateElement$0: function() {
    var t1, t2, t3, table, row, t4, cell, evenPlaceRow, evenCandidateRow, place, t5, t6, t7, t8, t9, first, candidate, t10, t11, hue, rgb;
    t1 = this._node;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$children(t1);
    t3.clear$0(t3);
    table = document.createElement("table", null);
    t3 = J.getInterceptor$x(table);
    row = t3.insertRow$1(table, -1);
    row.toString;
    t4 = new W._ElementCssClassSet(row);
    t4.add$1(t4, "row-odd");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Place");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Candidate");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Avg Dist");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Avg Dist\u00b2");
    t4 = this._election;
    if (t4 != null)
      for (t4 = X._SequenceIterator$(t4.get$places()), evenPlaceRow = true, evenCandidateRow = true; t4.moveNext$0();) {
        place = t4._bot$_current;
        for (t5 = J.getInterceptor$ax(place), t6 = t5.get$iterator(place), t7 = place._items, t8 = place.avgDistanceSquared, t9 = J.getInterceptor$n(t8), first = true; t6.moveNext$0();) {
          candidate = t6.get$current();
          row = t3.insertRow$1(table, -1);
          row.toString;
          t10 = new W._ElementCssClassSet(row);
          t10.add$1(t10, evenPlaceRow ? "row-even" : "row-odd");
          if (first) {
            cell = W._ElementFactoryProvider_createElement_tag("th", null);
            new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
            t10 = J.getInterceptor$x(cell);
            t11 = t10.get$classes(cell);
            t11.add$1(t11, "place-number");
            t10.set$rowSpan(cell, t5.get$length(place));
            C.TableCellElement_methods.setInnerHtml$1(cell, C.JSNumber_methods.toString$0(place.get$place()));
          }
          cell = J.insertCell$1$x(row, -1);
          cell.toString;
          t10 = new W._ElementCssClassSet(cell);
          t10.add$1(t10, "candidate-cell");
          hue = S.LocationData_getHue(candidate);
          if (hue != null) {
            rgb = X.HslColor_HslColor(hue, 1, 0.75).toRgb$0();
            J.set$background$x(cell.style, rgb.toHex$0());
          }
          J.setInnerHtml$1$x(cell, J.toString$0(candidate));
          if (first) {
            cell = row.insertCell(-1);
            J.getInterceptor$x(cell).set$rowSpan(cell, t5.get$length(place));
            C.TableCellElement_methods.setInnerHtml$1(cell, J.toStringAsFixed$1$n(place.get$avgDistance(), 2));
            t10 = new W._ElementCssClassSet(cell);
            t10.add$1(t10, "vote-count");
            cell = row.insertCell(-1);
            J.getInterceptor$x(cell).set$rowSpan(cell, t7.length);
            C.TableCellElement_methods.setInnerHtml$1(cell, t9.toStringAsFixed$1(t8, 2));
            t10 = new W._ElementCssClassSet(cell);
            t10.add$1(t10, "vote-count");
            first = false;
          }
          evenCandidateRow = !evenCandidateRow;
        }
        evenPlaceRow = !evenPlaceRow;
      }
    t1 = t2.get$children(t1);
    t1.add$1(t1, table);
  }
},

IrvView: {"": "HtmlView;_hoverChangedHandle,_highlightRound,_election,_node,_dirty",
  get$highlightCandidates: function() {
    var t1, t2;
    t1 = this._highlightRound;
    if (t1 == null)
      return;
    else {
      t2 = this._election.get$rounds()._items;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t2, t1);
      t1 = t2[t1].get$candidates();
      return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }
  },
  updateElement$0: function() {
    var t1, t2, t3, t4, table, cell, previousPlaces, i, round, drawPlaces, i0, t5, currentPlace, previousPlace, t6, t7, t8, j, row, place, c, el, ei, elimination, foundSelf, transferCount;
    t1 = this._node;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$children(t1);
    t3.clear$0(t3);
    t3 = this._election;
    if (t3 == null)
      return;
    t3 = t3.get$rounds();
    t3 = t3.get$first(t3).get$places();
    t3 = X.$$(P.IterableBase.prototype.expand$1.call(t3, t3, new G.IrvView_updateElement_closure()));
    t4 = H.getRuntimeTypeArgument(t3, "Enumerable", 0);
    H.setRuntimeTypeInfo(new X.ReadOnlyCollection(P.List_List$from(t3, false, t4)), [t4]);
    table = document.createElement("table", null);
    for (t3 = J.getInterceptor$x(table), cell = null, previousPlaces = null, i = 0; t4 = this._election.get$rounds()._items, i < t4.length; i = i0) {
      round = t4[i];
      if (previousPlaces == null)
        drawPlaces = true;
      else {
        t4 = previousPlaces._items;
        if (t4.length < round.get$places()._items.length)
          drawPlaces = true;
        else
          for (drawPlaces = false, i0 = 0; t5 = round.get$places()._items, i0 < t5.length; ++i0) {
            currentPlace = t5[i0];
            if (i0 >= t4.length)
              throw H.ioore(t4, i0);
            previousPlace = t4[i0];
            t5 = J.getInterceptor$asx(currentPlace);
            t6 = t5.get$length(currentPlace);
            t7 = J.getInterceptor$asx(previousPlace);
            t8 = t7.get$length(previousPlace);
            if (t6 == null ? t8 != null : t6 !== t8)
              drawPlaces = true;
            else {
              j = 0;
              while (true) {
                t6 = t5.get$length(currentPlace);
                if (typeof t6 !== "number")
                  throw H.iae(t6);
                if (!(j < t6))
                  break;
                if (!J.$eq(t5.$index(currentPlace, j), t7.$index(previousPlace, j))) {
                  drawPlaces = true;
                  break;
                }
                ++j;
              }
            }
          }
      }
      previousPlaces = round.get$places();
      if (drawPlaces) {
        row = t3.insertRow$1(table, -1);
        J.setInnerHtml$1$x(J.insertCell$1$x(row, -1), "&nbsp;");
        for (t4 = round.get$places(), t4 = new X._SequenceIterator(t4, t4.get$length(t4), -1, null); t4.moveNext$0();) {
          place = t4._bot$_current;
          cell = W._ElementFactoryProvider_createElement_tag("th", null);
          new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
          J.getInterceptor$x(cell).set$colSpan(cell, J.get$length$asx(place));
          C.TableCellElement_methods.setInnerHtml$1(cell, C.JSNumber_methods.toString$0(place.get$place()));
          t5 = new W._ElementCssClassSet(cell);
          t5.add$1(t5, "candidate-cell");
        }
        row = t3.insertRow$1(table, -1);
        J.setInnerHtml$1$x(J.insertCell$1$x(row, -1), "&nbsp;");
        for (t4 = round.get$places(), t4 = new X._SequenceIterator(t4, t4.get$length(t4), -1, null); t4.moveNext$0();)
          for (t5 = J.get$iterator$ax(t4._bot$_current); t5.moveNext$0();) {
            c = t5.get$current();
            cell = W._ElementFactoryProvider_createElement_tag("th", null);
            new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
            t6 = J.getInterceptor$x(cell);
            t6.set$innerHtml(cell, J.toString$0(c));
            t6 = t6.get$classes(cell);
            t6.add$1(t6, "candidate-cell");
            J.set$background$x(cell.style, G.getCandidateHexColor(c, false));
          }
      }
      row = t3.insertRow$1(table, -1);
      cell = W._ElementFactoryProvider_createElement_tag("th", null);
      i0 = i + 1;
      t4 = J.getInterceptor$x(cell);
      t4.set$innerHtml(cell, "Round " + i0);
      t4 = t4.get$classes(cell);
      t4.add$1(t4, "irv_round");
      t4 = new W._DataAttributeMap(new W._ElementAttributeMap(cell));
      t5 = C.JSInt_methods.toString$0(i);
      t4._attributes._element.setAttribute("data-" + t4._toHyphenedName$1("roundIndex"), t5);
      new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
      for (t4 = round.get$places(), t4 = new X._SequenceIterator(t4, t4.get$length(t4), -1, null), t5 = J.getInterceptor$x(row); t4.moveNext$0();) {
        place = t4._bot$_current;
        for (t6 = J.get$iterator$ax(place); t6.moveNext$0();) {
          c = t6.get$current();
          cell = t5.insertCell$1(row, -1);
          J.setInnerHtml$1$x(cell, J.toString$0(place.get$voteCount()));
          t7 = new W._ElementCssClassSet(cell);
          t7.add$1(t7, "candidate-cell");
          t7 = new W._ElementCssClassSet(cell);
          t7.add$1(t7, "vote-count");
          J.set$background$x(cell.style, G.getCandidateHexColor(c, false));
        }
      }
      el = round.get$eliminations()._items.length;
      for (t4 = round.eliminations._items, ei = 0; ei < el; ++ei) {
        t5 = el - ei - 1;
        if (t5 < 0 || t5 >= t4.length)
          throw H.ioore(t4, t5);
        elimination = t4[t5];
        row = t3.insertRow$1(table, -1);
        cell = J.insertCell$1$x(row, -1);
        t5 = J.getInterceptor$x(elimination);
        J.setInnerHtml$1$x(cell, J.toString$0(t5.get$candidate(elimination)));
        J.set$fontStyle$x(cell.style, "italic");
        J.set$textAlign$x(cell.style, "right");
        for (t6 = round.get$candidates(), t6 = t6.get$iterator(t6), foundSelf = false; t6.moveNext$0();) {
          c = t6.get$current();
          cell = row.insertCell(-1);
          if (J.$eq(c, t5.get$candidate(elimination))) {
            J.setInnerHtml$1$x(cell, "&larr;");
            foundSelf = true;
          } else {
            transferCount = elimination.getTransferCount$1(c);
            if (typeof transferCount !== "number")
              throw transferCount.$gt();
            if (transferCount > 0) {
              J.setInnerHtml$1$x(cell, C.JSNumber_methods.toString$0(transferCount));
              t7 = new W._ElementCssClassSet(cell);
              t7.add$1(t7, "vote-count");
            }
          }
        }
      }
    }
    table.toString;
    t3 = new W._ElementEventStreamImpl(table, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = this.get$_onMouseOver();
    t4 = new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(t4), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    t4 = new W._ElementEventStreamImpl(table, C.EventStreamProvider_mouseout._eventType, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t3 = this.get$_onMouseOut();
    t3 = new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(t3), t4._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t3._tryResume$0();
    t1 = t2.get$children(t1);
    t1.add$1(t1, table);
    this._updateHighlightedRound$1(null);
  },
  _onMouseOver$1: function(e) {
    var t1, t2, elem;
    t1 = J.get$toElement$x(e);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isElement) {
      elem = e.toElement;
      t1 = J.get$classes$x(elem).readClasses$0();
      if (t1.contains$1(t1, "irv_round")) {
        t1 = new W._DataAttributeMap(new W._ElementAttributeMap(elem));
        this._updateHighlightedRound$1(H.Primitives_parseInt(t1._attributes._element.getAttribute("data-" + t1._toHyphenedName$1("roundIndex")), null, null));
        return;
      }
    }
    this._updateHighlightedRound$1(null);
  },
  get$_onMouseOver: function() {
    return new H.BoundClosure$1(this, G.IrvView.prototype._onMouseOver$1, null, "_onMouseOver$1");
  },
  _onMouseOut$1: function(args) {
    this._updateHighlightedRound$1(null);
  },
  get$_onMouseOut: function() {
    return new H.BoundClosure$1(this, G.IrvView.prototype._onMouseOut$1, null, "_onMouseOut$1");
  },
  _updateHighlightedRound$1: function(roundIndex) {
    var t1;
    if (!J.$eq(roundIndex, this._highlightRound)) {
      this._highlightRound = roundIndex;
      t1 = this._hoverChangedHandle._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(C.C_EventArgs);
    }
  },
  static: {
"": "IrvView__roundCellClass",
}

},

IrvView_updateElement_closure: {"": "Closure;",
  call$1: function(p) {
    return p;
  },
  $is_args1: true
},

PluralityView: {"": "HtmlView;_election,_node,_dirty",
  updateElement$0: function() {
    var t1, t2, t3, table, row, cell, t4, evenPlaceRow, evenCandidateRow, place, t5, t6, first, candidate, t7, t8, hue, rgb;
    t1 = this._node;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$children(t1);
    t3.clear$0(t3);
    table = document.createElement("table", null);
    t3 = J.getInterceptor$x(table);
    row = t3.insertRow$1(table, -1);
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Place");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    J.set$innerHtml$x(cell, "Candidate");
    cell = W._ElementFactoryProvider_createElement_tag("th", null);
    new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
    t4 = new W._ElementCssClassSet(row);
    t4.add$1(t4, "row-odd");
    J.set$innerHtml$x(cell, "Votes");
    t4 = this._election;
    if (t4 != null)
      for (t4 = X._SequenceIterator$(t4.get$places()), evenPlaceRow = true, evenCandidateRow = true; t4.moveNext$0();) {
        place = t4._bot$_current;
        for (t5 = J.getInterceptor$ax(place), t6 = t5.get$iterator(place), first = true; t6.moveNext$0();) {
          candidate = t6.get$current();
          row = t3.insertRow$1(table, -1);
          row.toString;
          t7 = new W._ElementCssClassSet(row);
          t7.add$1(t7, evenPlaceRow ? "row-even" : "row-odd");
          if (first) {
            cell = W._ElementFactoryProvider_createElement_tag("th", null);
            new W._ChildrenElementList(row, row.children)._element.appendChild(cell);
            t7 = J.getInterceptor$x(cell);
            t8 = t7.get$classes(cell);
            t8.add$1(t8, "place-number");
            t7.set$rowSpan(cell, t5.get$length(place));
            C.TableCellElement_methods.setInnerHtml$1(cell, C.JSNumber_methods.toString$0(place.get$place()));
          }
          cell = J.insertCell$1$x(row, -1);
          cell.toString;
          t7 = new W._ElementCssClassSet(cell);
          t7.add$1(t7, "candidate-cell");
          hue = S.LocationData_getHue(candidate);
          if (hue != null) {
            rgb = X.HslColor_HslColor(hue, 1, 0.75).toRgb$0();
            J.set$background$x(cell.style, rgb.toHex$0());
          }
          J.setInnerHtml$1$x(cell, J.toString$0(candidate));
          if (first) {
            cell = row.insertCell(-1);
            J.getInterceptor$x(cell).set$rowSpan(cell, t5.get$length(place));
            C.TableCellElement_methods.setInnerHtml$1(cell, J.toString$0(place.get$voteCount()));
            t7 = new W._ElementCssClassSet(cell);
            t7.add$1(t7, "vote-count");
            first = false;
          }
          evenCandidateRow = !evenCandidateRow;
        }
        evenPlaceRow = !evenPlaceRow;
      }
    t1 = t2.get$children(t1);
    t1.add$1(t1, table);
  }
}}],
["vote_map", "package:vote/map.dart", , S, {
DistanceBallot: {"": "RankedBallot;_distances,rank,choice,voter",
  getDistance$1: function(candidate) {
    var t1 = this._distances;
    return t1.$index(t1, candidate);
  },
  $asRankedBallot: null,
  static: {
DistanceBallot_DistanceBallot: function(voter, candidates, TVoter, TCandidate) {
  var distances, rank, items, t1;
  distances = X.CollectionUtil_toMap(X.$$(candidates), new S.DistanceBallot_DistanceBallot_closure(voter), null);
  rank = P.List_List$from(candidates, true, S.MapPlayer);
  X.requireArgument(rank.length > 0, "candidates", null);
  X.requireArgument(X.CollectionUtil_allUnique(rank), "candidates", null);
  H.IterableMixinWorkaround_sortList(rank, new S.DistanceBallot_DistanceBallot_closure0(distances));
  items = new X.ReadOnlyCollection(P.List_List$from(rank, false, null));
  H.setRuntimeTypeInfo(items, [null]);
  t1 = items._items;
  if (0 >= t1.length)
    throw H.ioore(t1, 0);
  t1 = new S.DistanceBallot(distances, items, t1[0], voter);
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
}}

},

DistanceBallot_DistanceBallot_closure: {"": "Closure;voter_0",
  call$1: function(c) {
    return C.JSDouble_methods.toInt$0(J.get$location$x(this.voter_0).distanceTo$1(J.get$location$x(c)) * 128) / 128;
  },
  $is_args1: true
},

DistanceBallot_DistanceBallot_closure0: {"": "Closure;distances_1",
  call$2: function(a, b) {
    var t1, d;
    t1 = this.distances_1;
    d = J.compareTo$1$ns(t1.$index(t1, a), t1.$index(t1, b));
    if (d === 0) {
      X.rnd().toString;
      d = Math.random() < 0.5 ? -1 : 1;
    }
    return d;
  },
  $is_args2: true
},

DistanceElection: {"": "Election;candidates<,ballots<,places<", $asElection: null, static: {
DistanceElection_DistanceElection: function(voters, candidates, TVoter, TCandidate) {
  var t1, t2, cans, ballots, distanceGroups, t3, distances, places;
  t1 = {};
  t2 = TCandidate;
  cans = new X.ReadOnlyCollection(P.List_List$from(candidates, false, t2));
  H.setRuntimeTypeInfo(cans, [t2]);
  ballots = new X.ReadOnlyCollection(P.List_List$from(J.map$1$ax(voters, new S.DistanceElection_DistanceElection_closure(cans)), false, null));
  H.setRuntimeTypeInfo(ballots, [null]);
  distanceGroups = X.Grouping$(cans, new S.DistanceElection_DistanceElection_closure0(ballots), null, null);
  t2 = distanceGroups._values;
  t3 = new P.HashMapKeyIterable(t2);
  H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_HashMap", 0)]);
  distances = P.List_List$from(t3, true, [X.Tuple, J.JSNumber, J.JSNumber]);
  H.IterableMixinWorkaround_sortList(distances, new S.DistanceElection_DistanceElection_closure1());
  t1.placeNumber_0 = 1;
  t1 = new H.MappedListIterable(distances, new S.DistanceElection_DistanceElection_closure2(t1, distanceGroups));
  H.setRuntimeTypeInfo(t1, [null, null]);
  places = new X.ReadOnlyCollection(P.List_List$from(t1, false, null));
  H.setRuntimeTypeInfo(places, [null]);
  t1 = new S.DistanceElection(cans, ballots, places);
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
}}
},

DistanceElection_DistanceElection_closure: {"": "Closure;cans_1",
  call$1: function(voter) {
    return S.DistanceBallot_DistanceBallot(voter, this.cans_1, S.MapPlayer, S.MapPlayer);
  },
  $is_args1: true
},

DistanceElection_DistanceElection_closure0: {"": "Closure;ballots_2",
  call$1: function(candidate) {
    var t1, sumOfDistance, sumOfSquaredDistance, count, distance;
    for (t1 = X._SequenceIterator$(this.ballots_2), sumOfDistance = 0, sumOfSquaredDistance = 0, count = 0; t1.moveNext$0();) {
      distance = t1._bot$_current.getDistance$1(candidate);
      if (typeof distance !== "number")
        throw H.iae(distance);
      sumOfDistance += distance;
      sumOfSquaredDistance += distance * distance;
      ++count;
    }
    t1 = new X.Tuple(sumOfDistance / count, sumOfSquaredDistance / count);
    H.setRuntimeTypeInfo(t1, [J.JSNumber, J.JSNumber]);
    return t1;
  },
  $is_args1: true
},

DistanceElection_DistanceElection_closure1: {"": "Closure;",
  call$2: function(a, b) {
    return J.compareTo$1$ns(a.get$item1(), b.get$item1());
  },
  $is_args2: true
},

DistanceElection_DistanceElection_closure2: {"": "Closure;box_0,distanceGroups_3",
  call$1: function(d) {
    var t1, placeCans, t2, t3, place;
    t1 = this.distanceGroups_3._values;
    placeCans = t1.$index(t1, d);
    t1 = this.box_0;
    t2 = t1.placeNumber_0;
    t3 = null;
    place = new S.DistanceElectionPlace(d.get$item1(), d.item2, t2, P.List_List$from(placeCans, false, t3));
    H.setRuntimeTypeInfo(place, [null]);
    place.ElectionPlace$2(t2, placeCans, t3);
    t3 = t1.placeNumber_0;
    t2 = J.get$length$asx(placeCans);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1.placeNumber_0 = t3 + t2;
    return place;
  },
  $is_args1: true
},

DistanceElectionPlace: {"": "ElectionPlace;avgDistance<,avgDistanceSquared,place,_items", $asElectionPlace: null, $asEnumerable: null},

LocationData: {"": "Object;candidates<,voters<",
  cloneAndRemove$1: function(mp) {
    var t1, newCans;
    X._metaRequireArgumentNotNullOrEmpty("mp");
    if (mp == null)
      H.throwExpression(X.NullArgumentError$("mp"));
    t1 = this.candidates;
    newCans = new X.ReadOnlyCollection(P.List_List$from(X.$$(P.IterableBase.prototype.where$1.call(t1, t1, new S.LocationData_cloneAndRemove_closure(mp))), false, null));
    H.setRuntimeTypeInfo(newCans, [null]);
    return new S.LocationData(newCans, this.voters);
  },
  cloneAndAddCandidate$0: function() {
    var t1, newCans, i, newName, coord, loc;
    t1 = this.candidates;
    newCans = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    for (i = 0; i < newCans.length; ++i) {
      t1 = J.get$name$x(newCans[i]);
      t1.toString;
      if (0 >= t1.length)
        H.throwExpression(P.RangeError$value(0));
      if (t1.charCodeAt(0) - 65 > i)
        break;
    }
    newName = S.LocationData_getCandidateName(i);
    X.rnd().toString;
    t1 = Math.random();
    X.rnd().toString;
    coord = new X.Vector(t1, Math.random());
    H.setRuntimeTypeInfo(coord, [null]);
    loc = coord.scale$1(coord, 10);
    t1 = $.MapPlayer__counter;
    $.MapPlayer__counter = t1 + 1;
    C.JSArray_methods.insert$2(newCans, i, new S.MapPlayer(t1, newName, loc));
    t1 = new X.ReadOnlyCollection(P.List_List$from(newCans, false, null));
    H.setRuntimeTypeInfo(t1, [null]);
    return new S.LocationData(t1, this.voters);
  },
  static: {
"": "LocationData_maxCandidateCount,LocationData_bounds,LocationData__ACharCode,LocationData_span,LocationData__candidateHues",
LocationData_LocationData$random: function() {
  var voters, i, t1, j, t2, t3, coords, middle, coord, candidates;
  voters = P.List_List(null, S.MapPlayer);
  H.setRuntimeTypeInfo(voters, [S.MapPlayer]);
  for (i = 0; i < 10; ++i)
    for (t1 = i * 1.1111111111111112, j = 0; j < 10; ++j) {
      t2 = new X.Coordinate(t1, j * 1.1111111111111112);
      t2.$builtinTypeInfo = [null];
      t3 = $.MapPlayer__counter;
      $.MapPlayer__counter = t3 + 1;
      voters.push(new S.MapPlayer(t3, null, t2));
    }
  coords = P.List_List(null, X.Vector);
  H.setRuntimeTypeInfo(coords, [X.Vector]);
  middle = new X.Vector(0.5, 0.5);
  H.setRuntimeTypeInfo(middle, [null]);
  coords.push(middle);
  for (i = 0; i < 4; ++i) {
    if ($._botHelperRandom == null)
      $._botHelperRandom = C.C__Random;
    $._botHelperRandom.toString;
    t1 = Math.random();
    if ($._botHelperRandom == null)
      $._botHelperRandom = C.C__Random;
    $._botHelperRandom.toString;
    coord = new X.Vector(t1, Math.random());
    coord.$builtinTypeInfo = [null];
    coords.push(coord);
  }
  candidates = P.List_List(null, S.MapPlayer);
  H.setRuntimeTypeInfo(candidates, [S.MapPlayer]);
  t1 = X.$$(coords);
  t1.map$1(t1, new S.LocationData_LocationData$random_closure()).forEachWithIndex$1(new S.LocationData_LocationData$random_closure0(candidates));
  t1 = new X.ReadOnlyCollection(voters);
  H.setRuntimeTypeInfo(t1, [S.MapPlayer]);
  t2 = new X.ReadOnlyCollection(candidates);
  H.setRuntimeTypeInfo(t2, [S.MapPlayer]);
  return new S.LocationData(t2, t1);
},

LocationData_getHue: function(candidate) {
  var letter, letterCode, t1;
  if ($.LocationData__candidateHues == null)
    $.LocationData__candidateHues = S.LocationData__slice(26, 360, 3);
  letter = J.get$name$x(candidate);
  letter.toString;
  if (0 >= letter.length)
    H.throwExpression(P.RangeError$value(0));
  letterCode = letter.charCodeAt(0) - 65;
  t1 = $.LocationData__candidateHues;
  if (letterCode < 0 || letterCode >= t1.length)
    throw H.ioore(t1, letterCode);
  return t1[letterCode];
},

LocationData__slice: function(itemCount, maxValue, sliceCount) {
  var values, sliceSize, index, i, index0, index1, t1;
  values = P.List_List(itemCount, J.JSNumber);
  H.setRuntimeTypeInfo(values, [J.JSNumber]);
  sliceSize = maxValue / sliceCount;
  for (index = 0, i = 0; i < sliceCount; ++i, index = index0)
    if (index === itemCount)
      return values;
    else {
      index0 = index + 1;
      if (index >= itemCount)
        throw H.ioore(values, index);
      values[index] = i * sliceSize;
    }
  for (; true; index = index0) {
    sliceSize = maxValue / (index * 2);
    for (index0 = index, i = 0; i < index; ++i, index0 = index1)
      if (index0 === itemCount)
        return values;
      else {
        index1 = index0 + 1;
        if (i >= itemCount)
          throw H.ioore(values, i);
        t1 = values[i];
        if (typeof t1 !== "number")
          throw t1.$add();
        if (index0 < 0 || index0 >= itemCount)
          throw H.ioore(values, index0);
        values[index0] = t1 + sliceSize;
      }
  }
},

LocationData_getCandidateName: function(i) {
  var t1 = J.getInterceptor$n(i);
  X.requireArgument(t1.$ge(i, 0), "i", null);
  X.requireArgument(t1.$lt(i, 26), "i", null);
  return P.String_String$fromCharCodes([t1.$add(i, 65)]);
}}

},

LocationData_LocationData$random_closure: {"": "Closure;",
  call$1: function(c) {
    return J.scale$1$x(c, 10);
  },
  $is_args1: true
},

LocationData_LocationData$random_closure0: {"": "Closure;candidates_0",
  call$2: function(c, i) {
    var t1, t2;
    t1 = S.LocationData_getCandidateName(i);
    t2 = $.MapPlayer__counter;
    $.MapPlayer__counter = t2 + 1;
    this.candidates_0.push(new S.MapPlayer(t2, t1, c));
  },
  $is_args2: true
},

LocationData_cloneAndRemove_closure: {"": "Closure;mp_0",
  call$1: function(e) {
    return !J.$eq(e, this.mp_0);
  },
  $is_args1: true
},

MapPlayer: {"": "Player;_id<,name>,_location",
  get$location: function(_) {
    return this._location;
  },
  set$location: function(_, value) {
    X._metaRequireArgumentNotNullOrEmpty("value");
    this._location = value;
  },
  get$id: function(_) {
    return this._id;
  },
  compareTo$1: function(_, other) {
    return C.JSInt_methods.compareTo$1(this._id, other.get$_id());
  },
  get$hashCode: function(_) {
    return this._id & 0x1FFFFFFF;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return other.get$_id() === this._id;
  },
  toString$0: function(_) {
    var t1 = this.name;
    if (t1 == null)
      return "MapPlayer at [" + J.toStringAsFixed$1$n(J.get$x$x(this._location), 1) + ", " + J.toStringAsFixed$1$n(J.get$y$x(this._location), 1) + "]";
    else
      return t1;
  },
  static: {
"": "MapPlayer__counter",
}

}}],
["vote_retanied", "package:vote/retained.dart", , N, {
CandidateElement: {"": "Thing;_color,player<,_text,_tx,_hidden,_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed",
  set$hidden: function(_, value) {
    if (value !== this._hidden) {
      this._hidden = value;
      this.invalidateDraw$0();
    }
  },
  drawOverride$1: function(ctx) {
    var shadowDistance;
    if (this._hidden) {
      ctx.globalAlpha = 0.3;
      ctx.fillStyle = "#999999";
    } else {
      shadowDistance = $.get$Mouse_isMouseDirectlyOverProperty().get$1(this) === true ? 4 : 2;
      ctx.shadowColor = "black";
      ctx.shadowBlur = 6;
      ctx.shadowOffsetX = shadowDistance;
      ctx.shadowOffsetY = shadowDistance;
      ctx.fillStyle = this._color;
    }
    B.CanvasUtil_ellipse(ctx, 0, 0, this._width, this._height);
    ctx.fill();
    ctx.shadowColor = "transparent";
    ctx.font = "1px Helvetica";
    ctx.textAlign = "center";
    ctx.textBaseline = "baseline";
    ctx.fillStyle = "black";
    C.CanvasRenderingContext2D_methods.fillText$3(ctx, this._text, J.$mul$n(this._width, 0.5), J.$mul$n(this._height, 0.8));
  }
},

CandidateMapElement: {"": "ParentThing;_players,_tx,_radius?,_vote_retanied$_elements,_showOnlyPlayers,_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed",
  get$visualChildCount: function() {
    this._ensureElements$0();
    return this._vote_retanied$_elements.length;
  },
  getVisualChild$1: function(index) {
    var t1;
    this._ensureElements$0();
    t1 = this._vote_retanied$_elements;
    if (index < 0 || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  setTransform$1: function(_, value) {
    X._metaRequireArgumentNotNullOrEmpty("value");
    this._tx.setFromTransfrom$1(value);
    this.invalidateDraw$0();
  },
  set$players: function(value) {
    var t1;
    X._metaRequireArgumentNotNullOrEmpty("value");
    t1 = this._players;
    C.JSArray_methods.set$length(t1, 0);
    C.JSArray_methods.addAll$1(t1, value);
    this._vote_retanied$_elements = null;
    this.invalidateDraw$0();
  },
  set$showOnlyPlayers: function(value) {
    var newVal;
    if (value == null)
      this._showOnlyPlayers = null;
    else {
      newVal = new X.ReadOnlyCollection(P.List_List$from(value, false, null));
      H.setRuntimeTypeInfo(newVal, [null]);
      this._showOnlyPlayers = newVal;
    }
    if (this._vote_retanied$_elements == null)
      this.invalidateDraw$0();
    else
      this._updateCandidateElements$0();
  },
  _ensureElements$0: function() {
    var t1, t2, p, rgb, t3, t4, t5, t6, t7, t8, t9, ce, tx;
    if (this._vote_retanied$_elements == null) {
      t1 = P.List_List(null, N.CandidateElement);
      H.setRuntimeTypeInfo(t1, [N.CandidateElement]);
      this._vote_retanied$_elements = t1;
      for (t1 = this._players, t1 = new H.ListIterator(t1, t1.length, 0, null), t2 = this._tx; t1.moveNext$0();) {
        p = t1._current;
        rgb = X.HslColor_HslColor(S.LocationData_getHue(p), 0.5, 0.6).toRgb$0();
        t3 = J.$mul$n(this._radius, 4);
        t4 = J.$mul$n(this._radius, 4);
        t5 = rgb.toHex$0();
        t6 = J.getInterceptor$x(p);
        t7 = t6.get$name(p);
        t8 = P.List_List(null, X.AffineTransform);
        t8.$builtinTypeInfo = [X.AffineTransform];
        t9 = new P._SyncBroadcastStreamController(null, null, 0, null, null, null, null);
        t9.$builtinTypeInfo = [null];
        t9._async$_previous = t9;
        t9._async$_next = t9;
        t9 = new X.EventHandle(t9, false);
        t9.$builtinTypeInfo = [X.EventArgs];
        ce = new N.CandidateElement(t5, p, t7, null, false, t8, t9, null, t3, t4, 1, false, null, null, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
        if (ce._disposed)
          H.throwExpression(X.DisposedError$());
        tx = new X.AffineTransform(1, 0, 0, 1, 0, 0);
        t3 = ce._transforms;
        t3.push(tx);
        ce._tx = tx;
        if (ce._parent != null)
          H.throwExpression(P.Exception_Exception("parent already set"));
        ce._parent = this;
        t4 = $.get$MouseManager_cursorProperty();
        t4.toString;
        ce._bot$_set$2(t4, "pointer");
        B.MouseManager__setBoolProp(ce, $.get$MouseManager__isDraggableProperty(), true);
        t4 = $.get$MouseManager__dragEvent();
        t4.toString;
        ce._getStream$1(t4).listen$1(this.get$_candidateDragged());
        if (ce._disposed)
          H.throwExpression(X.DisposedError$());
        tx = new X.AffineTransform(1, 0, 0, 1, 0, 0);
        t3.push(tx);
        tx.concatenate$1(t2);
        t3 = J.get$x$x(t6.get$location(p));
        t4 = this._radius;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (typeof t3 !== "number")
          throw t3.$sub();
        t4 = t3 - 2 * t4;
        t6 = J.get$y$x(t6.get$location(p));
        t3 = this._radius;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t3 = t6 - 2 * t3;
        tx._tX = tx._tX + (t4 * tx._scX + t3 * tx._shX);
        tx._tY = tx._tY + (t4 * tx._shY + t3 * tx._scY);
        this._vote_retanied$_elements.push(ce);
      }
      this._updateCandidateElements$0();
    }
  },
  _candidateDragged$1: function(e) {
    this._parent.dragCandidate$2(e.get$thing().get$player(), e.get$delta());
  },
  get$_candidateDragged: function() {
    return new H.BoundClosure$1(this, N.CandidateMapElement.prototype._candidateDragged$1, null, "_candidateDragged$1");
  },
  _updateCandidateElements$0: function() {
    var t1, e, t2;
    for (t1 = this._vote_retanied$_elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      e = t1._current;
      t2 = this._showOnlyPlayers;
      J.set$hidden$x(e, t2 != null && t2.indexOf$1(t2, e.get$player()) < 0);
    }
  }
},

RootMapElement: {"": "ParentThing;_voterMap,_candidateMap,_tx,_candidatesMovedHandle,_averageCloseness,_bounds,_radius?,_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed",
  get$visualChildCount: function() {
    return 2;
  },
  getVisualChild$1: function(index) {
    switch (index) {
      case 0:
        return this._voterMap;
      case 1:
        return this._candidateMap;
      default:
        throw H.wrapException("bad index, foo!");
    }
  },
  set$locationData: function(data) {
    var t1;
    this.set$voters(data.get$voters());
    t1 = data.candidates;
    X._metaRequireArgumentNotNullOrEmpty("value");
    this._candidateMap.set$players(t1);
    this.invalidateDraw$0();
  },
  get$voters: function() {
    return this._voterMap._players;
  },
  set$voters: function(value) {
    var t1, vals;
    X._metaRequireArgumentNotNullOrEmpty("value");
    t1 = new X.Box(0, 0, 10, 10);
    H.setRuntimeTypeInfo(t1, [null]);
    vals = new X.Tuple(1, t1);
    H.setRuntimeTypeInfo(vals, [J.JSNumber, X.Box]);
    this._averageCloseness = vals.item1;
    this._bounds = vals.item2;
    this._radius = null;
    this._voterMap.set$players(value);
  },
  dragCandidate$2: function(candidate, delta) {
    var can, t1, candidateLocPixels, newCanLocPix;
    can = H.IterableMixinWorkaround_singleWhere(this._candidateMap._players, new N.RootMapElement_dragCandidate_closure(candidate));
    t1 = this._tx;
    candidateLocPixels = t1.transformCoordinate$1(J.get$location$x(candidate));
    newCanLocPix = candidateLocPixels.$add(candidateLocPixels, delta);
    J.set$location$x(can, C.Box_0_0_10_10.constrain$1(t1.createInverse$0().transformCoordinate$1(newCanLocPix)));
    t1 = this._candidatesMovedHandle._controller;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(C.C_EventArgs);
  },
  update$0: function() {
    var t1, dataScale, t2, t3, t4, t5, t6, scale, offsetY, offsetX;
    t1 = this._bounds;
    if (t1 != null && this._radius == null) {
      dataScale = new X.Size(J.$add$ns(J.get$width$x(t1), this._averageCloseness), J.$add$ns(J.get$height$x(this._bounds), this._averageCloseness));
      t1 = dataScale.width;
      t2 = dataScale.height;
      if (typeof t1 !== "number")
        throw t1.$div();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t3 = this._width;
      t4 = this._height;
      t5 = new X.Size(t3, t4);
      t6 = t5.width;
      t5 = t5.height;
      if (typeof t6 !== "number")
        throw t6.$div();
      if (typeof t5 !== "number")
        throw H.iae(t5);
      if (t1 / t2 > t6 / t5) {
        if (typeof t3 !== "number")
          throw t3.$div();
        scale = t3 / t1;
        if (typeof t4 !== "number")
          throw t4.$div();
        offsetY = (t4 / scale - t2) / 2;
        offsetX = 0;
      } else {
        if (typeof t4 !== "number")
          throw t4.$div();
        scale = t4 / t2;
        if (typeof t3 !== "number")
          throw t3.$div();
        offsetX = (t3 / scale - t1) / 2;
        offsetY = 0;
      }
      t1 = this._tx;
      t1.setTransform$6(t1, scale, 0, 0, scale, 0, 0);
      t2 = J.get$left$x(this._bounds);
      t3 = this._averageCloseness;
      if (typeof t3 !== "number")
        throw t3.$div();
      t3 = J.$add$ns(J.$add$ns(t2, t3 / 2), offsetX);
      t2 = J.get$top$x(this._bounds);
      t4 = this._averageCloseness;
      if (typeof t4 !== "number")
        throw t4.$div();
      t1.translate$2(t1, t3, J.$add$ns(J.$add$ns(t2, t4 / 2), offsetY));
      this._radius = J.$mul$n(this._averageCloseness, 0.3);
    }
    H.IterableMixinWorkaround_forEach([this._voterMap, this._candidateMap], new N.RootMapElement_update_closure(this));
    B.ParentThing.prototype.update$0.call(this);
  },
  RootMapElement$2: function(w, h) {
    this._voterMap.registerParent$1(this);
    this._candidateMap.registerParent$1(this);
  },
  static: {
RootMapElement$: function(w, h) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = X.AffineTransform$(1, 0, 0, 1, 0, 0);
  t2 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t2, [X.EventArgs]);
  t3 = P.List_List(null, S.MapPlayer);
  H.setRuntimeTypeInfo(t3, [S.MapPlayer]);
  t4 = X.AffineTransform$(1, 0, 0, 1, 0, 0);
  t5 = P.LinkedHashMap_LinkedHashMap(null, null, null, S.MapPlayer, J.JSString);
  t6 = P.List_List(null, X.AffineTransform);
  H.setRuntimeTypeInfo(t6, [X.AffineTransform]);
  t7 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t7, [X.EventArgs]);
  t7 = new N.VoterMapElement(t3, t4, null, t5, t6, t7, null, w, h, 1, false, null, null, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
  t7.set$cacheEnabled(true);
  t7._radius = 0.3;
  t6 = P.List_List(null, S.MapPlayer);
  H.setRuntimeTypeInfo(t6, [S.MapPlayer]);
  t5 = X.AffineTransform$(1, 0, 0, 1, 0, 0);
  t4 = P.List_List(null, X.AffineTransform);
  H.setRuntimeTypeInfo(t4, [X.AffineTransform]);
  t3 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t3, [X.EventArgs]);
  t8 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object);
  t9 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle);
  t10 = P.List_List(null, X.AffineTransform);
  H.setRuntimeTypeInfo(t10, [X.AffineTransform]);
  t11 = new X.EventHandle(P.StreamController_StreamController$broadcast(null, null, true, null), false);
  H.setRuntimeTypeInfo(t11, [X.EventArgs]);
  t11 = new N.RootMapElement(t7, new N.CandidateMapElement(t6, t5, 0, null, null, t4, t3, null, w, h, 1, false, null, null, t8, t9, false), t1, t2, null, null, null, t10, t11, null, w, h, 1, false, null, null, P.LinkedHashMap_LinkedHashMap(null, null, null, X.Property, P.Object), P.LinkedHashMap_LinkedHashMap(null, null, null, X.Attachable, X.EventHandle), false);
  t11.RootMapElement$2(w, h);
  return t11;
}}

},

RootMapElement_dragCandidate_closure: {"": "Closure;candidate_0",
  call$1: function(mp) {
    return J.$eq(mp, this.candidate_0);
  },
  $is_args1: true
},

RootMapElement_update_closure: {"": "Closure;this_0",
  call$1: function(m) {
    var t1 = this.this_0;
    m.set$_radius(t1._radius);
    m.setTransform$1(m, t1._tx);
  },
  $is_args1: true
},

VoterMapElement: {"": "Thing;_players,_tx,_radius?,_vote_retanied$_map,_transforms,_invalidatedEventHandle,_cacheCanvas,_width,_height,_alpha,_cacheEnabled,_lastDrawTime,_parent,_propertyValues,_eventHandlers,_disposed",
  setTransform$1: function(_, value) {
    X._metaRequireArgumentNotNullOrEmpty("value");
    this._tx.setFromTransfrom$1(value);
    this.invalidateDraw$0();
  },
  set$players: function(value) {
    var t1;
    X._metaRequireArgumentNotNullOrEmpty("value");
    t1 = this._players;
    C.JSArray_methods.set$length(t1, 0);
    C.JSArray_methods.addAll$1(t1, value);
    this.invalidateDraw$0();
  },
  set$playerHexMap: function(value) {
    this._vote_retanied$_map = value;
    this.invalidateDraw$0();
  },
  drawOverride$1: function(ctx) {
    var t1;
    for (t1 = this._players, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      this._drawPlayer$2(ctx, t1._current);
  },
  _drawPlayer$2: function(ctx, player) {
    var hex, t1, txLoc, t2, t3, t4;
    hex = J.$index$asx(this._vote_retanied$_map, player);
    ctx.fillStyle = hex == null ? "#999999" : hex;
    t1 = this._tx;
    txLoc = t1.transformCoordinate$1(J.get$location$x(player));
    t2 = txLoc.x;
    t3 = txLoc.y;
    t1 = J.$mul$n(this._radius, t1._scX);
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (typeof t3 !== "number")
      throw t3.$sub();
    t4 = t1 * 2;
    B.CanvasUtil_ellipse(ctx, t2 - t1, t3 - t1, t4, t4);
    ctx.fill();
  }
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$20(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions._distanceElectionIsolate$closure = R._distanceElectionIsolate$closure = new H.Closure$1(R._distanceElectionIsolate, "_distanceElectionIsolate$closure");
init.globalFunctions._pluralityElectionIsolate$closure = R._pluralityElectionIsolate$closure = new H.Closure$1(R._pluralityElectionIsolate, "_pluralityElectionIsolate$closure");
init.globalFunctions._condorcetElectionIsolate$closure = R._condorcetElectionIsolate$closure = new H.Closure$1(R._condorcetElectionIsolate, "_condorcetElectionIsolate$closure");
init.globalFunctions._irvElectionIsolate$closure = R._irvElectionIsolate$closure = new H.Closure$1(R._irvElectionIsolate, "_irvElectionIsolate$closure");
init.globalFunctions._voterHexIsolate$closure = R._voterHexIsolate$closure = new H.Closure$1(R._voterHexIsolate, "_voterHexIsolate$closure");
init.globalFunctions.main$closure = R.main$closure = new H.Closure$0(R.main, "main$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
N.RootMapElement.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
X.AffineTransform.$isAffineTransform = true;
X.AffineTransform.$isObject = true;
X.EventArgs.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
S.MapPlayer.$isMapPlayer = true;
S.MapPlayer.$isComparable = true;
S.MapPlayer.$asComparable = [null];
S.MapPlayer.$isObject = true;
X.Property.$isObject = true;
P.Object.$isObject = true;
X.Attachable.$isObject = true;
X.EventHandle.$isObject = true;
X.Vector.$isObject = true;
X.Box.$isObject = true;
B.MouseManager.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
B.ThingDragEventArgs.$isThingDragEventArgs = true;
B.ThingDragEventArgs.$isObject = true;
B.ThingMouseEventArgs.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
B.ThingDragStartingEventArgs.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
B.Thing.$isObject = true;
X.Sequence.$isSequence = true;
X.Sequence.$isIterable = true;
X.Sequence.$isObject = true;
R.PluralityBallot.$isPluralityBallot = true;
R.PluralityBallot.$isObject = true;
R.PluralityElection.$isPluralityElection = true;
R.PluralityElection.$isObject = true;
R.RankedBallot.$isRankedBallot = true;
R.RankedBallot.$isPluralityBallot = true;
R.RankedBallot.$isObject = true;
R.CondorcetElection.$isCondorcetElection = true;
R.CondorcetElection.$isObject = true;
R.IrvElection.$isIrvElection = true;
R.IrvElection.$isObject = true;
X.Tuple3.$isTuple3 = true;
X.Tuple3.$isObject = true;
S.DistanceElection.$isDistanceElection = true;
S.DistanceElection.$isObject = true;
S.LocationData.$isLocationData = true;
S.LocationData.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
R.IrvRound.$isObject = true;
R.CondorcetPair.$isObject = true;
R.CondorcetCandidateProfile.$isObject = true;
P.Set.$isIterable = true;
P.Set.$isObject = true;
R.ElectionPlace.$isSequence = true;
R.ElectionPlace.$isIterable = true;
R.ElectionPlace.$isObject = true;
X._TarjanNode.$isObject = true;
R.PluralityElectionPlace.$isSequence = true;
R.PluralityElectionPlace.$isIterable = true;
R.PluralityElectionPlace.$isObject = true;
X.Tuple.$isObject = true;
N.CandidateElement.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.Box_0_0_10_10 = new X.Box(0, 0, 10, 10);
C.C_EmptyIterator = new H.EmptyIterator();
C.C_EventArgs = new X.EventArgs();
C.C__DelayedDone = new P._DelayedDone();
C.C__Random = new P._Random();
C.C__RootZone = new P._RootZone();
C.C__UndefinedValue = new X._UndefinedValue();
C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
C.Coordinate_0_0 = new X.Coordinate(0, 0);
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_blur = new W.EventStreamProvider("blur");
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseout = new W.EventStreamProvider("mouseout");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.InvalidOperationError_61T = new X.InvalidOperationError("Input contained a null item");
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_empty = Isolate.makeConstantList([]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.NodeList_methods = W.NodeList.prototype;
C.TableCellElement_methods = W.TableCellElement.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$._botHelperRandom = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.LocationData__candidateHues = null;
$.MapPlayer__counter = 0;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$candidate$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$candidate(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$client$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$client(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$dataset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$dataset(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$left$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$left(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$location$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$location(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$r$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$r(receiver);
};
J.get$stream$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$stream(receiver);
};
J.get$toElement$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$toElement(receiver);
};
J.get$top$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$top(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.insertCell$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).insertCell$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matches$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).matches$2(receiver, a0, a1);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.scale$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).scale$1(receiver, a0);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$background$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$background(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$colSpan$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$colSpan(receiver, value);
};
J.set$color$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$color(receiver, value);
};
J.set$disabled$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$disabled(receiver, value);
};
J.set$fontStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fontStyle(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$hidden$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$hidden(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$index$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$index(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$location$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$location(receiver, value);
};
J.set$textAlign$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textAlign(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setInnerHtml$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).setInnerHtml$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toStringAsFixed$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "isMouseOverProperty", "Mouse_isMouseOverProperty", "get$Mouse_isMouseOverProperty", function() {
  return new X.Property(false, "IsMouseOver");
});
Isolate.$lazy($, "isMouseDirectlyOverProperty", "Mouse_isMouseDirectlyOverProperty", "get$Mouse_isMouseDirectlyOverProperty", function() {
  return new X.Property(false, "IsMouseDirectlyOver");
});
Isolate.$lazy($, "_stageMouseCacheProperty", "Mouse__stageMouseCacheProperty", "get$Mouse__stageMouseCacheProperty", function() {
  return new X.Property(null, "_stageMouseCacheProperty");
});
Isolate.$lazy($, "cursorProperty", "MouseManager_cursorProperty", "get$MouseManager_cursorProperty", function() {
  return new X.Property(null, "cursor");
});
Isolate.$lazy($, "_clickManagerProperty", "MouseManager__clickManagerProperty", "get$MouseManager__clickManagerProperty", function() {
  return new X.Property(null, "_clickManager");
});
Isolate.$lazy($, "_isClickableProperty", "MouseManager__isClickableProperty", "get$MouseManager__isClickableProperty", function() {
  return new X.Property(false, "isClickable");
});
Isolate.$lazy($, "_isDraggableProperty", "MouseManager__isDraggableProperty", "get$MouseManager__isDraggableProperty", function() {
  return new X.Property(false, "isDraggable");
});
Isolate.$lazy($, "_clickEvent", "MouseManager__clickEvent", "get$MouseManager__clickEvent", function() {
  return new X.AttachedEvent("clickEvent");
});
Isolate.$lazy($, "_mouseDownEvent", "MouseManager__mouseDownEvent", "get$MouseManager__mouseDownEvent", function() {
  return new X.AttachedEvent("mouseDown");
});
Isolate.$lazy($, "_mouseUpEvent", "MouseManager__mouseUpEvent", "get$MouseManager__mouseUpEvent", function() {
  return new X.AttachedEvent("mouseUp");
});
Isolate.$lazy($, "_mouseMoveEvent", "MouseManager__mouseMoveEvent", "get$MouseManager__mouseMoveEvent", function() {
  return new X.AttachedEvent("mouseMove");
});
Isolate.$lazy($, "_mouseOutEvent", "MouseManager__mouseOutEvent", "get$MouseManager__mouseOutEvent", function() {
  return new X.AttachedEvent("mouseOut");
});
Isolate.$lazy($, "_dragStartingEvent", "MouseManager__dragStartingEvent", "get$MouseManager__dragStartingEvent", function() {
  return new X.AttachedEvent("_dragStartingEvent");
});
Isolate.$lazy($, "_dragEvent", "MouseManager__dragEvent", "get$MouseManager__dragEvent", function() {
  return new X.AttachedEvent("_dragStarting");
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(R.main$closure); });
  } else {
    H.startRootIsolate(R.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  CanvasElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  CanvasElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  CanvasElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function CanvasGradient() {
  }
  CanvasGradient.builtin$cls = "CanvasGradient";
  if (!"name" in CanvasGradient)
    CanvasGradient.name = "CanvasGradient";
  $desc = $collectedClasses.CanvasGradient;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasGradient.prototype = $desc;
  function CanvasPattern() {
  }
  CanvasPattern.builtin$cls = "CanvasPattern";
  if (!"name" in CanvasPattern)
    CanvasPattern.name = "CanvasPattern";
  $desc = $collectedClasses.CanvasPattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasPattern.prototype = $desc;
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.set$hidden = function(receiver, v) {
    return receiver.hidden = v;
  };
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.get$style = function(receiver) {
    return receiver.style;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  EmbedElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  EmbedElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  IFrameElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  IFrameElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  InputElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  InputElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  InputElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.prototype.get$location = function(receiver) {
    return receiver.location;
  };
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  Location.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  Location.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  MediaStreamEvent.prototype.get$stream = function(receiver) {
    return receiver.stream;
  };
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$toElement = function(receiver) {
    return receiver.toElement;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$lastChild = function(receiver) {
    return receiver.lastChild;
  };
  Node.prototype.get$nodeType = function(receiver) {
    return receiver.nodeType;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ObjectElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ObjectElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  OptGroupElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  OptionElement.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidate() {
  }
  RtcIceCandidate.builtin$cls = "RtcIceCandidate";
  if (!"name" in RtcIceCandidate)
    RtcIceCandidate.name = "RtcIceCandidate";
  $desc = $collectedClasses.RtcIceCandidate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidate.prototype = $desc;
  RtcIceCandidate.prototype.get$candidate = function(receiver) {
    return receiver.candidate;
  };
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  RtcIceCandidateEvent.prototype.get$candidate = function(receiver) {
    return receiver.candidate;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  ShadowRoot.prototype.set$innerHtml = function(receiver, v) {
    return receiver.innerHTML = v;
  };
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  TableCellElement.prototype.set$colSpan = function(receiver, v) {
    return receiver.colSpan = v;
  };
  TableCellElement.prototype.set$rowSpan = function(receiver, v) {
    return receiver.rowSpan = v;
  };
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  VideoElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  VideoElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  VideoElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimatedTransformList() {
  }
  AnimatedTransformList.builtin$cls = "AnimatedTransformList";
  if (!"name" in AnimatedTransformList)
    AnimatedTransformList.name = "AnimatedTransformList";
  $desc = $collectedClasses.AnimatedTransformList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedTransformList.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  CircleElement.prototype.get$r = function(receiver) {
    return receiver.r;
  };
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEBlendElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEColorMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEComponentTransferElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FECompositeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEConvolveMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDiffuseLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDisplacementMapElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEFloodElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEGaussianBlurElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMergeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMorphologyElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEOffsetElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FESpecularLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETileElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETurbulenceElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FilterElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ForeignObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement0.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  MaskElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  PatternElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  RadialGradientElement.prototype.get$r = function(receiver) {
    return receiver.r;
  };
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  RectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  SvgSvgElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  UseElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2) {
    this.this_1 = this_1;
    this.message_2 = message_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_3, shouldSerialize_4) {
    this.box_0 = box_0;
    this.this_3 = this_3;
    this.shouldSerialize_4 = shouldSerialize_4;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1) {
    this.this_0 = this_0;
    this.message_1 = message_1;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function ReceivePortImpl(__isolate_helper$_id, __isolate_helper$_controller) {
    this.__isolate_helper$_id = __isolate_helper$_id;
    this.__isolate_helper$_controller = __isolate_helper$_controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  ReceivePortImpl.prototype.get$__isolate_helper$_id = function() {
    return this.__isolate_helper$_id;
  };
  ReceivePortImpl.prototype.get$__isolate_helper$_controller = function() {
    return this.__isolate_helper$_controller;
  };
  function BoundClosure$i0(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i0.builtin$cls = "BoundClosure$i0";
  $desc = $collectedClasses.BoundClosure$i0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i0.prototype = $desc;
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function BoundClosure$1(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function Attachable(name) {
    this.name = name;
  }
  Attachable.builtin$cls = "Attachable";
  if (!"name" in Attachable)
    Attachable.name = "Attachable";
  $desc = $collectedClasses.Attachable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Attachable.prototype = $desc;
  Attachable.prototype.get$name = function(receiver) {
    return this.name;
  };
  function AttachableObject() {
  }
  AttachableObject.builtin$cls = "AttachableObject";
  if (!"name" in AttachableObject)
    AttachableObject.name = "AttachableObject";
  $desc = $collectedClasses.AttachableObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject.prototype = $desc;
  function AttachableObject__getStream_closure(this_0, property_1) {
    this.this_0 = this_0;
    this.property_1 = property_1;
  }
  AttachableObject__getStream_closure.builtin$cls = "AttachableObject__getStream_closure";
  if (!"name" in AttachableObject__getStream_closure)
    AttachableObject__getStream_closure.name = "AttachableObject__getStream_closure";
  $desc = $collectedClasses.AttachableObject__getStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject__getStream_closure.prototype = $desc;
  function AttachableObject__getStream__closure(this_2, property_3) {
    this.this_2 = this_2;
    this.property_3 = property_3;
  }
  AttachableObject__getStream__closure.builtin$cls = "AttachableObject__getStream__closure";
  if (!"name" in AttachableObject__getStream__closure)
    AttachableObject__getStream__closure.name = "AttachableObject__getStream__closure";
  $desc = $collectedClasses.AttachableObject__getStream__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachableObject__getStream__closure.prototype = $desc;
  function AttachedEvent(name) {
    this.name = name;
  }
  AttachedEvent.builtin$cls = "AttachedEvent";
  if (!"name" in AttachedEvent)
    AttachedEvent.name = "AttachedEvent";
  $desc = $collectedClasses.AttachedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttachedEvent.prototype = $desc;
  function Property(defaultValue, name) {
    this.defaultValue = defaultValue;
    this.name = name;
  }
  Property.builtin$cls = "Property";
  if (!"name" in Property)
    Property.name = "Property";
  $desc = $collectedClasses.Property;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Property.prototype = $desc;
  function _UndefinedValue() {
  }
  _UndefinedValue.builtin$cls = "_UndefinedValue";
  if (!"name" in _UndefinedValue)
    _UndefinedValue.name = "_UndefinedValue";
  $desc = $collectedClasses._UndefinedValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UndefinedValue.prototype = $desc;
  function PropertyChangedEventArgs(property, newValue, cleared) {
    this.property = property;
    this.newValue = newValue;
    this.cleared = cleared;
  }
  PropertyChangedEventArgs.builtin$cls = "PropertyChangedEventArgs";
  if (!"name" in PropertyChangedEventArgs)
    PropertyChangedEventArgs.name = "PropertyChangedEventArgs";
  $desc = $collectedClasses.PropertyChangedEventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyChangedEventArgs.prototype = $desc;
  function CollectionUtil_count_closure(test_0) {
    this.test_0 = test_0;
  }
  CollectionUtil_count_closure.builtin$cls = "CollectionUtil_count_closure";
  if (!"name" in CollectionUtil_count_closure)
    CollectionUtil_count_closure.name = "CollectionUtil_count_closure";
  $desc = $collectedClasses.CollectionUtil_count_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_count_closure.prototype = $desc;
  function CollectionUtil_exclude_closure(itemsToExclude_0) {
    this.itemsToExclude_0 = itemsToExclude_0;
  }
  CollectionUtil_exclude_closure.builtin$cls = "CollectionUtil_exclude_closure";
  if (!"name" in CollectionUtil_exclude_closure)
    CollectionUtil_exclude_closure.name = "CollectionUtil_exclude_closure";
  $desc = $collectedClasses.CollectionUtil_exclude_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_exclude_closure.prototype = $desc;
  function CollectionUtil_distinct_closure() {
  }
  CollectionUtil_distinct_closure.builtin$cls = "CollectionUtil_distinct_closure";
  if (!"name" in CollectionUtil_distinct_closure)
    CollectionUtil_distinct_closure.name = "CollectionUtil_distinct_closure";
  $desc = $collectedClasses.CollectionUtil_distinct_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_distinct_closure.prototype = $desc;
  function CollectionUtil_distinct_closure0(box_0) {
    this.box_0 = box_0;
  }
  CollectionUtil_distinct_closure0.builtin$cls = "CollectionUtil_distinct_closure0";
  if (!"name" in CollectionUtil_distinct_closure0)
    CollectionUtil_distinct_closure0.name = "CollectionUtil_distinct_closure0";
  $desc = $collectedClasses.CollectionUtil_distinct_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_distinct_closure0.prototype = $desc;
  function CollectionUtil_toMap_closure() {
  }
  CollectionUtil_toMap_closure.builtin$cls = "CollectionUtil_toMap_closure";
  if (!"name" in CollectionUtil_toMap_closure)
    CollectionUtil_toMap_closure.name = "CollectionUtil_toMap_closure";
  $desc = $collectedClasses.CollectionUtil_toMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollectionUtil_toMap_closure.prototype = $desc;
  function _DistinctIterator(_bot$_source, _comparer, _found, _bot$_current) {
    this._bot$_source = _bot$_source;
    this._comparer = _comparer;
    this._found = _found;
    this._bot$_current = _bot$_current;
  }
  _DistinctIterator.builtin$cls = "_DistinctIterator";
  if (!"name" in _DistinctIterator)
    _DistinctIterator.name = "_DistinctIterator";
  $desc = $collectedClasses._DistinctIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DistinctIterator.prototype = $desc;
  function _DistinctIterator_moveNext_closure(this_0, candidate_1) {
    this.this_0 = this_0;
    this.candidate_1 = candidate_1;
  }
  _DistinctIterator_moveNext_closure.builtin$cls = "_DistinctIterator_moveNext_closure";
  if (!"name" in _DistinctIterator_moveNext_closure)
    _DistinctIterator_moveNext_closure.name = "_DistinctIterator_moveNext_closure";
  $desc = $collectedClasses._DistinctIterator_moveNext_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DistinctIterator_moveNext_closure.prototype = $desc;
  function _SequenceIterator(_list, _bot$_length, _bot$_position, _bot$_current) {
    this._list = _list;
    this._bot$_length = _bot$_length;
    this._bot$_position = _bot$_position;
    this._bot$_current = _bot$_current;
  }
  _SequenceIterator.builtin$cls = "_SequenceIterator";
  if (!"name" in _SequenceIterator)
    _SequenceIterator.name = "_SequenceIterator";
  $desc = $collectedClasses._SequenceIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SequenceIterator.prototype = $desc;
  function Enumerable() {
  }
  Enumerable.builtin$cls = "Enumerable";
  if (!"name" in Enumerable)
    Enumerable.name = "Enumerable";
  $desc = $collectedClasses.Enumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Enumerable.prototype = $desc;
  function _SimpleEnumerable(_bot$_source) {
    this._bot$_source = _bot$_source;
  }
  _SimpleEnumerable.builtin$cls = "_SimpleEnumerable";
  if (!"name" in _SimpleEnumerable)
    _SimpleEnumerable.name = "_SimpleEnumerable";
  $desc = $collectedClasses._SimpleEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleEnumerable.prototype = $desc;
  function _FuncEnumerable(_bot$_source, _func) {
    this._bot$_source = _bot$_source;
    this._func = _func;
  }
  _FuncEnumerable.builtin$cls = "_FuncEnumerable";
  if (!"name" in _FuncEnumerable)
    _FuncEnumerable.name = "_FuncEnumerable";
  $desc = $collectedClasses._FuncEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FuncEnumerable.prototype = $desc;
  function Grouping(_values) {
    this._values = _values;
  }
  Grouping.builtin$cls = "Grouping";
  if (!"name" in Grouping)
    Grouping.name = "Grouping";
  $desc = $collectedClasses.Grouping;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping.prototype = $desc;
  function Grouping_closure0() {
  }
  Grouping_closure0.builtin$cls = "Grouping_closure0";
  if (!"name" in Grouping_closure0)
    Grouping_closure0.name = "Grouping_closure0";
  $desc = $collectedClasses.Grouping_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping_closure0.prototype = $desc;
  function Grouping_closure(V_0) {
    this.V_0 = V_0;
  }
  Grouping_closure.builtin$cls = "Grouping_closure";
  if (!"name" in Grouping_closure)
    Grouping_closure.name = "Grouping_closure";
  $desc = $collectedClasses.Grouping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Grouping_closure.prototype = $desc;
  function NumberEnumerable() {
  }
  NumberEnumerable.builtin$cls = "NumberEnumerable";
  if (!"name" in NumberEnumerable)
    NumberEnumerable.name = "NumberEnumerable";
  $desc = $collectedClasses.NumberEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberEnumerable.prototype = $desc;
  function _SimpleNumEnumerable(_bot$_source) {
    this._bot$_source = _bot$_source;
  }
  _SimpleNumEnumerable.builtin$cls = "_SimpleNumEnumerable";
  if (!"name" in _SimpleNumEnumerable)
    _SimpleNumEnumerable.name = "_SimpleNumEnumerable";
  $desc = $collectedClasses._SimpleNumEnumerable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNumEnumerable.prototype = $desc;
  function ReadOnlyCollection(_items) {
    this._items = _items;
  }
  ReadOnlyCollection.builtin$cls = "ReadOnlyCollection";
  if (!"name" in ReadOnlyCollection)
    ReadOnlyCollection.name = "ReadOnlyCollection";
  $desc = $collectedClasses.ReadOnlyCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReadOnlyCollection.prototype = $desc;
  function Sequence() {
  }
  Sequence.builtin$cls = "Sequence";
  if (!"name" in Sequence)
    Sequence.name = "Sequence";
  $desc = $collectedClasses.Sequence;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sequence.prototype = $desc;
  function HslColor(h, s, l) {
    this.h = h;
    this.s = s;
    this.l = l;
  }
  HslColor.builtin$cls = "HslColor";
  if (!"name" in HslColor)
    HslColor.name = "HslColor";
  $desc = $collectedClasses.HslColor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HslColor.prototype = $desc;
  HslColor.prototype.get$h = function() {
    return this.h;
  };
  function RgbColor(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  RgbColor.builtin$cls = "RgbColor";
  if (!"name" in RgbColor)
    RgbColor.name = "RgbColor";
  $desc = $collectedClasses.RgbColor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RgbColor.prototype = $desc;
  RgbColor.prototype.get$r = function(receiver) {
    return this.r;
  };
  RgbColor.prototype.get$g = function() {
    return this.g;
  };
  function RgbColor_toHex_closure(buffer_0) {
    this.buffer_0 = buffer_0;
  }
  RgbColor_toHex_closure.builtin$cls = "RgbColor_toHex_closure";
  if (!"name" in RgbColor_toHex_closure)
    RgbColor_toHex_closure.name = "RgbColor_toHex_closure";
  $desc = $collectedClasses.RgbColor_toHex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RgbColor_toHex_closure.prototype = $desc;
  function DisposedError(message) {
    this.message = message;
  }
  DisposedError.builtin$cls = "DisposedError";
  if (!"name" in DisposedError)
    DisposedError.name = "DisposedError";
  $desc = $collectedClasses.DisposedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DisposedError.prototype = $desc;
  function DisposableImpl() {
  }
  DisposableImpl.builtin$cls = "DisposableImpl";
  if (!"name" in DisposableImpl)
    DisposableImpl.name = "DisposableImpl";
  $desc = $collectedClasses.DisposableImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DisposableImpl.prototype = $desc;
  function EventArgs() {
  }
  EventArgs.builtin$cls = "EventArgs";
  if (!"name" in EventArgs)
    EventArgs.name = "EventArgs";
  $desc = $collectedClasses.EventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventArgs.prototype = $desc;
  function EventHandle(_controller, _disposed) {
    this._controller = _controller;
    this._disposed = _disposed;
  }
  EventHandle.builtin$cls = "EventHandle";
  if (!"name" in EventHandle)
    EventHandle.name = "EventHandle";
  $desc = $collectedClasses.EventHandle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventHandle.prototype = $desc;
  function DetailedArgumentError(argument, details, message) {
    this.argument = argument;
    this.details = details;
    this.message = message;
  }
  DetailedArgumentError.builtin$cls = "DetailedArgumentError";
  if (!"name" in DetailedArgumentError)
    DetailedArgumentError.name = "DetailedArgumentError";
  $desc = $collectedClasses.DetailedArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailedArgumentError.prototype = $desc;
  function InvalidOperationError(message) {
    this.message = message;
  }
  InvalidOperationError.builtin$cls = "InvalidOperationError";
  if (!"name" in InvalidOperationError)
    InvalidOperationError.name = "InvalidOperationError";
  $desc = $collectedClasses.InvalidOperationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvalidOperationError.prototype = $desc;
  function NullArgumentError(argument, details, message) {
    this.argument = argument;
    this.details = details;
    this.message = message;
  }
  NullArgumentError.builtin$cls = "NullArgumentError";
  if (!"name" in NullArgumentError)
    NullArgumentError.name = "NullArgumentError";
  $desc = $collectedClasses.NullArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullArgumentError.prototype = $desc;
  function AffineTransform(_scX, _shY, _shX, _scY, _tX, _tY) {
    this._scX = _scX;
    this._shY = _shY;
    this._shX = _shX;
    this._scY = _scY;
    this._tX = _tX;
    this._tY = _tY;
  }
  AffineTransform.builtin$cls = "AffineTransform";
  if (!"name" in AffineTransform)
    AffineTransform.name = "AffineTransform";
  $desc = $collectedClasses.AffineTransform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AffineTransform.prototype = $desc;
  AffineTransform.prototype.get$_scX = function() {
    return this._scX;
  };
  function Box(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Box.builtin$cls = "Box";
  if (!"name" in Box)
    Box.name = "Box";
  $desc = $collectedClasses.Box;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Box.prototype = $desc;
  function Coordinate(x, y) {
    this.x = x;
    this.y = y;
  }
  Coordinate.builtin$cls = "Coordinate";
  if (!"name" in Coordinate)
    Coordinate.name = "Coordinate";
  $desc = $collectedClasses.Coordinate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Coordinate.prototype = $desc;
  function Size(width, height) {
    this.width = width;
    this.height = height;
  }
  Size.builtin$cls = "Size";
  if (!"name" in Size)
    Size.name = "Size";
  $desc = $collectedClasses.Size;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Size.prototype = $desc;
  Size.prototype.get$width = function(receiver) {
    return this.width;
  };
  Size.prototype.get$height = function(receiver) {
    return this.height;
  };
  function TarjanCycleDetect(_bot$_index, _stack, _scc, _list) {
    this._bot$_index = _bot$_index;
    this._stack = _stack;
    this._scc = _scc;
    this._list = _list;
  }
  TarjanCycleDetect.builtin$cls = "TarjanCycleDetect";
  if (!"name" in TarjanCycleDetect)
    TarjanCycleDetect.name = "TarjanCycleDetect";
  $desc = $collectedClasses.TarjanCycleDetect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TarjanCycleDetect.prototype = $desc;
  function _TarjanNode(value, index, lowlink) {
    this.value = value;
    this.index = index;
    this.lowlink = lowlink;
  }
  _TarjanNode.builtin$cls = "_TarjanNode";
  if (!"name" in _TarjanNode)
    _TarjanNode.name = "_TarjanNode";
  $desc = $collectedClasses._TarjanNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TarjanNode.prototype = $desc;
  _TarjanNode.prototype.get$value = function(receiver) {
    return this.value;
  };
  _TarjanNode.prototype.get$index = function(receiver) {
    return this.index;
  };
  _TarjanNode.prototype.set$index = function(receiver, v) {
    return this.index = v;
  };
  _TarjanNode.prototype.get$lowlink = function() {
    return this.lowlink;
  };
  function _TarjanList(_nodes) {
    this._nodes = _nodes;
  }
  _TarjanList.builtin$cls = "_TarjanList";
  if (!"name" in _TarjanList)
    _TarjanList.name = "_TarjanList";
  $desc = $collectedClasses._TarjanList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TarjanList.prototype = $desc;
  function _TarjanList__TarjanList_closure(TNode_0, map_1, nodes_2) {
    this.TNode_0 = TNode_0;
    this.map_1 = map_1;
    this.nodes_2 = nodes_2;
  }
  _TarjanList__TarjanList_closure.builtin$cls = "_TarjanList__TarjanList_closure";
  if (!"name" in _TarjanList__TarjanList_closure)
    _TarjanList__TarjanList_closure.name = "_TarjanList__TarjanList_closure";
  $desc = $collectedClasses._TarjanList__TarjanList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TarjanList__TarjanList_closure.prototype = $desc;
  function _TarjanList__TarjanList__closure(k_3) {
    this.k_3 = k_3;
  }
  _TarjanList__TarjanList__closure.builtin$cls = "_TarjanList__TarjanList__closure";
  if (!"name" in _TarjanList__TarjanList__closure)
    _TarjanList__TarjanList__closure.name = "_TarjanList__TarjanList__closure";
  $desc = $collectedClasses._TarjanList__TarjanList__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TarjanList__TarjanList__closure.prototype = $desc;
  function _TarjanList__TarjanList__closure0(edge_4) {
    this.edge_4 = edge_4;
  }
  _TarjanList__TarjanList__closure0.builtin$cls = "_TarjanList__TarjanList__closure0";
  if (!"name" in _TarjanList__TarjanList__closure0)
    _TarjanList__TarjanList__closure0.name = "_TarjanList__TarjanList__closure0";
  $desc = $collectedClasses._TarjanList__TarjanList__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TarjanList__TarjanList__closure0.prototype = $desc;
  function Vector(x, y) {
    this.x = x;
    this.y = y;
  }
  Vector.builtin$cls = "Vector";
  if (!"name" in Vector)
    Vector.name = "Vector";
  $desc = $collectedClasses.Vector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector.prototype = $desc;
  function Tuple(item1, item2) {
    this.item1 = item1;
    this.item2 = item2;
  }
  Tuple.builtin$cls = "Tuple";
  if (!"name" in Tuple)
    Tuple.name = "Tuple";
  $desc = $collectedClasses.Tuple;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tuple.prototype = $desc;
  Tuple.prototype.get$item1 = function() {
    return this.item1;
  };
  function Tuple3(item3, item1, item2) {
    this.item3 = item3;
    this.item1 = item1;
    this.item2 = item2;
  }
  Tuple3.builtin$cls = "Tuple3";
  if (!"name" in Tuple3)
    Tuple3.name = "Tuple3";
  $desc = $collectedClasses.Tuple3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tuple3.prototype = $desc;
  Tuple3.prototype.get$item3 = function() {
    return this.item3;
  };
  function ThrottledStream(_asyncMethod, _throttled_stream$_controller, _throttled_stream$_source, _sendingSource, _outputValue, _outputFuture, _forceUpdate) {
    this._asyncMethod = _asyncMethod;
    this._throttled_stream$_controller = _throttled_stream$_controller;
    this._throttled_stream$_source = _throttled_stream$_source;
    this._sendingSource = _sendingSource;
    this._outputValue = _outputValue;
    this._outputFuture = _outputFuture;
    this._forceUpdate = _forceUpdate;
  }
  ThrottledStream.builtin$cls = "ThrottledStream";
  if (!"name" in ThrottledStream)
    ThrottledStream.name = "ThrottledStream";
  $desc = $collectedClasses.ThrottledStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream.prototype = $desc;
  function ThrottledStream__tryUpdate_closure(this_0) {
    this.this_0 = this_0;
  }
  ThrottledStream__tryUpdate_closure.builtin$cls = "ThrottledStream__tryUpdate_closure";
  if (!"name" in ThrottledStream__tryUpdate_closure)
    ThrottledStream__tryUpdate_closure.name = "ThrottledStream__tryUpdate_closure";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure.prototype = $desc;
  function ThrottledStream__tryUpdate_closure0(this_1) {
    this.this_1 = this_1;
  }
  ThrottledStream__tryUpdate_closure0.builtin$cls = "ThrottledStream__tryUpdate_closure0";
  if (!"name" in ThrottledStream__tryUpdate_closure0)
    ThrottledStream__tryUpdate_closure0.name = "ThrottledStream__tryUpdate_closure0";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure0.prototype = $desc;
  function ThrottledStream__tryUpdate_closure1(this_2) {
    this.this_2 = this_2;
  }
  ThrottledStream__tryUpdate_closure1.builtin$cls = "ThrottledStream__tryUpdate_closure1";
  if (!"name" in ThrottledStream__tryUpdate_closure1)
    ThrottledStream__tryUpdate_closure1.name = "ThrottledStream__tryUpdate_closure1";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure1.prototype = $desc;
  function ThrottledStream__tryUpdate_closure2(this_3) {
    this.this_3 = this_3;
  }
  ThrottledStream__tryUpdate_closure2.builtin$cls = "ThrottledStream__tryUpdate_closure2";
  if (!"name" in ThrottledStream__tryUpdate_closure2)
    ThrottledStream__tryUpdate_closure2.name = "ThrottledStream__tryUpdate_closure2";
  $desc = $collectedClasses.ThrottledStream__tryUpdate_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThrottledStream__tryUpdate_closure2.prototype = $desc;
  function HtmlView() {
  }
  HtmlView.builtin$cls = "HtmlView";
  if (!"name" in HtmlView)
    HtmlView.name = "HtmlView";
  $desc = $collectedClasses.HtmlView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlView.prototype = $desc;
  function Mouse_markMouseOver_closure() {
  }
  Mouse_markMouseOver_closure.builtin$cls = "Mouse_markMouseOver_closure";
  if (!"name" in Mouse_markMouseOver_closure)
    Mouse_markMouseOver_closure.name = "Mouse_markMouseOver_closure";
  $desc = $collectedClasses.Mouse_markMouseOver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mouse_markMouseOver_closure.prototype = $desc;
  function Mouse_markMouseOver_closure0() {
  }
  Mouse_markMouseOver_closure0.builtin$cls = "Mouse_markMouseOver_closure0";
  if (!"name" in Mouse_markMouseOver_closure0)
    Mouse_markMouseOver_closure0.name = "Mouse_markMouseOver_closure0";
  $desc = $collectedClasses.Mouse_markMouseOver_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mouse_markMouseOver_closure0.prototype = $desc;
  function MouseManager(_stage, _mouseDownThing, _draggingThing, _dragCoordinate) {
    this._stage = _stage;
    this._mouseDownThing = _mouseDownThing;
    this._draggingThing = _draggingThing;
    this._dragCoordinate = _dragCoordinate;
  }
  MouseManager.builtin$cls = "MouseManager";
  if (!"name" in MouseManager)
    MouseManager.name = "MouseManager";
  $desc = $collectedClasses.MouseManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseManager.prototype = $desc;
  function MouseManager_MouseManager_closure() {
  }
  MouseManager_MouseManager_closure.builtin$cls = "MouseManager_MouseManager_closure";
  if (!"name" in MouseManager_MouseManager_closure)
    MouseManager_MouseManager_closure.name = "MouseManager_MouseManager_closure";
  $desc = $collectedClasses.MouseManager_MouseManager_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseManager_MouseManager_closure.prototype = $desc;
  function MouseManager__mouseUp_closure() {
  }
  MouseManager__mouseUp_closure.builtin$cls = "MouseManager__mouseUp_closure";
  if (!"name" in MouseManager__mouseUp_closure)
    MouseManager__mouseUp_closure.name = "MouseManager__mouseUp_closure";
  $desc = $collectedClasses.MouseManager__mouseUp_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseManager__mouseUp_closure.prototype = $desc;
  function MouseManager__mouseUp_closure0() {
  }
  MouseManager__mouseUp_closure0.builtin$cls = "MouseManager__mouseUp_closure0";
  if (!"name" in MouseManager__mouseUp_closure0)
    MouseManager__mouseUp_closure0.name = "MouseManager__mouseUp_closure0";
  $desc = $collectedClasses.MouseManager__mouseUp_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseManager__mouseUp_closure0.prototype = $desc;
  function ThingDragStartingEventArgs(_canceled, thing, sourceEvent) {
    this._canceled = _canceled;
    this.thing = thing;
    this.sourceEvent = sourceEvent;
  }
  ThingDragStartingEventArgs.builtin$cls = "ThingDragStartingEventArgs";
  if (!"name" in ThingDragStartingEventArgs)
    ThingDragStartingEventArgs.name = "ThingDragStartingEventArgs";
  $desc = $collectedClasses.ThingDragStartingEventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThingDragStartingEventArgs.prototype = $desc;
  function ThingDragEventArgs(delta, thing, sourceEvent) {
    this.delta = delta;
    this.thing = thing;
    this.sourceEvent = sourceEvent;
  }
  ThingDragEventArgs.builtin$cls = "ThingDragEventArgs";
  if (!"name" in ThingDragEventArgs)
    ThingDragEventArgs.name = "ThingDragEventArgs";
  $desc = $collectedClasses.ThingDragEventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThingDragEventArgs.prototype = $desc;
  ThingDragEventArgs.prototype.get$delta = function() {
    return this.delta;
  };
  function ParentThing() {
  }
  ParentThing.builtin$cls = "ParentThing";
  if (!"name" in ParentThing)
    ParentThing.name = "ParentThing";
  $desc = $collectedClasses.ParentThing;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParentThing.prototype = $desc;
  function ParentThing_update_closure() {
  }
  ParentThing_update_closure.builtin$cls = "ParentThing_update_closure";
  if (!"name" in ParentThing_update_closure)
    ParentThing_update_closure.name = "ParentThing_update_closure";
  $desc = $collectedClasses.ParentThing_update_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParentThing_update_closure.prototype = $desc;
  function ParentThing_drawOverride_closure(ctx_0) {
    this.ctx_0 = ctx_0;
  }
  ParentThing_drawOverride_closure.builtin$cls = "ParentThing_drawOverride_closure";
  if (!"name" in ParentThing_drawOverride_closure)
    ParentThing_drawOverride_closure.name = "ParentThing_drawOverride_closure";
  $desc = $collectedClasses.ParentThing_drawOverride_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParentThing_drawOverride_closure.prototype = $desc;
  function Stage(_invalidatedEventHandle, _canvas, rootThing, _ctx, _propertyValues, _eventHandlers, _disposed) {
    this._invalidatedEventHandle = _invalidatedEventHandle;
    this._canvas = _canvas;
    this.rootThing = rootThing;
    this._ctx = _ctx;
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  Stage.builtin$cls = "Stage";
  if (!"name" in Stage)
    Stage.name = "Stage";
  $desc = $collectedClasses.Stage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stage.prototype = $desc;
  Stage.prototype.get$_canvas = function() {
    return this._canvas;
  };
  Stage.prototype.get$rootThing = function() {
    return this.rootThing;
  };
  function StageWrapper(rootThing) {
    this.rootThing = rootThing;
  }
  StageWrapper.builtin$cls = "StageWrapper";
  if (!"name" in StageWrapper)
    StageWrapper.name = "StageWrapper";
  $desc = $collectedClasses.StageWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StageWrapper.prototype = $desc;
  StageWrapper.prototype.get$rootThing = function() {
    return this.rootThing;
  };
  function StageWrapper_closure(this_0) {
    this.this_0 = this_0;
  }
  StageWrapper_closure.builtin$cls = "StageWrapper_closure";
  if (!"name" in StageWrapper_closure)
    StageWrapper_closure.name = "StageWrapper_closure";
  $desc = $collectedClasses.StageWrapper_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StageWrapper_closure.prototype = $desc;
  function Thing() {
  }
  Thing.builtin$cls = "Thing";
  if (!"name" in Thing)
    Thing.name = "Thing";
  $desc = $collectedClasses.Thing;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Thing.prototype = $desc;
  function ThingMouseEventArgs(thing, sourceEvent) {
    this.thing = thing;
    this.sourceEvent = sourceEvent;
  }
  ThingMouseEventArgs.builtin$cls = "ThingMouseEventArgs";
  if (!"name" in ThingMouseEventArgs)
    ThingMouseEventArgs.name = "ThingMouseEventArgs";
  $desc = $collectedClasses.ThingMouseEventArgs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ThingMouseEventArgs.prototype = $desc;
  ThingMouseEventArgs.prototype.get$thing = function() {
    return this.thing;
  };
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function ExpandIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  ExpandIterable.builtin$cls = "ExpandIterable";
  if (!"name" in ExpandIterable)
    ExpandIterable.name = "ExpandIterable";
  $desc = $collectedClasses.ExpandIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterable.prototype = $desc;
  function ExpandIterator(_iterator, _f, _currentExpansion, _current) {
    this._iterator = _iterator;
    this._f = _f;
    this._currentExpansion = _currentExpansion;
    this._current = _current;
  }
  ExpandIterator.builtin$cls = "ExpandIterator";
  if (!"name" in ExpandIterator)
    ExpandIterator.name = "ExpandIterator";
  $desc = $collectedClasses.ExpandIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterator.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$0(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$0.builtin$cls = "BoundClosure$0";
  $desc = $collectedClasses.BoundClosure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$0.prototype = $desc;
  function _BroadcastStreamController(_async$_next, _async$_previous) {
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_Future_closure(computation_0, result_1) {
    this.computation_0 = computation_0;
    this.result_1 = result_1;
  }
  Future_Future_closure.builtin$cls = "Future_Future_closure";
  if (!"name" in Future_Future_closure)
    Future_Future_closure.name = "Future_Future_closure";
  $desc = $collectedClasses.Future_Future_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_Future_closure.prototype = $desc;
  function Future_wait_handleError(box_0) {
    this.box_0 = box_0;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function BoundClosure$2(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$2.builtin$cls = "BoundClosure$2";
  $desc = $collectedClasses.BoundClosure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$2.prototype = $desc;
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _NoCallbacks() {
  }
  _NoCallbacks.builtin$cls = "_NoCallbacks";
  if (!"name" in _NoCallbacks)
    _NoCallbacks.name = "_NoCallbacks";
  $desc = $collectedClasses._NoCallbacks;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbacks.prototype = $desc;
  function _NoCallbackAsyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackAsyncStreamController.builtin$cls = "_NoCallbackAsyncStreamController";
  if (!"name" in _NoCallbackAsyncStreamController)
    _NoCallbackAsyncStreamController.name = "_NoCallbackAsyncStreamController";
  $desc = $collectedClasses._NoCallbackAsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackAsyncStreamController.prototype = $desc;
  function _StreamController__AsyncStreamControllerDispatch0() {
  }
  _StreamController__AsyncStreamControllerDispatch0.builtin$cls = "_StreamController__AsyncStreamControllerDispatch0";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch0)
    _StreamController__AsyncStreamControllerDispatch0.name = "_StreamController__AsyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch0.prototype = $desc;
  function _NoCallbackSyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackSyncStreamController.builtin$cls = "_NoCallbackSyncStreamController";
  if (!"name" in _NoCallbackSyncStreamController)
    _NoCallbackSyncStreamController.name = "_NoCallbackSyncStreamController";
  $desc = $collectedClasses._NoCallbackSyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackSyncStreamController.prototype = $desc;
  function _StreamController__SyncStreamControllerDispatch0() {
  }
  _StreamController__SyncStreamControllerDispatch0.builtin$cls = "_StreamController__SyncStreamControllerDispatch0";
  if (!"name" in _StreamController__SyncStreamControllerDispatch0)
    _StreamController__SyncStreamControllerDispatch0.name = "_StreamController__SyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch0.prototype = $desc;
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_async$_controller = function() {
    return this._async$_controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function BoundClosure$20(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$20.builtin$cls = "BoundClosure$20";
  $desc = $collectedClasses.BoundClosure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$20.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_collection$_element, _next, _previous) {
    this._collection$_element = _collection$_element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function DateTime_toString_fourDigits() {
  }
  DateTime_toString_fourDigits.builtin$cls = "DateTime_toString_fourDigits";
  if (!"name" in DateTime_toString_fourDigits)
    DateTime_toString_fourDigits.name = "DateTime_toString_fourDigits";
  $desc = $collectedClasses.DateTime_toString_fourDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_fourDigits.prototype = $desc;
  function DateTime_toString_threeDigits() {
  }
  DateTime_toString_threeDigits.builtin$cls = "DateTime_toString_threeDigits";
  if (!"name" in DateTime_toString_threeDigits)
    DateTime_toString_threeDigits.name = "DateTime_toString_threeDigits";
  $desc = $collectedClasses.DateTime_toString_threeDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_threeDigits.prototype = $desc;
  function DateTime_toString_twoDigits() {
  }
  DateTime_toString_twoDigits.builtin$cls = "DateTime_toString_twoDigits";
  if (!"name" in DateTime_toString_twoDigits)
    DateTime_toString_twoDigits.name = "DateTime_toString_twoDigits";
  $desc = $collectedClasses.DateTime_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_twoDigits.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterable() {
  }
  Iterable.builtin$cls = "Iterable";
  if (!"name" in Iterable)
    Iterable.name = "Iterable";
  $desc = $collectedClasses.Iterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterable.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Set() {
  }
  Set.builtin$cls = "Set";
  if (!"name" in Set)
    Set.name = "Set";
  $desc = $collectedClasses.Set;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Set.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Console() {
  }
  Console.builtin$cls = "Console";
  if (!"name" in Console)
    Console.name = "Console";
  $desc = $collectedClasses.Console;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Console.prototype = $desc;
  function BoundClosure$i1(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i1.builtin$cls = "BoundClosure$i1";
  $desc = $collectedClasses.BoundClosure$i1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i1.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _ElementAttributeMap(_element) {
    this._element = _element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _DataAttributeMap(_attributes) {
    this._attributes = _attributes;
  }
  _DataAttributeMap.builtin$cls = "_DataAttributeMap";
  if (!"name" in _DataAttributeMap)
    _DataAttributeMap.name = "_DataAttributeMap";
  $desc = $collectedClasses._DataAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap.prototype = $desc;
  function _DataAttributeMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _DataAttributeMap_forEach_closure.builtin$cls = "_DataAttributeMap_forEach_closure";
  if (!"name" in _DataAttributeMap_forEach_closure)
    _DataAttributeMap_forEach_closure.name = "_DataAttributeMap_forEach_closure";
  $desc = $collectedClasses._DataAttributeMap_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_forEach_closure.prototype = $desc;
  function _DataAttributeMap_keys_closure(this_0, keys_1) {
    this.this_0 = this_0;
    this.keys_1 = keys_1;
  }
  _DataAttributeMap_keys_closure.builtin$cls = "_DataAttributeMap_keys_closure";
  if (!"name" in _DataAttributeMap_keys_closure)
    _DataAttributeMap_keys_closure.name = "_DataAttributeMap_keys_closure";
  $desc = $collectedClasses._DataAttributeMap_keys_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_keys_closure.prototype = $desc;
  function _DataAttributeMap_values_closure(this_0, values_1) {
    this.this_0 = this_0;
    this.values_1 = values_1;
  }
  _DataAttributeMap_values_closure.builtin$cls = "_DataAttributeMap_values_closure";
  if (!"name" in _DataAttributeMap_values_closure)
    _DataAttributeMap_values_closure.name = "_DataAttributeMap_values_closure";
  $desc = $collectedClasses._DataAttributeMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_values_closure.prototype = $desc;
  function _MultiElementCssClassSet(_elementIterable, _elementCssClassSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssClassSetIterable = _elementCssClassSetIterable;
  }
  _MultiElementCssClassSet.builtin$cls = "_MultiElementCssClassSet";
  if (!"name" in _MultiElementCssClassSet)
    _MultiElementCssClassSet.name = "_MultiElementCssClassSet";
  $desc = $collectedClasses._MultiElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet.prototype = $desc;
  function _MultiElementCssClassSet_closure() {
  }
  _MultiElementCssClassSet_closure.builtin$cls = "_MultiElementCssClassSet_closure";
  if (!"name" in _MultiElementCssClassSet_closure)
    _MultiElementCssClassSet_closure.name = "_MultiElementCssClassSet_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_closure.prototype = $desc;
  function _MultiElementCssClassSet_readClasses_closure(s_0) {
    this.s_0 = s_0;
  }
  _MultiElementCssClassSet_readClasses_closure.builtin$cls = "_MultiElementCssClassSet_readClasses_closure";
  if (!"name" in _MultiElementCssClassSet_readClasses_closure)
    _MultiElementCssClassSet_readClasses_closure.name = "_MultiElementCssClassSet_readClasses_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_readClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_readClasses_closure.prototype = $desc;
  function _MultiElementCssClassSet_modify_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet_modify_closure.builtin$cls = "_MultiElementCssClassSet_modify_closure";
  if (!"name" in _MultiElementCssClassSet_modify_closure)
    _MultiElementCssClassSet_modify_closure.name = "_MultiElementCssClassSet_modify_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_modify_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_modify_closure.prototype = $desc;
  function _MultiElementCssClassSet_remove_closure(value_0) {
    this.value_0 = value_0;
  }
  _MultiElementCssClassSet_remove_closure.builtin$cls = "_MultiElementCssClassSet_remove_closure";
  if (!"name" in _MultiElementCssClassSet_remove_closure)
    _MultiElementCssClassSet_remove_closure.name = "_MultiElementCssClassSet_remove_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_remove_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_remove_closure.prototype = $desc;
  function _MultiElementCssClassSet__modifyWithReturnValue_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet__modifyWithReturnValue_closure.builtin$cls = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  if (!"name" in _MultiElementCssClassSet__modifyWithReturnValue_closure)
    _MultiElementCssClassSet__modifyWithReturnValue_closure.name = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  $desc = $collectedClasses._MultiElementCssClassSet__modifyWithReturnValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet__modifyWithReturnValue_closure.prototype = $desc;
  function _ElementCssClassSet(_element) {
    this._element = _element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _html$_target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function _SvgNodeValidator() {
  }
  _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
  if (!"name" in _SvgNodeValidator)
    _SvgNodeValidator.name = "_SvgNodeValidator";
  $desc = $collectedClasses._SvgNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SvgNodeValidator.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function _LocationCrossFrame(_html$_location) {
    this._html$_location = _html$_location;
  }
  _LocationCrossFrame.builtin$cls = "_LocationCrossFrame";
  if (!"name" in _LocationCrossFrame)
    _LocationCrossFrame.name = "_LocationCrossFrame";
  $desc = $collectedClasses._LocationCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationCrossFrame.prototype = $desc;
  function _LocationWrapper(_ptr) {
    this._ptr = _ptr;
  }
  _LocationWrapper.builtin$cls = "_LocationWrapper";
  if (!"name" in _LocationWrapper)
    _LocationWrapper.name = "_LocationWrapper";
  $desc = $collectedClasses._LocationWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationWrapper.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function ReceivePort() {
  }
  ReceivePort.builtin$cls = "ReceivePort";
  if (!"name" in ReceivePort)
    ReceivePort.name = "ReceivePort";
  $desc = $collectedClasses.ReceivePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePort.prototype = $desc;
  function _Random() {
  }
  _Random.builtin$cls = "_Random";
  if (!"name" in _Random)
    _Random.name = "_Random";
  $desc = $collectedClasses._Random;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Random.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function FilteredElementList(_html_common$_node, _childNodes) {
    this._html_common$_node = _html_common$_node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function Ballot(voter) {
    this.voter = voter;
  }
  Ballot.builtin$cls = "Ballot";
  if (!"name" in Ballot)
    Ballot.name = "Ballot";
  $desc = $collectedClasses.Ballot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Ballot.prototype = $desc;
  Ballot.prototype.get$voter = function() {
    return this.voter;
  };
  function CondorcetCandidateProfile(candidate, lostTo, beat, tied) {
    this.candidate = candidate;
    this.lostTo = lostTo;
    this.beat = beat;
    this.tied = tied;
  }
  CondorcetCandidateProfile.builtin$cls = "CondorcetCandidateProfile";
  if (!"name" in CondorcetCandidateProfile)
    CondorcetCandidateProfile.name = "CondorcetCandidateProfile";
  $desc = $collectedClasses.CondorcetCandidateProfile;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetCandidateProfile.prototype = $desc;
  CondorcetCandidateProfile.prototype.get$candidate = function(receiver) {
    return this.candidate;
  };
  function CondorcetElection(_pairs, _profiles, ballots, places) {
    this._pairs = _pairs;
    this._profiles = _profiles;
    this.ballots = ballots;
    this.places = places;
  }
  CondorcetElection.builtin$cls = "CondorcetElection";
  if (!"name" in CondorcetElection)
    CondorcetElection.name = "CondorcetElection";
  $desc = $collectedClasses.CondorcetElection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetElection.prototype = $desc;
  CondorcetElection.prototype.get$ballots = function() {
    return this.ballots;
  };
  CondorcetElection.prototype.get$places = function() {
    return this.places;
  };
  function CondorcetElection_CondorcetElection_closure() {
  }
  CondorcetElection_CondorcetElection_closure.builtin$cls = "CondorcetElection_CondorcetElection_closure";
  if (!"name" in CondorcetElection_CondorcetElection_closure)
    CondorcetElection_CondorcetElection_closure.name = "CondorcetElection_CondorcetElection_closure";
  $desc = $collectedClasses.CondorcetElection_CondorcetElection_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetElection_CondorcetElection_closure.prototype = $desc;
  function CondorcetElection_CondorcetElection_closure0(TVoter_0, TCandidate_1) {
    this.TVoter_0 = TVoter_0;
    this.TCandidate_1 = TCandidate_1;
  }
  CondorcetElection_CondorcetElection_closure0.builtin$cls = "CondorcetElection_CondorcetElection_closure0";
  if (!"name" in CondorcetElection_CondorcetElection_closure0)
    CondorcetElection_CondorcetElection_closure0.name = "CondorcetElection_CondorcetElection_closure0";
  $desc = $collectedClasses.CondorcetElection_CondorcetElection_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetElection_CondorcetElection_closure0.prototype = $desc;
  function CondorcetElection_CondorcetElection_closure1(set_2) {
    this.set_2 = set_2;
  }
  CondorcetElection_CondorcetElection_closure1.builtin$cls = "CondorcetElection_CondorcetElection_closure1";
  if (!"name" in CondorcetElection_CondorcetElection_closure1)
    CondorcetElection_CondorcetElection_closure1.name = "CondorcetElection_CondorcetElection_closure1";
  $desc = $collectedClasses.CondorcetElection_CondorcetElection_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetElection_CondorcetElection_closure1.prototype = $desc;
  function CondorcetElection_getPair_closure(c1_0, c2_1) {
    this.c1_0 = c1_0;
    this.c2_1 = c2_1;
  }
  CondorcetElection_getPair_closure.builtin$cls = "CondorcetElection_getPair_closure";
  if (!"name" in CondorcetElection_getPair_closure)
    CondorcetElection_getPair_closure.name = "CondorcetElection_getPair_closure";
  $desc = $collectedClasses.CondorcetElection_getPair_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetElection_getPair_closure.prototype = $desc;
  function CondorcetPair(ballots, firstOverSecond, secondOverFirst, item1, item2) {
    this.ballots = ballots;
    this.firstOverSecond = firstOverSecond;
    this.secondOverFirst = secondOverFirst;
    this.item1 = item1;
    this.item2 = item2;
  }
  CondorcetPair.builtin$cls = "CondorcetPair";
  if (!"name" in CondorcetPair)
    CondorcetPair.name = "CondorcetPair";
  $desc = $collectedClasses.CondorcetPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetPair.prototype = $desc;
  CondorcetPair.prototype.get$ballots = function() {
    return this.ballots;
  };
  function CondorcetPair_CondorcetPair_closure(box_0) {
    this.box_0 = box_0;
  }
  CondorcetPair_CondorcetPair_closure.builtin$cls = "CondorcetPair_CondorcetPair_closure";
  if (!"name" in CondorcetPair_CondorcetPair_closure)
    CondorcetPair_CondorcetPair_closure.name = "CondorcetPair_CondorcetPair_closure";
  $desc = $collectedClasses.CondorcetPair_CondorcetPair_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetPair_CondorcetPair_closure.prototype = $desc;
  function Election() {
  }
  Election.builtin$cls = "Election";
  if (!"name" in Election)
    Election.name = "Election";
  $desc = $collectedClasses.Election;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Election.prototype = $desc;
  function ElectionPlace(place, _items) {
    this.place = place;
    this._items = _items;
  }
  ElectionPlace.builtin$cls = "ElectionPlace";
  if (!"name" in ElectionPlace)
    ElectionPlace.name = "ElectionPlace";
  $desc = $collectedClasses.ElectionPlace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ElectionPlace.prototype = $desc;
  ElectionPlace.prototype.get$place = function() {
    return this.place;
  };
  function IrvElection(candidates, ballots, rounds) {
    this.candidates = candidates;
    this.ballots = ballots;
    this.rounds = rounds;
  }
  IrvElection.builtin$cls = "IrvElection";
  if (!"name" in IrvElection)
    IrvElection.name = "IrvElection";
  $desc = $collectedClasses.IrvElection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvElection.prototype = $desc;
  IrvElection.prototype.get$candidates = function() {
    return this.candidates;
  };
  IrvElection.prototype.get$ballots = function() {
    return this.ballots;
  };
  IrvElection.prototype.get$rounds = function() {
    return this.rounds;
  };
  function IrvElection_IrvElection_closure() {
  }
  IrvElection_IrvElection_closure.builtin$cls = "IrvElection_IrvElection_closure";
  if (!"name" in IrvElection_IrvElection_closure)
    IrvElection_IrvElection_closure.name = "IrvElection_IrvElection_closure";
  $desc = $collectedClasses.IrvElection_IrvElection_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvElection_IrvElection_closure.prototype = $desc;
  function IrvElimination(candidate, _transfers, exhausted) {
    this.candidate = candidate;
    this._transfers = _transfers;
    this.exhausted = exhausted;
  }
  IrvElimination.builtin$cls = "IrvElimination";
  if (!"name" in IrvElimination)
    IrvElimination.name = "IrvElimination";
  $desc = $collectedClasses.IrvElimination;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvElimination.prototype = $desc;
  IrvElimination.prototype.get$candidate = function(receiver) {
    return this.candidate;
  };
  function IrvRound(places, eliminations) {
    this.places = places;
    this.eliminations = eliminations;
  }
  IrvRound.builtin$cls = "IrvRound";
  if (!"name" in IrvRound)
    IrvRound.name = "IrvRound";
  $desc = $collectedClasses.IrvRound;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound.prototype = $desc;
  IrvRound.prototype.get$places = function() {
    return this.places;
  };
  IrvRound.prototype.get$eliminations = function() {
    return this.eliminations;
  };
  function IrvRound_IrvRound_closure(eliminatedCandidates_1) {
    this.eliminatedCandidates_1 = eliminatedCandidates_1;
  }
  IrvRound_IrvRound_closure.builtin$cls = "IrvRound_IrvRound_closure";
  if (!"name" in IrvRound_IrvRound_closure)
    IrvRound_IrvRound_closure.name = "IrvRound_IrvRound_closure";
  $desc = $collectedClasses.IrvRound_IrvRound_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure.prototype = $desc;
  function IrvRound_IrvRound_closure0() {
  }
  IrvRound_IrvRound_closure0.builtin$cls = "IrvRound_IrvRound_closure0";
  if (!"name" in IrvRound_IrvRound_closure0)
    IrvRound_IrvRound_closure0.name = "IrvRound_IrvRound_closure0";
  $desc = $collectedClasses.IrvRound_IrvRound_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure0.prototype = $desc;
  function IrvRound_IrvRound_closure1() {
  }
  IrvRound_IrvRound_closure1.builtin$cls = "IrvRound_IrvRound_closure1";
  if (!"name" in IrvRound_IrvRound_closure1)
    IrvRound_IrvRound_closure1.name = "IrvRound_IrvRound_closure1";
  $desc = $collectedClasses.IrvRound_IrvRound_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure1.prototype = $desc;
  function IrvRound_IrvRound_closure2() {
  }
  IrvRound_IrvRound_closure2.builtin$cls = "IrvRound_IrvRound_closure2";
  if (!"name" in IrvRound_IrvRound_closure2)
    IrvRound_IrvRound_closure2.name = "IrvRound_IrvRound_closure2";
  $desc = $collectedClasses.IrvRound_IrvRound_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure2.prototype = $desc;
  function IrvRound_IrvRound_closure3(candidateAllocations_2) {
    this.candidateAllocations_2 = candidateAllocations_2;
  }
  IrvRound_IrvRound_closure3.builtin$cls = "IrvRound_IrvRound_closure3";
  if (!"name" in IrvRound_IrvRound_closure3)
    IrvRound_IrvRound_closure3.name = "IrvRound_IrvRound_closure3";
  $desc = $collectedClasses.IrvRound_IrvRound_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure3.prototype = $desc;
  function IrvRound_IrvRound_closure4() {
  }
  IrvRound_IrvRound_closure4.builtin$cls = "IrvRound_IrvRound_closure4";
  if (!"name" in IrvRound_IrvRound_closure4)
    IrvRound_IrvRound_closure4.name = "IrvRound_IrvRound_closure4";
  $desc = $collectedClasses.IrvRound_IrvRound_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure4.prototype = $desc;
  function IrvRound_IrvRound_closure5(box_0, TCandidate_3, voteGroups_4) {
    this.box_0 = box_0;
    this.TCandidate_3 = TCandidate_3;
    this.voteGroups_4 = voteGroups_4;
  }
  IrvRound_IrvRound_closure5.builtin$cls = "IrvRound_IrvRound_closure5";
  if (!"name" in IrvRound_IrvRound_closure5)
    IrvRound_IrvRound_closure5.name = "IrvRound_IrvRound_closure5";
  $desc = $collectedClasses.IrvRound_IrvRound_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure5.prototype = $desc;
  function IrvRound_IrvRound_closure6(TVoter_5, TCandidate_6, cleanedBallots_7, newlyEliminatedCandidates_8) {
    this.TVoter_5 = TVoter_5;
    this.TCandidate_6 = TCandidate_6;
    this.cleanedBallots_7 = cleanedBallots_7;
    this.newlyEliminatedCandidates_8 = newlyEliminatedCandidates_8;
  }
  IrvRound_IrvRound_closure6.builtin$cls = "IrvRound_IrvRound_closure6";
  if (!"name" in IrvRound_IrvRound_closure6)
    IrvRound_IrvRound_closure6.name = "IrvRound_IrvRound_closure6";
  $desc = $collectedClasses.IrvRound_IrvRound_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound_closure6.prototype = $desc;
  function IrvRound_IrvRound__closure(c_9) {
    this.c_9 = c_9;
  }
  IrvRound_IrvRound__closure.builtin$cls = "IrvRound_IrvRound__closure";
  if (!"name" in IrvRound_IrvRound__closure)
    IrvRound_IrvRound__closure.name = "IrvRound_IrvRound__closure";
  $desc = $collectedClasses.IrvRound_IrvRound__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound__closure.prototype = $desc;
  function IrvRound_IrvRound__closure0() {
  }
  IrvRound_IrvRound__closure0.builtin$cls = "IrvRound_IrvRound__closure0";
  if (!"name" in IrvRound_IrvRound__closure0)
    IrvRound_IrvRound__closure0.name = "IrvRound_IrvRound__closure0";
  $desc = $collectedClasses.IrvRound_IrvRound__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_IrvRound__closure0.prototype = $desc;
  function IrvRound_eliminatedCandidates_closure() {
  }
  IrvRound_eliminatedCandidates_closure.builtin$cls = "IrvRound_eliminatedCandidates_closure";
  if (!"name" in IrvRound_eliminatedCandidates_closure)
    IrvRound_eliminatedCandidates_closure.name = "IrvRound_eliminatedCandidates_closure";
  $desc = $collectedClasses.IrvRound_eliminatedCandidates_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_eliminatedCandidates_closure.prototype = $desc;
  function IrvRound_candidates_closure() {
  }
  IrvRound_candidates_closure.builtin$cls = "IrvRound_candidates_closure";
  if (!"name" in IrvRound_candidates_closure)
    IrvRound_candidates_closure.name = "IrvRound_candidates_closure";
  $desc = $collectedClasses.IrvRound_candidates_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound_candidates_closure.prototype = $desc;
  function IrvRound__getEliminatedCandidates_closure() {
  }
  IrvRound__getEliminatedCandidates_closure.builtin$cls = "IrvRound__getEliminatedCandidates_closure";
  if (!"name" in IrvRound__getEliminatedCandidates_closure)
    IrvRound__getEliminatedCandidates_closure.name = "IrvRound__getEliminatedCandidates_closure";
  $desc = $collectedClasses.IrvRound__getEliminatedCandidates_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound__getEliminatedCandidates_closure.prototype = $desc;
  function IrvRound__getEliminatedCandidates_closure0() {
  }
  IrvRound__getEliminatedCandidates_closure0.builtin$cls = "IrvRound__getEliminatedCandidates_closure0";
  if (!"name" in IrvRound__getEliminatedCandidates_closure0)
    IrvRound__getEliminatedCandidates_closure0.name = "IrvRound__getEliminatedCandidates_closure0";
  $desc = $collectedClasses.IrvRound__getEliminatedCandidates_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvRound__getEliminatedCandidates_closure0.prototype = $desc;
  function Player() {
  }
  Player.builtin$cls = "Player";
  if (!"name" in Player)
    Player.name = "Player";
  $desc = $collectedClasses.Player;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Player.prototype = $desc;
  function PluralityBallot(choice) {
    this.choice = choice;
  }
  PluralityBallot.builtin$cls = "PluralityBallot";
  if (!"name" in PluralityBallot)
    PluralityBallot.name = "PluralityBallot";
  $desc = $collectedClasses.PluralityBallot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityBallot.prototype = $desc;
  PluralityBallot.prototype.get$choice = function() {
    return this.choice;
  };
  function PluralityElection(ballots, _ballotGroup, places) {
    this.ballots = ballots;
    this._ballotGroup = _ballotGroup;
    this.places = places;
  }
  PluralityElection.builtin$cls = "PluralityElection";
  if (!"name" in PluralityElection)
    PluralityElection.name = "PluralityElection";
  $desc = $collectedClasses.PluralityElection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElection.prototype = $desc;
  PluralityElection.prototype.get$ballots = function() {
    return this.ballots;
  };
  PluralityElection.prototype.get$places = function() {
    return this.places;
  };
  function PluralityElection_PluralityElection_closure() {
  }
  PluralityElection_PluralityElection_closure.builtin$cls = "PluralityElection_PluralityElection_closure";
  if (!"name" in PluralityElection_PluralityElection_closure)
    PluralityElection_PluralityElection_closure.name = "PluralityElection_PluralityElection_closure";
  $desc = $collectedClasses.PluralityElection_PluralityElection_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElection_PluralityElection_closure.prototype = $desc;
  function PluralityElection_PluralityElection_closure0() {
  }
  PluralityElection_PluralityElection_closure0.builtin$cls = "PluralityElection_PluralityElection_closure0";
  if (!"name" in PluralityElection_PluralityElection_closure0)
    PluralityElection_PluralityElection_closure0.name = "PluralityElection_PluralityElection_closure0";
  $desc = $collectedClasses.PluralityElection_PluralityElection_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElection_PluralityElection_closure0.prototype = $desc;
  function PluralityElection_PluralityElection_closure1(TCandidate_0, voteCounts_1) {
    this.TCandidate_0 = TCandidate_0;
    this.voteCounts_1 = voteCounts_1;
  }
  PluralityElection_PluralityElection_closure1.builtin$cls = "PluralityElection_PluralityElection_closure1";
  if (!"name" in PluralityElection_PluralityElection_closure1)
    PluralityElection_PluralityElection_closure1.name = "PluralityElection_PluralityElection_closure1";
  $desc = $collectedClasses.PluralityElection_PluralityElection_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElection_PluralityElection_closure1.prototype = $desc;
  function PluralityElection_PluralityElection__closure(TCandidate_2) {
    this.TCandidate_2 = TCandidate_2;
  }
  PluralityElection_PluralityElection__closure.builtin$cls = "PluralityElection_PluralityElection__closure";
  if (!"name" in PluralityElection_PluralityElection__closure)
    PluralityElection_PluralityElection__closure.name = "PluralityElection_PluralityElection__closure";
  $desc = $collectedClasses.PluralityElection_PluralityElection__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElection_PluralityElection__closure.prototype = $desc;
  function PluralityElection_PluralityElection_closure2() {
  }
  PluralityElection_PluralityElection_closure2.builtin$cls = "PluralityElection_PluralityElection_closure2";
  if (!"name" in PluralityElection_PluralityElection_closure2)
    PluralityElection_PluralityElection_closure2.name = "PluralityElection_PluralityElection_closure2";
  $desc = $collectedClasses.PluralityElection_PluralityElection_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElection_PluralityElection_closure2.prototype = $desc;
  function PluralityElectionPlace(voteCount, place, _items) {
    this.voteCount = voteCount;
    this.place = place;
    this._items = _items;
  }
  PluralityElectionPlace.builtin$cls = "PluralityElectionPlace";
  if (!"name" in PluralityElectionPlace)
    PluralityElectionPlace.name = "PluralityElectionPlace";
  $desc = $collectedClasses.PluralityElectionPlace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityElectionPlace.prototype = $desc;
  PluralityElectionPlace.prototype.get$voteCount = function() {
    return this.voteCount;
  };
  function RankedBallot(rank) {
    this.rank = rank;
  }
  RankedBallot.builtin$cls = "RankedBallot";
  if (!"name" in RankedBallot)
    RankedBallot.name = "RankedBallot";
  $desc = $collectedClasses.RankedBallot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RankedBallot.prototype = $desc;
  RankedBallot.prototype.get$rank = function() {
    return this.rank;
  };
  function CalcEngine(_distanceElectionMapper, _pluralityElectionMapper, _condorcetElectionMapper, _irvElectionMapper, _voterHexMapper, _locationDataStream, _highlightCandidates) {
    this._distanceElectionMapper = _distanceElectionMapper;
    this._pluralityElectionMapper = _pluralityElectionMapper;
    this._condorcetElectionMapper = _condorcetElectionMapper;
    this._irvElectionMapper = _irvElectionMapper;
    this._voterHexMapper = _voterHexMapper;
    this._locationDataStream = _locationDataStream;
    this._highlightCandidates = _highlightCandidates;
  }
  CalcEngine.builtin$cls = "CalcEngine";
  if (!"name" in CalcEngine)
    CalcEngine.name = "CalcEngine";
  $desc = $collectedClasses.CalcEngine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CalcEngine.prototype = $desc;
  function CalcEngine_closure(this_0) {
    this.this_0 = this_0;
  }
  CalcEngine_closure.builtin$cls = "CalcEngine_closure";
  if (!"name" in CalcEngine_closure)
    CalcEngine_closure.name = "CalcEngine_closure";
  $desc = $collectedClasses.CalcEngine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CalcEngine_closure.prototype = $desc;
  function _voterHexIsolate_closure(tuple_0) {
    this.tuple_0 = tuple_0;
  }
  _voterHexIsolate_closure.builtin$cls = "_voterHexIsolate_closure";
  if (!"name" in _voterHexIsolate_closure)
    _voterHexIsolate_closure.name = "_voterHexIsolate_closure";
  $desc = $collectedClasses._voterHexIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _voterHexIsolate_closure.prototype = $desc;
  function VoteDemo(_calcEngine, _playerHues, _condorcetView, _irvView, _distanceView, _pluralityView, _canManView, _candidateHues, canvas, stage, rootThing, _invalidatedEventSub, _frameRequested, _disposed) {
    this._calcEngine = _calcEngine;
    this._playerHues = _playerHues;
    this._condorcetView = _condorcetView;
    this._irvView = _irvView;
    this._distanceView = _distanceView;
    this._pluralityView = _pluralityView;
    this._canManView = _canManView;
    this._candidateHues = _candidateHues;
    this.canvas = canvas;
    this.stage = stage;
    this.rootThing = rootThing;
    this._invalidatedEventSub = _invalidatedEventSub;
    this._frameRequested = _frameRequested;
    this._disposed = _disposed;
  }
  VoteDemo.builtin$cls = "VoteDemo";
  if (!"name" in VoteDemo)
    VoteDemo.name = "VoteDemo";
  $desc = $collectedClasses.VoteDemo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoteDemo.prototype = $desc;
  function VoteDemo$_internal_closure(this_0) {
    this.this_0 = this_0;
  }
  VoteDemo$_internal_closure.builtin$cls = "VoteDemo$_internal_closure";
  if (!"name" in VoteDemo$_internal_closure)
    VoteDemo$_internal_closure.name = "VoteDemo$_internal_closure";
  $desc = $collectedClasses.VoteDemo$_internal_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoteDemo$_internal_closure.prototype = $desc;
  function VoteDemo$_internal_closure0(this_1) {
    this.this_1 = this_1;
  }
  VoteDemo$_internal_closure0.builtin$cls = "VoteDemo$_internal_closure0";
  if (!"name" in VoteDemo$_internal_closure0)
    VoteDemo$_internal_closure0.name = "VoteDemo$_internal_closure0";
  $desc = $collectedClasses.VoteDemo$_internal_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoteDemo$_internal_closure0.prototype = $desc;
  function VoteDemo$_internal_closure1(this_2) {
    this.this_2 = this_2;
  }
  VoteDemo$_internal_closure1.builtin$cls = "VoteDemo$_internal_closure1";
  if (!"name" in VoteDemo$_internal_closure1)
    VoteDemo$_internal_closure1.name = "VoteDemo$_internal_closure1";
  $desc = $collectedClasses.VoteDemo$_internal_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoteDemo$_internal_closure1.prototype = $desc;
  function VoteDemo$_internal_closure2(this_3) {
    this.this_3 = this_3;
  }
  VoteDemo$_internal_closure2.builtin$cls = "VoteDemo$_internal_closure2";
  if (!"name" in VoteDemo$_internal_closure2)
    VoteDemo$_internal_closure2.name = "VoteDemo$_internal_closure2";
  $desc = $collectedClasses.VoteDemo$_internal_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoteDemo$_internal_closure2.prototype = $desc;
  function VoteDemo$_internal_closure3(this_4) {
    this.this_4 = this_4;
  }
  VoteDemo$_internal_closure3.builtin$cls = "VoteDemo$_internal_closure3";
  if (!"name" in VoteDemo$_internal_closure3)
    VoteDemo$_internal_closure3.name = "VoteDemo$_internal_closure3";
  $desc = $collectedClasses.VoteDemo$_internal_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoteDemo$_internal_closure3.prototype = $desc;
  function CandidateManagerView(_requestRemoveCandidateHandle, _requestNewCandidateHandle, _candidates, _node, _dirty) {
    this._requestRemoveCandidateHandle = _requestRemoveCandidateHandle;
    this._requestNewCandidateHandle = _requestNewCandidateHandle;
    this._candidates = _candidates;
    this._node = _node;
    this._dirty = _dirty;
  }
  CandidateManagerView.builtin$cls = "CandidateManagerView";
  if (!"name" in CandidateManagerView)
    CandidateManagerView.name = "CandidateManagerView";
  $desc = $collectedClasses.CandidateManagerView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CandidateManagerView.prototype = $desc;
  function CandidateManagerView__removeCandidateWithId_closure(id_0) {
    this.id_0 = id_0;
  }
  CandidateManagerView__removeCandidateWithId_closure.builtin$cls = "CandidateManagerView__removeCandidateWithId_closure";
  if (!"name" in CandidateManagerView__removeCandidateWithId_closure)
    CandidateManagerView__removeCandidateWithId_closure.name = "CandidateManagerView__removeCandidateWithId_closure";
  $desc = $collectedClasses.CandidateManagerView__removeCandidateWithId_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CandidateManagerView__removeCandidateWithId_closure.prototype = $desc;
  function CondorcetView(_hoverChangedHandle, _election, _candidates, _vote_html$_highlightCandidates, _node, _dirty) {
    this._hoverChangedHandle = _hoverChangedHandle;
    this._election = _election;
    this._candidates = _candidates;
    this._vote_html$_highlightCandidates = _vote_html$_highlightCandidates;
    this._node = _node;
    this._dirty = _dirty;
  }
  CondorcetView.builtin$cls = "CondorcetView";
  if (!"name" in CondorcetView)
    CondorcetView.name = "CondorcetView";
  $desc = $collectedClasses.CondorcetView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetView.prototype = $desc;
  function CondorcetView_updateElement_closure() {
  }
  CondorcetView_updateElement_closure.builtin$cls = "CondorcetView_updateElement_closure";
  if (!"name" in CondorcetView_updateElement_closure)
    CondorcetView_updateElement_closure.name = "CondorcetView_updateElement_closure";
  $desc = $collectedClasses.CondorcetView_updateElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetView_updateElement_closure.prototype = $desc;
  function CondorcetView__updateCellHoverStyle_closure(hoverPairClass_0) {
    this.hoverPairClass_0 = hoverPairClass_0;
  }
  CondorcetView__updateCellHoverStyle_closure.builtin$cls = "CondorcetView__updateCellHoverStyle_closure";
  if (!"name" in CondorcetView__updateCellHoverStyle_closure)
    CondorcetView__updateCellHoverStyle_closure.name = "CondorcetView__updateCellHoverStyle_closure";
  $desc = $collectedClasses.CondorcetView__updateCellHoverStyle_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetView__updateCellHoverStyle_closure.prototype = $desc;
  function CondorcetView__updateCellHoverStyle_closure0(hoverPairClass_1) {
    this.hoverPairClass_1 = hoverPairClass_1;
  }
  CondorcetView__updateCellHoverStyle_closure0.builtin$cls = "CondorcetView__updateCellHoverStyle_closure0";
  if (!"name" in CondorcetView__updateCellHoverStyle_closure0)
    CondorcetView__updateCellHoverStyle_closure0.name = "CondorcetView__updateCellHoverStyle_closure0";
  $desc = $collectedClasses.CondorcetView__updateCellHoverStyle_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetView__updateCellHoverStyle_closure0.prototype = $desc;
  function CondorcetView__getPair_closure() {
  }
  CondorcetView__getPair_closure.builtin$cls = "CondorcetView__getPair_closure";
  if (!"name" in CondorcetView__getPair_closure)
    CondorcetView__getPair_closure.name = "CondorcetView__getPair_closure";
  $desc = $collectedClasses.CondorcetView__getPair_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CondorcetView__getPair_closure.prototype = $desc;
  function DistanceView(_election, _node, _dirty) {
    this._election = _election;
    this._node = _node;
    this._dirty = _dirty;
  }
  DistanceView.builtin$cls = "DistanceView";
  if (!"name" in DistanceView)
    DistanceView.name = "DistanceView";
  $desc = $collectedClasses.DistanceView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceView.prototype = $desc;
  function IrvView(_hoverChangedHandle, _highlightRound, _election, _node, _dirty) {
    this._hoverChangedHandle = _hoverChangedHandle;
    this._highlightRound = _highlightRound;
    this._election = _election;
    this._node = _node;
    this._dirty = _dirty;
  }
  IrvView.builtin$cls = "IrvView";
  if (!"name" in IrvView)
    IrvView.name = "IrvView";
  $desc = $collectedClasses.IrvView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvView.prototype = $desc;
  function IrvView_updateElement_closure() {
  }
  IrvView_updateElement_closure.builtin$cls = "IrvView_updateElement_closure";
  if (!"name" in IrvView_updateElement_closure)
    IrvView_updateElement_closure.name = "IrvView_updateElement_closure";
  $desc = $collectedClasses.IrvView_updateElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IrvView_updateElement_closure.prototype = $desc;
  function PluralityView(_election, _node, _dirty) {
    this._election = _election;
    this._node = _node;
    this._dirty = _dirty;
  }
  PluralityView.builtin$cls = "PluralityView";
  if (!"name" in PluralityView)
    PluralityView.name = "PluralityView";
  $desc = $collectedClasses.PluralityView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluralityView.prototype = $desc;
  function DistanceBallot(_distances, rank, choice, voter) {
    this._distances = _distances;
    this.rank = rank;
    this.choice = choice;
    this.voter = voter;
  }
  DistanceBallot.builtin$cls = "DistanceBallot";
  if (!"name" in DistanceBallot)
    DistanceBallot.name = "DistanceBallot";
  $desc = $collectedClasses.DistanceBallot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceBallot.prototype = $desc;
  function DistanceBallot_DistanceBallot_closure(voter_0) {
    this.voter_0 = voter_0;
  }
  DistanceBallot_DistanceBallot_closure.builtin$cls = "DistanceBallot_DistanceBallot_closure";
  if (!"name" in DistanceBallot_DistanceBallot_closure)
    DistanceBallot_DistanceBallot_closure.name = "DistanceBallot_DistanceBallot_closure";
  $desc = $collectedClasses.DistanceBallot_DistanceBallot_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceBallot_DistanceBallot_closure.prototype = $desc;
  function DistanceBallot_DistanceBallot_closure0(distances_1) {
    this.distances_1 = distances_1;
  }
  DistanceBallot_DistanceBallot_closure0.builtin$cls = "DistanceBallot_DistanceBallot_closure0";
  if (!"name" in DistanceBallot_DistanceBallot_closure0)
    DistanceBallot_DistanceBallot_closure0.name = "DistanceBallot_DistanceBallot_closure0";
  $desc = $collectedClasses.DistanceBallot_DistanceBallot_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceBallot_DistanceBallot_closure0.prototype = $desc;
  function DistanceElection(candidates, ballots, places) {
    this.candidates = candidates;
    this.ballots = ballots;
    this.places = places;
  }
  DistanceElection.builtin$cls = "DistanceElection";
  if (!"name" in DistanceElection)
    DistanceElection.name = "DistanceElection";
  $desc = $collectedClasses.DistanceElection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceElection.prototype = $desc;
  DistanceElection.prototype.get$candidates = function() {
    return this.candidates;
  };
  DistanceElection.prototype.get$ballots = function() {
    return this.ballots;
  };
  DistanceElection.prototype.get$places = function() {
    return this.places;
  };
  function DistanceElection_DistanceElection_closure(cans_1) {
    this.cans_1 = cans_1;
  }
  DistanceElection_DistanceElection_closure.builtin$cls = "DistanceElection_DistanceElection_closure";
  if (!"name" in DistanceElection_DistanceElection_closure)
    DistanceElection_DistanceElection_closure.name = "DistanceElection_DistanceElection_closure";
  $desc = $collectedClasses.DistanceElection_DistanceElection_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceElection_DistanceElection_closure.prototype = $desc;
  function DistanceElection_DistanceElection_closure0(ballots_2) {
    this.ballots_2 = ballots_2;
  }
  DistanceElection_DistanceElection_closure0.builtin$cls = "DistanceElection_DistanceElection_closure0";
  if (!"name" in DistanceElection_DistanceElection_closure0)
    DistanceElection_DistanceElection_closure0.name = "DistanceElection_DistanceElection_closure0";
  $desc = $collectedClasses.DistanceElection_DistanceElection_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceElection_DistanceElection_closure0.prototype = $desc;
  function DistanceElection_DistanceElection_closure1() {
  }
  DistanceElection_DistanceElection_closure1.builtin$cls = "DistanceElection_DistanceElection_closure1";
  if (!"name" in DistanceElection_DistanceElection_closure1)
    DistanceElection_DistanceElection_closure1.name = "DistanceElection_DistanceElection_closure1";
  $desc = $collectedClasses.DistanceElection_DistanceElection_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceElection_DistanceElection_closure1.prototype = $desc;
  function DistanceElection_DistanceElection_closure2(box_0, distanceGroups_3) {
    this.box_0 = box_0;
    this.distanceGroups_3 = distanceGroups_3;
  }
  DistanceElection_DistanceElection_closure2.builtin$cls = "DistanceElection_DistanceElection_closure2";
  if (!"name" in DistanceElection_DistanceElection_closure2)
    DistanceElection_DistanceElection_closure2.name = "DistanceElection_DistanceElection_closure2";
  $desc = $collectedClasses.DistanceElection_DistanceElection_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceElection_DistanceElection_closure2.prototype = $desc;
  function DistanceElectionPlace(avgDistance, avgDistanceSquared, place, _items) {
    this.avgDistance = avgDistance;
    this.avgDistanceSquared = avgDistanceSquared;
    this.place = place;
    this._items = _items;
  }
  DistanceElectionPlace.builtin$cls = "DistanceElectionPlace";
  if (!"name" in DistanceElectionPlace)
    DistanceElectionPlace.name = "DistanceElectionPlace";
  $desc = $collectedClasses.DistanceElectionPlace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceElectionPlace.prototype = $desc;
  DistanceElectionPlace.prototype.get$avgDistance = function() {
    return this.avgDistance;
  };
  function LocationData(candidates, voters) {
    this.candidates = candidates;
    this.voters = voters;
  }
  LocationData.builtin$cls = "LocationData";
  if (!"name" in LocationData)
    LocationData.name = "LocationData";
  $desc = $collectedClasses.LocationData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LocationData.prototype = $desc;
  LocationData.prototype.get$candidates = function() {
    return this.candidates;
  };
  LocationData.prototype.get$voters = function() {
    return this.voters;
  };
  function LocationData_LocationData$random_closure() {
  }
  LocationData_LocationData$random_closure.builtin$cls = "LocationData_LocationData$random_closure";
  if (!"name" in LocationData_LocationData$random_closure)
    LocationData_LocationData$random_closure.name = "LocationData_LocationData$random_closure";
  $desc = $collectedClasses.LocationData_LocationData$random_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LocationData_LocationData$random_closure.prototype = $desc;
  function LocationData_LocationData$random_closure0(candidates_0) {
    this.candidates_0 = candidates_0;
  }
  LocationData_LocationData$random_closure0.builtin$cls = "LocationData_LocationData$random_closure0";
  if (!"name" in LocationData_LocationData$random_closure0)
    LocationData_LocationData$random_closure0.name = "LocationData_LocationData$random_closure0";
  $desc = $collectedClasses.LocationData_LocationData$random_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LocationData_LocationData$random_closure0.prototype = $desc;
  function LocationData_cloneAndRemove_closure(mp_0) {
    this.mp_0 = mp_0;
  }
  LocationData_cloneAndRemove_closure.builtin$cls = "LocationData_cloneAndRemove_closure";
  if (!"name" in LocationData_cloneAndRemove_closure)
    LocationData_cloneAndRemove_closure.name = "LocationData_cloneAndRemove_closure";
  $desc = $collectedClasses.LocationData_cloneAndRemove_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LocationData_cloneAndRemove_closure.prototype = $desc;
  function MapPlayer(_id, name, _location) {
    this._id = _id;
    this.name = name;
    this._location = _location;
  }
  MapPlayer.builtin$cls = "MapPlayer";
  if (!"name" in MapPlayer)
    MapPlayer.name = "MapPlayer";
  $desc = $collectedClasses.MapPlayer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapPlayer.prototype = $desc;
  MapPlayer.prototype.get$_id = function() {
    return this._id;
  };
  MapPlayer.prototype.get$name = function(receiver) {
    return this.name;
  };
  function CandidateElement(_color, player, _text, _tx, _hidden, _transforms, _invalidatedEventHandle, _cacheCanvas, _width, _height, _alpha, _cacheEnabled, _lastDrawTime, _parent, _propertyValues, _eventHandlers, _disposed) {
    this._color = _color;
    this.player = player;
    this._text = _text;
    this._tx = _tx;
    this._hidden = _hidden;
    this._transforms = _transforms;
    this._invalidatedEventHandle = _invalidatedEventHandle;
    this._cacheCanvas = _cacheCanvas;
    this._width = _width;
    this._height = _height;
    this._alpha = _alpha;
    this._cacheEnabled = _cacheEnabled;
    this._lastDrawTime = _lastDrawTime;
    this._parent = _parent;
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  CandidateElement.builtin$cls = "CandidateElement";
  if (!"name" in CandidateElement)
    CandidateElement.name = "CandidateElement";
  $desc = $collectedClasses.CandidateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CandidateElement.prototype = $desc;
  CandidateElement.prototype.get$player = function() {
    return this.player;
  };
  function CandidateMapElement(_players, _tx, _radius, _vote_retanied$_elements, _showOnlyPlayers, _transforms, _invalidatedEventHandle, _cacheCanvas, _width, _height, _alpha, _cacheEnabled, _lastDrawTime, _parent, _propertyValues, _eventHandlers, _disposed) {
    this._players = _players;
    this._tx = _tx;
    this._radius = _radius;
    this._vote_retanied$_elements = _vote_retanied$_elements;
    this._showOnlyPlayers = _showOnlyPlayers;
    this._transforms = _transforms;
    this._invalidatedEventHandle = _invalidatedEventHandle;
    this._cacheCanvas = _cacheCanvas;
    this._width = _width;
    this._height = _height;
    this._alpha = _alpha;
    this._cacheEnabled = _cacheEnabled;
    this._lastDrawTime = _lastDrawTime;
    this._parent = _parent;
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  CandidateMapElement.builtin$cls = "CandidateMapElement";
  if (!"name" in CandidateMapElement)
    CandidateMapElement.name = "CandidateMapElement";
  $desc = $collectedClasses.CandidateMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CandidateMapElement.prototype = $desc;
  CandidateMapElement.prototype.set$_radius = function(v) {
    return this._radius = v;
  };
  function RootMapElement(_voterMap, _candidateMap, _tx, _candidatesMovedHandle, _averageCloseness, _bounds, _radius, _transforms, _invalidatedEventHandle, _cacheCanvas, _width, _height, _alpha, _cacheEnabled, _lastDrawTime, _parent, _propertyValues, _eventHandlers, _disposed) {
    this._voterMap = _voterMap;
    this._candidateMap = _candidateMap;
    this._tx = _tx;
    this._candidatesMovedHandle = _candidatesMovedHandle;
    this._averageCloseness = _averageCloseness;
    this._bounds = _bounds;
    this._radius = _radius;
    this._transforms = _transforms;
    this._invalidatedEventHandle = _invalidatedEventHandle;
    this._cacheCanvas = _cacheCanvas;
    this._width = _width;
    this._height = _height;
    this._alpha = _alpha;
    this._cacheEnabled = _cacheEnabled;
    this._lastDrawTime = _lastDrawTime;
    this._parent = _parent;
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  RootMapElement.builtin$cls = "RootMapElement";
  if (!"name" in RootMapElement)
    RootMapElement.name = "RootMapElement";
  $desc = $collectedClasses.RootMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RootMapElement.prototype = $desc;
  RootMapElement.prototype.set$_radius = function(v) {
    return this._radius = v;
  };
  function RootMapElement_dragCandidate_closure(candidate_0) {
    this.candidate_0 = candidate_0;
  }
  RootMapElement_dragCandidate_closure.builtin$cls = "RootMapElement_dragCandidate_closure";
  if (!"name" in RootMapElement_dragCandidate_closure)
    RootMapElement_dragCandidate_closure.name = "RootMapElement_dragCandidate_closure";
  $desc = $collectedClasses.RootMapElement_dragCandidate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RootMapElement_dragCandidate_closure.prototype = $desc;
  function RootMapElement_update_closure(this_0) {
    this.this_0 = this_0;
  }
  RootMapElement_update_closure.builtin$cls = "RootMapElement_update_closure";
  if (!"name" in RootMapElement_update_closure)
    RootMapElement_update_closure.name = "RootMapElement_update_closure";
  $desc = $collectedClasses.RootMapElement_update_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RootMapElement_update_closure.prototype = $desc;
  function VoterMapElement(_players, _tx, _radius, _vote_retanied$_map, _transforms, _invalidatedEventHandle, _cacheCanvas, _width, _height, _alpha, _cacheEnabled, _lastDrawTime, _parent, _propertyValues, _eventHandlers, _disposed) {
    this._players = _players;
    this._tx = _tx;
    this._radius = _radius;
    this._vote_retanied$_map = _vote_retanied$_map;
    this._transforms = _transforms;
    this._invalidatedEventHandle = _invalidatedEventHandle;
    this._cacheCanvas = _cacheCanvas;
    this._width = _width;
    this._height = _height;
    this._alpha = _alpha;
    this._cacheEnabled = _cacheEnabled;
    this._lastDrawTime = _lastDrawTime;
    this._parent = _parent;
    this._propertyValues = _propertyValues;
    this._eventHandlers = _eventHandlers;
    this._disposed = _disposed;
  }
  VoterMapElement.builtin$cls = "VoterMapElement";
  if (!"name" in VoterMapElement)
    VoterMapElement.name = "VoterMapElement";
  $desc = $collectedClasses.VoterMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VoterMapElement.prototype = $desc;
  VoterMapElement.prototype.set$_radius = function(v) {
    return this._radius = v;
  };
  function Closure$2(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$2.builtin$cls = "Closure$2";
  $desc = $collectedClasses.Closure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$2.prototype = $desc;
  function Closure$1(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$1.builtin$cls = "Closure$1";
  $desc = $collectedClasses.Closure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$1.prototype = $desc;
  function Closure$0(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$0.builtin$cls = "Closure$0";
  $desc = $collectedClasses.Closure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$0.prototype = $desc;
  function Closure$7(call$7, $name) {
    this.call$7 = call$7;
    this.$name = $name;
  }
  Closure$7.builtin$cls = "Closure$7";
  $desc = $collectedClasses.Closure$7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$7.prototype = $desc;
  function Closure$20(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$20.builtin$cls = "Closure$20";
  $desc = $collectedClasses.Closure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$20.prototype = $desc;
  function Closure$4(call$4, $name) {
    this.call$4 = call$4;
    this.$name = $name;
  }
  Closure$4.builtin$cls = "Closure$4";
  $desc = $collectedClasses.Closure$4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$4.prototype = $desc;
  return [HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasGradient, CanvasPattern, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, IFrameElement, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidate, RtcIceCandidateEvent, ScriptElement0, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, _Attr, _ClientRect, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimatedTransformList, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, TypedData, Uint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, ReceivePortImpl, BoundClosure$i0, _waitForPendingPorts_closure, _PendingSendPortFinder, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, BoundClosure$1, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, BoundClosure, initHooks_closure, initHooks_closure0, initHooks_closure1, StringMatch, Attachable, AttachableObject, AttachableObject__getStream_closure, AttachableObject__getStream__closure, AttachedEvent, Property, _UndefinedValue, PropertyChangedEventArgs, CollectionUtil_count_closure, CollectionUtil_exclude_closure, CollectionUtil_distinct_closure, CollectionUtil_distinct_closure0, CollectionUtil_toMap_closure, _DistinctIterator, _DistinctIterator_moveNext_closure, _SequenceIterator, Enumerable, _SimpleEnumerable, _FuncEnumerable, Grouping, Grouping_closure0, Grouping_closure, NumberEnumerable, _SimpleNumEnumerable, ReadOnlyCollection, Sequence, HslColor, RgbColor, RgbColor_toHex_closure, DisposedError, DisposableImpl, EventArgs, EventHandle, DetailedArgumentError, InvalidOperationError, NullArgumentError, AffineTransform, Box, Coordinate, Size, TarjanCycleDetect, _TarjanNode, _TarjanList, _TarjanList__TarjanList_closure, _TarjanList__TarjanList__closure, _TarjanList__TarjanList__closure0, Vector, Tuple, Tuple3, ThrottledStream, ThrottledStream__tryUpdate_closure, ThrottledStream__tryUpdate_closure0, ThrottledStream__tryUpdate_closure1, ThrottledStream__tryUpdate_closure2, HtmlView, Mouse_markMouseOver_closure, Mouse_markMouseOver_closure0, MouseManager, MouseManager_MouseManager_closure, MouseManager__mouseUp_closure, MouseManager__mouseUp_closure0, ThingDragStartingEventArgs, ThingDragEventArgs, ParentThing, ParentThing_update_closure, ParentThing_drawOverride_closure, Stage, StageWrapper, StageWrapper_closure, Thing, ThingMouseEventArgs, ListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, EmptyIterator, FixedLengthListMixin, _AsyncError, _BroadcastStream, _BroadcastSubscription, BoundClosure$0, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, Future_Future_closure, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _Future, BoundClosure$2, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_toList_closure, Stream_toList_closure0, StreamSubscription, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _NoCallbacks, _NoCallbackAsyncStreamController, _StreamController__AsyncStreamControllerDispatch0, _NoCallbackSyncStreamController, _StreamController__SyncStreamControllerDispatch0, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _ForwardingStream, _ForwardingStreamSubscription, BoundClosure$20, _MapStream, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, NoSuchMethodError_toString_closure, Comparable, DateTime, DateTime_toString_fourDigits, DateTime_toString_threeDigits, DateTime_toString_twoDigits, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, Expando, Function, Iterable, Iterator, Map, Null, Object, Set, StackTrace, StringBuffer, Symbol, Console, BoundClosure$i1, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, Element_Element$html_closure, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, _AttributeMap, _ElementAttributeMap, _DataAttributeMap, _DataAttributeMap_forEach_closure, _DataAttributeMap_keys_closure, _DataAttributeMap_values_closure, _MultiElementCssClassSet, _MultiElementCssClassSet_closure, _MultiElementCssClassSet_readClasses_closure, _MultiElementCssClassSet_modify_closure, _MultiElementCssClassSet_remove_closure, _MultiElementCssClassSet__modifyWithReturnValue_closure, _ElementCssClassSet, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _DOMWindowCrossFrame, _LocationCrossFrame, _LocationWrapper, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, ReceivePort, _Random, Point, _RectangleBase, Rectangle, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, CssClassSetImpl, CssClassSetImpl_add_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, Ballot, CondorcetCandidateProfile, CondorcetElection, CondorcetElection_CondorcetElection_closure, CondorcetElection_CondorcetElection_closure0, CondorcetElection_CondorcetElection_closure1, CondorcetElection_getPair_closure, CondorcetPair, CondorcetPair_CondorcetPair_closure, Election, ElectionPlace, IrvElection, IrvElection_IrvElection_closure, IrvElimination, IrvRound, IrvRound_IrvRound_closure, IrvRound_IrvRound_closure0, IrvRound_IrvRound_closure1, IrvRound_IrvRound_closure2, IrvRound_IrvRound_closure3, IrvRound_IrvRound_closure4, IrvRound_IrvRound_closure5, IrvRound_IrvRound_closure6, IrvRound_IrvRound__closure, IrvRound_IrvRound__closure0, IrvRound_eliminatedCandidates_closure, IrvRound_candidates_closure, IrvRound__getEliminatedCandidates_closure, IrvRound__getEliminatedCandidates_closure0, Player, PluralityBallot, PluralityElection, PluralityElection_PluralityElection_closure, PluralityElection_PluralityElection_closure0, PluralityElection_PluralityElection_closure1, PluralityElection_PluralityElection__closure, PluralityElection_PluralityElection_closure2, PluralityElectionPlace, RankedBallot, CalcEngine, CalcEngine_closure, _voterHexIsolate_closure, VoteDemo, VoteDemo$_internal_closure, VoteDemo$_internal_closure0, VoteDemo$_internal_closure1, VoteDemo$_internal_closure2, VoteDemo$_internal_closure3, CandidateManagerView, CandidateManagerView__removeCandidateWithId_closure, CondorcetView, CondorcetView_updateElement_closure, CondorcetView__updateCellHoverStyle_closure, CondorcetView__updateCellHoverStyle_closure0, CondorcetView__getPair_closure, DistanceView, IrvView, IrvView_updateElement_closure, PluralityView, DistanceBallot, DistanceBallot_DistanceBallot_closure, DistanceBallot_DistanceBallot_closure0, DistanceElection, DistanceElection_DistanceElection_closure, DistanceElection_DistanceElection_closure0, DistanceElection_DistanceElection_closure1, DistanceElection_DistanceElection_closure2, DistanceElectionPlace, LocationData, LocationData_LocationData$random_closure, LocationData_LocationData$random_closure0, LocationData_cloneAndRemove_closure, MapPlayer, CandidateElement, CandidateMapElement, RootMapElement, RootMapElement_dragCandidate_closure, RootMapElement_update_closure, VoterMapElement, Closure$2, Closure$1, Closure$0, Closure$7, Closure$20, Closure$4];
}
