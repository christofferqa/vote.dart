// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.Creates = {"": ["types"],
 "super": "Object"
};

$$.Returns = {"": ["types"],
 "super": "Object"
};

$$.ConstantMap = {"": ["length>", "_jsObject", "_liblib0$_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(f, this));
},
 get$keys: function() {
  return this._liblib0$_keys;
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_values_anon(result, this));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot modify unmodifiable Map'));
},
 oprator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 putIfAbsent$2: function(key, ifAbsent) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag>", "_tags", "_liblib0$_set>"],
 "super": "Object",
 _liblib0$_set$2: function(arg0, arg1) { return this._liblib0$_set.call$2(arg0, arg1); }
};

$$.JSSyntaxRegExp = {"": ["_liblib0$_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.index(m, 0);
  t1 = $.getInterceptor(t1).get$length(t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern>", "str", "start", "end", "_groups"],
 "super": "Object",
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {"": ["_re", "_str", "_liblib0$_next=", "_done"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var next = this._liblib0$_next;
  this._liblib0$_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib0$_next == null))
    return true;
  this._liblib0$_next = this._re.firstMatch$1(this._str);
  if (this._liblib0$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.StringMatch = {"": ["start", "str", "pattern>"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
}
};

$$.NullThrownError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Throw of null.';
}
};

$$.ArgumentError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  if (!(this.get$message() == null))
    return 'Illegal argument(s): ' + $.S(this.get$message());
  return 'Illegal argument(s)';
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'RangeError: ' + $.S(this.message);
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ', ');
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_1;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ', ');
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_1;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.Error_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer('');
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.getInterceptor(t2).get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ', ');
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._memberName) + '\'\n' + 'Receiver: ' + $.S($.Error_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(t1.sb_1) + ']';
      else {
        t3 = t1.sb_1;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_1 = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.getInterceptor(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ', ');
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_1;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.Error_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: ' + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? 'UnimplementedError: ' + $.S(t1) : 'UnimplementedError';
}
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: ' + this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return 'Exception';
  return 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.Function = {"": [],
 "super": "Object"
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace>"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.getInterceptor(t1).replaceAll$2(t1, '\n', '\n  ')) + '\n' + 'original stack trace:\n  ';
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor(t3).replaceAll$2(t3, '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$exception: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._exception;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  var t1;
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    t1 = this._successListeners;
    $.getInterceptor(t1).add$1(t1, onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else {
    t1 = this._exceptionHandlers;
    $.getInterceptor(t1).add$1(t1, onException);
  }
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = this._exceptionHandlers, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = this._successListeners, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = this._completionListeners, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.List = {"": [],
 "super": "Object",
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC8)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  hash = $.and(t1, this._keys.length - 1);
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC8)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  hash = $.and($.getInterceptor(key).get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t1, t2, i, key, value, newIndex, t3;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $._ListImpl_List(newCapacity);
  this._values = $._ListImpl_List(newCapacity);
  for (t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC8)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 oprator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC8)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 putIfAbsent$2: function(key, ifAbsent) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.putIfAbsent$2$bailout(1, key, ifAbsent, index);
  if (index >= 0) {
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
  value = ifAbsent.call$0();
  this.oprator$indexSet$2(key, value);
  return value;
},
 putIfAbsent$2$bailout: function(state0, key, ifAbsent, index) {
  var t1, value;
  if ($.geB(index, 0)) {
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
  value = ifAbsent.call$0();
  this.oprator$indexSet$2(key, value);
  return value;
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC8;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC8)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_10 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(list, t1));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_1 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $._ListImpl_List(8);
  this._values = $._ListImpl_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$._KeyValuePair = {"": ["key>", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 oprator$indexSet$2: function(key, value) {
  var t1;
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    t1 = this._list;
    $.getInterceptor(t1).addLast$1(t1, $._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 putIfAbsent$2: function(key, ifAbsent) {
  var value = this.operator$index$1(key);
  if (this.operator$index$1(key) == null && this._map.containsKey$1(key) !== true) {
    value = ifAbsent.call$0();
    this.oprator$indexSet$2(key, value);
  }
  return value;
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_10 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_1 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  var t1 = this._list;
  $.getInterceptor(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._list;
  $.getInterceptor(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous<", "_next=", "_element>"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$first: function() {
  return this._sentinel._next.get$element();
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 last$0: function() { return this.get$last().call$0(); },
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 every$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) !== true)
      return false;
  }
  return true;
},
 map$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    $.getInterceptor(other).addLast$1(other, f.call$1(entry.get$_element()));
  }
  return other;
},
 filter$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      $.getInterceptor(other).addLast$1(other, entry.get$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.SequenceIterator = {"": ["_sequence", "_position"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._position;
  t2 = this._sequence;
  return $.lt(t1, $.getInterceptor(t2).get$length(t2));
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() === true) {
    t1 = this._sequence;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.next$0$bailout0(1, t1);
    t3 = this._position;
    this._position = t3 + 1;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  }
  throw $.$$throw($.StateError$('No more elements'));
},
 next$0$bailout0: function(state0, env0) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      var t1, t3;
      if (state0 === 1 || state0 === 0 && this.get$hasNext() === true)
        switch (state0) {
          case 0:
            t1 = this._sequence;
          case 1:
            state0 = 0;
            t3 = this._position;
            this._position = t3 + 1;
            return $.index(t1, t3);
        }
      throw $.$$throw($.StateError$('No more elements'));
  }
}
};

$$._HashSetImpl = {"": ["_backingMap>"],
 "super": "Object",
 clear$0: function() {
  var t1 = this._backingMap;
  $.getInterceptor(t1).clear$0(t1);
},
 add$1: function(value) {
  this._backingMap.oprator$indexSet$2(value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, new $._HashSetImpl_addAll_anon(this));
},
 forEach$1: function(f) {
  var t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_forEach_anon(f));
},
 map$1: function(f) {
  var result, t1;
  result = $.Set_Set();
  t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_map_anon(f, result));
  return result;
},
 filter$1: function(f) {
  var result, t1;
  result = $.Set_Set();
  t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_filter_anon(f, result));
  return result;
},
 every$1: function(f) {
  var keys = this._backingMap.get$keys();
  return $.getInterceptor(keys).every$1(keys, f);
},
 get$isEmpty: function() {
  var t1 = this._backingMap;
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._backingMap;
  return $.getInterceptor(t1).get$length(t1);
},
 iterator$0: function() {
  return $._HashSetIterator$(this);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$();
},
 is$Collection: function() { return true; }
};

$$._HashSetIterator = {"": ["_entries", "_nextValidIndex"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = t2.length;
  if (t1 >= t3)
    return false;
  if (t1 < 0)
    throw $.ioore(t1);
  if (t2[t1] === $.CTC8)
    this._advance$0();
  return this._nextValidIndex < t3;
},
 next$0: function() {
  var t1, t2, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._entries;
  t2 = this._nextValidIndex;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  res = t1[t2];
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, length$, t2, entry;
  t1 = this._entries;
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= length$)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CTC8);
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$.String = {"": [],
 "super": "Object",
 is$String: true
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.getInterceptor(objects).iterator$0(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $._ListImpl_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor(t1).get$length(t1), 0))
    return '';
  t1 = this._buffer;
  if ($.eqB($.getInterceptor(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), '');
  t1 = this._buffer;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {"": [],
 "super": "Object",
 toString$0: function(receiver) { return receiver.toString$0(); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 iterator$0: function(receiver) { return receiver.iterator$0(); },
 set$length: function(receiver) { return receiver.set$length(); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 indexOf$2: function(receiver, a0, a1) { return receiver.indexOf$2(a0, a1); },
 insertRange$3: function(receiver, a0, a1, a2) { return receiver.insertRange$3(a0, a1, a2); },
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 indexOf$1: function(receiver, a0) { return receiver.indexOf$1(a0); },
 contains$2: function(receiver, a0, a1) { return receiver.contains$2(a0, a1); },
 first$0: function(receiver) { return receiver.first$0(); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 substring$2: function(receiver, a0, a1) { return receiver.substring$2(a0, a1); },
 get$length: function(receiver) { return receiver.get$length(); },
 contains$1: function(receiver, a0) { return receiver.contains$1(a0); },
 removeRange$2: function(receiver, a0, a1) { return receiver.removeRange$2(a0, a1); },
 floor$0: function(receiver) { return receiver.floor$0(); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 get$isNegative: function(receiver) { return receiver.get$isNegative(); },
 sort$1: function(receiver, a0) { return receiver.sort$1(a0); },
 lastIndexOf$2: function(receiver, a0, a1) { return receiver.lastIndexOf$2(a0, a1); },
 get$hashCode: function(receiver) { return receiver.get$hashCode(); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 getRange$2: function(receiver, a0, a1) { return receiver.getRange$2(a0, a1); },
 ceil$0: function(receiver) { return receiver.ceil$0(); },
 concat$1: function(receiver, a0) { return receiver.concat$1(a0); },
 toInt$0: function(receiver) { return receiver.toInt$0(); },
 lastIndexOf$1: function(receiver, a0) { return receiver.lastIndexOf$1(a0); },
 get$isInfinite: function(receiver) { return receiver.get$isInfinite(); },
 allMatches$1: function(receiver, a0) { return receiver.allMatches$1(a0); },
 round$0: function(receiver) { return receiver.round$0(); },
 split$1: function(receiver, a0) { return receiver.split$1(a0); },
 get$isEmpty: function(receiver) { return receiver.get$isEmpty(); },
 toStringAsFixed$1: function(receiver, a0) { return receiver.toStringAsFixed$1(a0); },
 truncate$0: function(receiver) { return receiver.truncate$0(); },
 filter$1: function(receiver, a0) { return receiver.filter$1(a0); },
 compareTo$1: function(receiver, a0) { return receiver.compareTo$1(a0); },
 trim$0: function(receiver) { return receiver.trim$0(); },
 every$1: function(receiver, a0) { return receiver.every$1(a0); },
 map$1: function(receiver, a0) { return receiver.map$1(a0); },
 get$isNaN: function(receiver) { return receiver.get$isNaN(); },
 toRadixString$1: function(receiver, a0) { return receiver.toRadixString$1(a0); },
 get$last: function(receiver) { return receiver.get$last(); },
 addAll$1: function(receiver, a0) { return receiver.addAll$1(a0); },
 startsWith$1: function(receiver, a0) { return receiver.startsWith$1(a0); }
};

$$.JSFunction = {"": [],
 "super": "Object",
 toString$0: function(receiver) {
  return 'Closure';
}
};

$$.JSBool = {"": [],
 "super": "Object",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 1077375012 : 3247177846;
},
 is$bool: true
};

$$.JSNull = {"": [],
 "super": "Object",
 toString$0: function(receiver) {
  return 'null';
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {"": [],
 "super": "Object",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, 'add');
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, 'removeLast');
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(receiver).add$1(receiver, t2);
  }
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 map$1: function(receiver, f) {
  return $.Collections_map(receiver, [], f);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if (end > receiver.length)
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 insertRange$3: function(receiver, start, length$, initialValue) {
  return $.listInsertRange(receiver, start, length$, initialValue);
},
 get$last: function(receiver) {
  var t1, t2;
  t1 = receiver.length;
  t2 = t1 - 1;
  if (t2 < 0)
    throw $.ioore(t2);
  return receiver[t2];
},
 last$0: function() { return this.get$last().call$0(); },
 get$first: function(receiver) {
  if (0 >= receiver.length)
    throw $.ioore(0);
  return receiver[0];
},
 first$0: function() { return this.get$first().call$0(); },
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  if (typeof length$ !== 'number')
    return this.removeRange$2$bailout(1, start, length$, receiver);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.getInterceptor(receiver).set$length(receiver, t2);
},
 removeRange$2$bailout: function(state0, start, length$, receiver) {
  var receiverLength, t1, t2;
  $.checkGrowable(receiver, 'removeRange');
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.getInterceptor(receiver).set$length(receiver, t2);
},
 every$1: function(receiver, f) {
  return $.Collections_every(receiver, f);
},
 sort$1: function(receiver, compare) {
  $.checkMutable(receiver, 'sort');
  $.coreSort(receiver, compare);
},
 indexOf$2: function(receiver, element, start) {
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 indexOf$1: function($,element) {
  return this.indexOf$2($,element,0)
},
 lastIndexOf$2: function(receiver, element, start) {
  if (start == null)
    start = receiver.length - 1;
  return $.Arrays_lastIndexOf(receiver, element, start);
},
 lastIndexOf$1: function($,element) {
  return this.lastIndexOf$2($,element,null)
},
 contains$1: function(receiver, other) {
  var i;
  for (i = 0; i < receiver.length; ++i)
    if ($.eqB(other, receiver[i]))
      return true;
  return false;
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver.get$receiver());
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, 'set length');
  receiver.length = newLength;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {"": [],
 "super": "Object",
 compareTo$1: function(receiver, b) {
  var bIsNegative;
  if (!(typeof b === 'number'))
    throw $.$$throw($.ArgumentError$(b));
  if (receiver < b)
    return -1;
  else if (receiver > b)
    return 1;
  else if (receiver === b) {
    if (receiver === 0) {
      bIsNegative = $.getInterceptor(b).get$isNegative(b);
      if ($.eqB(this.get$isNegative(receiver), bIsNegative))
        return 0;
      if (this.get$isNegative(receiver) === true)
        return -1;
      return 1;
    }
    return 0;
  } else if (this.get$isNaN(receiver) === true) {
    if ($.getInterceptor(b).get$isNaN(b) === true)
      return 0;
    return 1;
  } else
    return -1;
},
 get$isNegative: function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
},
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 toInt$0: function(receiver) {
  var truncated;
  if (this.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if (this.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  truncated = this.truncate$0(receiver);
  return truncated == -0.0 ? 0 : truncated;
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 get$isInfinite: function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
},
 round$0: function(receiver) {
  if (receiver < 0)
    return -Math.round(-receiver);
  else
    return Math.round(receiver);
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toStringAsFixed$1: function(receiver, fractionDigits) {
  var result;
  $.checkNum(fractionDigits);
  result = receiver.toFixed(fractionDigits);
  if (receiver === 0 && this.get$isNegative(receiver) === true)
    return '-' + result;
  return result;
},
 toRadixString$1: function(receiver, radix) {
  $.checkNum(radix);
  if ($.ltB(radix, 2) || $.gtB(radix, 36))
    throw $.$$throw($.ArgumentError$(radix));
  return receiver.toString(radix);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return '-0.0';
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {"": [],
 "super": "JSNumber"
};

$$.JSDouble = {"": [],
 "super": "JSNumber"
};

$$.JSString = {"": [],
 "super": "Object",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 concat$1: function(receiver, other) {
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  return receiver + other;
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = $.getInterceptor(other).get$length(other);
  t1 = receiver.length;
  if ($.gtB(otherLength, t1))
    return false;
  if (typeof otherLength !== 'number')
    throw $.iae(otherLength);
  return $.eq(other, this.substring$1(receiver, t1 - otherLength));
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 split$1: function(receiver, pattern) {
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
},
 startsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = $.getInterceptor(other).get$length(other);
  if ($.gtB(otherLength, receiver.length))
    return false;
  return other == receiver.substring(0, otherLength);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($,startIndex) {
  return this.substring$2($,startIndex,null)
},
 trim$0: function(receiver) {
  return receiver.trim();
},
 indexOf$2: function(receiver, other, start) {
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 indexOf$1: function($,other) {
  return this.indexOf$2($,other,0)
},
 lastIndexOf$2: function(receiver, other, start) {
  var t1;
  $.checkNull(other);
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (!(start == null)) {
    if (!(typeof start === 'number'))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0)
      return -1;
    t1 = receiver.length;
    if (start >= t1) {
      if (other === '')
        return t1;
      start = t1 - 1;
    } else
      start = start;
  } else
    start = receiver.length - 1;
  return $.stringLastIndexOfUnchecked(receiver, other, start);
},
 lastIndexOf$1: function($,other) {
  return this.lastIndexOf$2($,other,null)
},
 contains$2: function(receiver, other, startIndex) {
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
},
 contains$1: function($,other) {
  return this.contains$2($,other,0)
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 compareTo$1: function(receiver, other) {
  var t1;
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (receiver === other)
    t1 = 0;
  else
    t1 = receiver < other ? -1 : 1;
  return t1;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var i, hash, hash0, hash1;
  for (i = 0, hash = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + (524287 & hash0) << 10;
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + (67108863 & hash) << 3;
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + (16383 & hash0) << 15;
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$.VoteDemo = {"": ["_canvas", "_stage", "_dragger", "_calcEngine>", "_rootMapElement", "_playerHues", "_condorcetView>", "_irvView>", "_distanceView", "_pluralityView", "_canManView", "_candidateHues", "_mouseLocation", "_overCandidate", "_dragCandidate", "_frameRequested"],
 "super": "Object",
 _updateHighlightCandidates$1: function(candidates) {
  this._calcEngine.set$hoverPair(candidates);
  this._rootMapElement.set$showOnlyPlayers(candidates);
},
 _locationDataUpdated$1: function(args) {
  var locData, t1;
  locData = this._calcEngine.get$locationData();
  this._rootMapElement.set$locationData(locData);
  t1 = locData.get$candidates();
  this._canManView.set$candidates(t1);
},
 get$_locationDataUpdated: function() { return new $.BoundClosure(this, '_locationDataUpdated$1'); },
 _distanceElectionUpdated$1: function(args) {
  var t1 = this._calcEngine.get$distanceElection();
  this._distanceView.set$election(t1);
  this._requestFrame$0();
},
 get$_distanceElectionUpdated: function() { return new $.BoundClosure(this, '_distanceElectionUpdated$1'); },
 _pluralityElectionUpdated$1: function(args) {
  var t1 = this._calcEngine.get$pluralityElection();
  this._pluralityView.set$election(t1);
  this._requestFrame$0();
},
 get$_pluralityElectionUpdated: function() { return new $.BoundClosure(this, '_pluralityElectionUpdated$1'); },
 _condorcetElectionUpdated$1: function(args) {
  var t1 = this._calcEngine.get$condorcetElection();
  this._condorcetView.set$election(t1);
  this._requestFrame$0();
},
 get$_condorcetElectionUpdated: function() { return new $.BoundClosure(this, '_condorcetElectionUpdated$1'); },
 _irvElectionUpdated$1: function(args) {
  var t1 = this._calcEngine.get$irvElection();
  this._irvView.set$election(t1);
  this._requestFrame$0();
},
 get$_irvElectionUpdated: function() { return new $.BoundClosure(this, '_irvElectionUpdated$1'); },
 _voterHexMapperUpdated$1: function(args) {
  var t1 = this._calcEngine.get$voterHexMap();
  this._rootMapElement.set$voterHexMap(t1);
  this._requestFrame$0();
},
 get$_voterHexMapperUpdated: function() { return new $.BoundClosure(this, '_voterHexMapperUpdated$1'); },
 _requestFrame$0: function() {
  if (!this._frameRequested) {
    this._frameRequested = true;
    $.window().requestAnimationFrame$1(this.get$_onFrame());
  }
},
 _onDrag$1: function(delta) {
  this._rootMapElement.dragCandidate$2(this._dragCandidate, delta);
  this._requestFrame$0();
},
 get$_onDrag: function() { return new $.BoundClosure(this, '_onDrag$1'); },
 _onDragStart$1: function(e) {
  var t1 = this._overCandidate;
  if (t1 == null)
    e.cancel$0();
  else
    this._dragCandidate = t1;
},
 get$_onDragStart: function() { return new $.BoundClosure(this, '_onDragStart$1'); },
 _onFrame$1: function(highResTime) {
  this._stage.draw$0();
  this._condorcetView.draw$0();
  this._irvView.draw$0();
  this._pluralityView.draw$0();
  this._distanceView.draw$0();
  this._canManView.draw$0();
  this._frameRequested = false;
},
 get$_onFrame: function() { return new $.BoundClosure(this, '_onFrame$1'); },
 _canvas_mouseMove$1: function(e) {
  this._setMouse$1($.getMouseEventCoordinate(e));
},
 get$_canvas_mouseMove: function() { return new $.BoundClosure(this, '_canvas_mouseMove$1'); },
 _canvas_mouseOut$1: function(e) {
  this._setMouse$1(null);
},
 get$_canvas_mouseOut: function() { return new $.BoundClosure(this, '_canvas_mouseOut$1'); },
 _setMouse$1: function(value) {
  var hits, t1, t2;
  this._mouseLocation = value;
  hits = $.Mouse_markMouseOver(this._stage, this._mouseLocation);
  if (!(hits == null))
    if ($.gtB($.getInterceptor(hits).get$length(hits), 0)) {
      t1 = $.index(hits, 0);
      t1 = typeof t1 === 'object' && t1 !== null && !!t1.is$CandidateElement;
    } else
      t1 = false;
  else
    t1 = false;
  if (t1) {
    this._canvas.get$style().set$cursor('pointer');
    this._overCandidate = $.index(hits, 0).get$player();
  } else
    this._overCandidate = null;
  t1 = !(this._overCandidate == null) || !(this._dragCandidate == null);
  t2 = this._canvas;
  if (t1)
    t2.get$style().set$cursor('pointer');
  else
    t2.get$style().set$cursor('auto');
},
 VoteDemo$_internal$9: function(_canvas, _stage, _dragger, _rootMapElement, _condorcetView, _pluralityView, _distanceView, _canManView, _irvView) {
  var t1, t2, t3, t4;
  t1 = this._dragger;
  t2 = t1.get$dragDelta();
  $.getInterceptor(t2).add$1(t2, this.get$_onDrag());
  t1 = t1.get$dragStart();
  $.getInterceptor(t1).add$1(t1, this.get$_onDragStart());
  t1 = this._canvas;
  t2 = t1.get$on().get$mouseMove();
  $.getInterceptor(t2).add$1(t2, this.get$_canvas_mouseMove());
  t2 = t1.get$on().get$mouseOut();
  $.getInterceptor(t2).add$1(t2, this.get$_canvas_mouseOut());
  t2 = this._calcEngine;
  t3 = t2.get$locationDataChanged();
  $.getInterceptor(t3).add$1(t3, this.get$_locationDataUpdated());
  t3 = t2.get$distanceElectionChanged();
  $.getInterceptor(t3).add$1(t3, this.get$_distanceElectionUpdated());
  t3 = t2.get$pluralityElectionChanged();
  $.getInterceptor(t3).add$1(t3, this.get$_pluralityElectionUpdated());
  t3 = t2.get$condorcetElectionChanged();
  $.getInterceptor(t3).add$1(t3, this.get$_condorcetElectionUpdated());
  t3 = t2.get$irvElectionChanged();
  $.getInterceptor(t3).add$1(t3, this.get$_irvElectionUpdated());
  t3 = t2.get$voterHueMapperChanged();
  $.getInterceptor(t3).add$1(t3, this.get$_voterHexMapperUpdated());
  t3 = this._rootMapElement.get$candidatesMoved();
  $.getInterceptor(t3).add$1(t3, new $.anon5(this));
  t3 = this._stage.get$invalidated();
  $.getInterceptor(t3).add$1(t3, new $.anon6(this));
  t3 = this._canManView;
  t4 = t3.get$candidateRemoveRequest();
  $.getInterceptor(t4).add$1(t4, new $.anon7(this));
  t3 = t3.get$newCandidateRequest();
  $.getInterceptor(t3).add$1(t3, new $.anon8(this));
  t3 = this._condorcetView.get$hoverChanged();
  $.getInterceptor(t3).add$1(t3, new $.anon9(this));
  t3 = this._irvView.get$hoverChanged();
  $.getInterceptor(t3).add$1(t3, new $.anon10(this));
  t2.set$locationData($.LocationData_LocationData$random());
}
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$blur: function() {
  return this.operator$index$1('blur');
}
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$blur: function() {
  return this.operator$index$1('blur');
},
 get$click: function() {
  return this.operator$index$1('click');
},
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._FrozenCssClassSet = {"": [],
 "super": "CssClassSet",
 writeClasses$1: function(s) {
  throw $.$$throw($.UnsupportedError$('frozen class set cannot be modified'));
},
 readClasses$0: function() {
  return $.Set_Set();
}
};

$$._ChildrenElementList = {"": ["_liblib$_element>", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1, t3, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = t1.length;
  output = $._ListImpl_List(t3);
  len = t1.length;
  i = 0;
  for (; i < len; ++i) {
    t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      output = env2;
      len = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._childElements;
    case 1:
      state0 = 0;
      output = $._ListImpl_List($.getInterceptor(t1).get$length(t1));
      len = $.getInterceptor(t1).get$length(t1);
    case 2:
      var t1, output, len, i, t2;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t2 = $.index(t1, i);
        if (i >= output.length)
          throw $.ioore(i);
        output[i] = t2;
      }
      return output;
  }
},
 contains$1: function(element) {
  var t1 = this._childElements;
  return $.getInterceptor(t1).contains$1(t1, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this._childElements, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(output, f);
  for (t2 = this._childElements, t2 = $.getInterceptor(t2).iterator$0(t2); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 every$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 map$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(out).add$1(out, f.call$1(t2));
  }
  return out;
},
 get$isEmpty: function() {
  return this._liblib$_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  var t1 = this._childElements;
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 oprator$indexSet$2: function(index, value) {
  this._liblib$_element.$$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 add$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  var t1 = this._toList$0();
  return $.getInterceptor(t1).iterator$0(t1);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection), t2 = this._liblib$_element; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('TODO(jacobr): should we impl?'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 clear$0: function() {
  this._liblib$_element.set$text('');
},
 removeLast$0: function() {
  var result = $.getInterceptor(this).get$last(this);
  if (!(result == null))
    this._liblib$_element.$$dom_removeChild$1(result);
  return result;
},
 get$first: function() {
  return this._liblib$_element.get$$$dom_firstElementChild();
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this._liblib$_element.get$$$dom_lastElementChild();
},
 last$0: function() { return this.get$last().call$0(); },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 contains$1: function(element) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(out).add$1(out, f.call$1(t2));
  }
  return out;
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(out).add$1(out, t2);
  }
  return out;
},
 every$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 get$isEmpty: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 set$length: function(newLength) {
  var t1 = this._nodeList;
  $.getInterceptor(t1).set$length(t1, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(''));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$(''));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).lastIndexOf$2(t1, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 get$first: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$first(t1);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$last(t1);
},
 last$0: function() { return this.get$last().call$0(); },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_liblib$_list", "_liblib$_index"],
 "super": "Object",
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._liblib$_list;
  t2 = this._liblib$_index;
  this._liblib$_index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  var t1, t2;
  t1 = this._liblib$_index;
  t2 = this._liblib$_list;
  return $.lt(t1, $.getInterceptor(t2).get$length(t2));
}
};

$$._ElementAttributeMap = {"": ["_liblib$_element>"],
 "super": "Object",
 containsKey$1: function(key) {
  return this._liblib$_element.$$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._liblib$_element.$$dom_getAttribute$1(key);
},
 oprator$indexSet$2: function(key, value) {
  this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
},
 putIfAbsent$2: function(key, ifAbsent) {
  if (this._liblib$_element.$$dom_hasAttribute$1(key) !== true)
    this.oprator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  var t1, value;
  t1 = this._liblib$_element;
  value = t1.$$dom_getAttribute$1(key);
  t1.$$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes, i;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  i = attributes.length - 1;
  for (; i >= 0; --i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      attributes = env1;
      i = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      i = $.sub($.getInterceptor(attributes).get$length(attributes), 1);
    case 2:
      var attributes, i;
      state0 = 0;
      for (; $.geB(i, 0); i = $.sub(i, 1))
        this.remove$1($.index(attributes, i).get$name());
  }
},
 forEach$1: function(f) {
  var attributes, len, i, item;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env1;
      f = env0;
      break;
    case 2:
      attributes = env2;
      len = env1;
      f = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, f, len, i, item;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        item = $.index(attributes, i);
        f.call$2(item.get$name(), item.get$value());
      }
  }
},
 get$keys: function() {
  var attributes, t2, keys, len, i, t1;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  t2 = attributes.length;
  keys = $._ListImpl_List(t2);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    t1 = attributes[i].get$name();
    if (i >= t2)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$keys$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      keys = env2;
      len = env1;
      attributes = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      keys = $._ListImpl_List($.getInterceptor(attributes).get$length(attributes));
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, keys, len, i, t1;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t1 = $.index(attributes, i).get$name();
        if (i >= keys.length)
          throw $.ioore(i);
        keys[i] = t1;
      }
      return keys;
  }
},
 get$values: function() {
  var attributes, t2, values, len, i, t1;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  t2 = attributes.length;
  values = $._ListImpl_List(t2);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    t1 = attributes[i].get$value();
    if (i >= t2)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$values$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      values = env2;
      len = env1;
      attributes = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      values = $._ListImpl_List($.getInterceptor(attributes).get$length(attributes));
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, values, len, i, t1;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t1 = $.index(attributes, i).get$value();
        if (i >= values.length)
          throw $.ioore(i);
        values[i] = t1;
      }
      return values;
  }
},
 get$length: function() {
  var t1 = this._liblib$_element.get$$$dom_attributes();
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 is$Map: function() { return true; }
};

$$._DataAttributeMap = {"": ["$$dom_attributes"],
 "super": "Object",
 containsKey$1: function(key) {
  return this.$$dom_attributes.containsKey$1('data-' + $.S(key));
},
 operator$index$1: function(key) {
  return $.index(this.$$dom_attributes, 'data-' + $.S(key));
},
 oprator$indexSet$2: function(key, value) {
  $.indexSet(this.$$dom_attributes, 'data-' + $.S(key), $.S(value));
},
 putIfAbsent$2: function(key, ifAbsent) {
  return this.$$dom_attributes.putIfAbsent$2('data-' + $.S(key), ifAbsent);
},
 remove$1: function(key) {
  return this.$$dom_attributes.remove$1('data-' + $.S(key));
},
 clear$0: function() {
  var t1, t2;
  for (t1 = this.get$keys(), t1 = $.getInterceptor(t1).iterator$0(t1), t2 = this.$$dom_attributes; t1.get$hasNext() === true;)
    t2.remove$1('data-' + $.S(t1.next$0()));
},
 forEach$1: function(f) {
  var t1 = this.$$dom_attributes;
  $.getInterceptor(t1).forEach$1(t1, new $._DataAttributeMap_forEach_anon(this, f));
},
 get$keys: function() {
  var keys, t1;
  keys = $._ListImpl_List(null);
  t1 = this.$$dom_attributes;
  $.getInterceptor(t1).forEach$1(t1, new $._DataAttributeMap_keys_anon(this, keys));
  return keys;
},
 get$values: function() {
  var values, t1;
  values = $._ListImpl_List(null);
  t1 = this.$$dom_attributes;
  $.getInterceptor(t1).forEach$1(t1, new $._DataAttributeMap_values_anon(values, this));
  return values;
},
 get$length: function() {
  var t1 = this.get$keys();
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 is$Map: function() { return true; }
};

$$._ElementCssClassSet = {"": ["_liblib$_element>"],
 "super": "CssClassSet",
 readClasses$0: function() {
  var s, classname, t1, t2, trimmed;
  s = $.Set_Set();
  classname = this._liblib$_element.get$$$dom_className();
  for (t1 = $.getInterceptor(classname).split$1(classname, ' '), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    trimmed = $.getInterceptor(t2).trim$0(t2);
    if ($.getInterceptor(trimmed).get$isEmpty(trimmed) !== true)
      $.getInterceptor(s).add$1(s, trimmed);
  }
  return s;
},
 writeClasses$1: function(s) {
  var t1 = $.Strings_join($._ListImpl_List$from(s), ' ');
  this._liblib$_element.set$$$dom_className(t1);
}
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$blur: function() {
  return this.operator$index$1('blur');
},
 get$click: function() {
  return this.operator$index$1('click');
},
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$blur: function() {
  return this.operator$index$1('blur');
}
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$blur: function() {
  return this.operator$index$1('blur');
},
 get$click: function() {
  return this.operator$index$1('click');
},
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events"
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 get$first: function() {
  return this._this.firstChild;
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this._this.lastChild;
},
 last$0: function() { return this.get$last().call$0(); },
 add$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 oprator$indexSet$2: function(index, value) {
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  var t1 = this._this.get$$$dom_childNodes();
  return $.getInterceptor(t1).iterator$0(t1);
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 get$length: function() {
  var t1 = this._this.get$$$dom_childNodes();
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events"
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents"
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.CssClassSet = {"": [],
 "super": "Object",
 toString$0: function() {
  return $.Strings_join($._ListImpl_List$from(this.readClasses$0()), ' ');
},
 iterator$0: function() {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).iterator$0(t1);
},
 forEach$1: function(f) {
  var t1 = this.readClasses$0();
  $.getInterceptor(t1).forEach$1(t1, f);
},
 map$1: function(f) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).map$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).filter$1(t1, f);
},
 every$1: function(f) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).every$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).get$length(t1);
},
 contains$1: function(value) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).contains$1(t1, value);
},
 add$1: function(value) {
  this._modify$1(new $.CssClassSet_add_anon(value));
},
 remove$1: function(value) {
  var s, result;
  s = this.readClasses$0();
  result = s.remove$1(value);
  this.writeClasses$1(s);
  return result;
},
 addAll$1: function(collection) {
  this._modify$1(new $.CssClassSet_addAll_anon(collection));
},
 clear$0: function() {
  this._modify$1(new $.CssClassSet_clear_anon());
},
 _modify$1: function(f) {
  var s = this.readClasses$0();
  f.call$1(s);
  this.writeClasses$1(s);
},
 is$Collection: function() { return true; }
};

$$.FilteredElementList = {"": ["_liblib$_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  var t1 = this._childNodes;
  return $._ListImpl_List$from($.getInterceptor(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  var t1 = this.get$_filtered();
  $.getInterceptor(t1).forEach$1(t1, f);
},
 oprator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.getInterceptor(this).get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$('Invalid list length'));
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 get$add: function() { return new $.BoundClosure(this, 'add$1'); },
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 contains$1: function(element) {
  var t1, t2;
  if (typeof element === 'object' && element !== null && element.is$Element()) {
    t1 = this._childNodes;
    t2 = $.getInterceptor(t1).contains$1(t1, element) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('TODO(jacobr): should we impl?'));
},
 removeRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  t1 = $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnimplementedError$(null));
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.getInterceptor(this).get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).map$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).filter$1(t1, f);
},
 every$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).every$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).iterator$0(t1);
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
},
 indexOf$2: function(element, start) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  var t1;
  if (start == null)
    start = $.sub(this.get$length(), 1);
  t1 = this.get$_filtered();
  return $.getInterceptor(t1).lastIndexOf$2(t1, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$first(t1);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$last(t1);
},
 last$0: function() { return this.get$last().call$0(); },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 get$location: function() {
  return $._LocationCrossFrame__createSafe(this._window.location);
},
 get$top: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.top);
},
 close$0: function() {
  return this._window.close();
}
};

$$._LocationCrossFrame = {"": ["_location="],
 "super": "Object",
 is$Location: function() { return true; }
};

$$._LocationWrapper = {"": ["_ptr"],
 "super": "Object",
 toString$0: function() {
  return this._ptr.toString();
},
 is$_LocationWrapper: true,
 is$Location: function() { return true; }
};

$$.FixedSizeListIterator = {"": ["_liblib$_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._liblib$_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId=", "nextManagerId=", "currentContext=", "rootContext=", "topEventLoop>", "fromCommandLine>", "isWorker>", "supportsWorkers", "isolates>", "mainManager>", "managers>"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id=", "ports>", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($.Exception_Exception('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$, t1, t2;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null))
        if ($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true)
          if ($._globalState().get$fromCommandLine() === true) {
            t1 = $._globalState().get$rootContext().get$ports();
            t2 = $.getInterceptor(t1).get$isEmpty(t1) === true;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        throw $.$$throw($.Exception_Exception('Program exited with open ReceivePorts.'));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  throw $.$$throw($.UnimplementedError$(null));
},
 set$onmessage: function(f) {
  throw $.$$throw($.Exception_Exception('onmessage should not be set on MainManagerStub'));
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
},
 terminate$0: function() {
}
};

$$._BaseSendPort = {"": ["_isolateId>"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.Exception_Exception('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort>", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, replyTo, message));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId>", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(message, this, replyTo));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._BufferingSendPort = {"": ["_id>", "_port<", "_futurePort>", "pending=", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  var t1 = this._port;
  if (!(t1 == null))
    t1.send$2(message, replyTo);
  else {
    t1 = this.pending;
    $.getInterceptor(t1).add$1(t1, $.makeLiteralMap(['message', message, 'replyTo', replyTo]));
  }
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_BufferingSendPort && $.eqB(this._id, other._id);
},
 get$hashCode: function() {
  return this._id;
},
 _BufferingSendPort$2: function(isolateId, _futurePort) {
  $._BufferingSendPort__idCount = $.add($._BufferingSendPort__idCount, 1);
  this._futurePort.then$1(new $.anon(this));
},
 is$_BufferingSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_id>", "_callback>"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports>", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.getInterceptor(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  t1 = map.get$values();
  $.getInterceptor(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  var t1;
  if (!!port.is$_BufferingSendPort && port._port == null) {
    t1 = this.ports;
    $.getInterceptor(t1).add$1(t1, port.get$_futurePort());
  }
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ['sendport', x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 oprator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $._ListImpl_List(null);
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 oprator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  // HACK. Just sending the object over the wire.
  return x;
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      copy = $.index(this._visited, list);
      if (!(copy == null))
        return copy;
      len = $.getInterceptor(list).get$length(list);
    case 2:
      var list, copy, len, i, t1;
      state0 = 0;
      copy = $._ListImpl_List(len);
      $.indexSet(this._visited, list, copy);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
  }
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_10);
  $.getInterceptor(map).forEach$1(map, new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $._ListImpl_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      len = $.getInterceptor(list).get$length(list);
    case 2:
      var list, len, result, i, t1;
      state0 = 0;
      result = $._ListImpl_List(len);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t1;
      }
      return result;
  }
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      id = $.index(x, 1);
      dartList = $.index(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._deserialized, id, dartList);
      len = $.getInterceptor(dartList).get$length(dartList);
    case 2:
      var id, dartList, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
      return dartList;
  }
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env3;
      result = env2;
      len = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      state0 = 0;
      len = $.getInterceptor(keys).get$length(keys);
    case 3:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 cancel$0: function() {
  var t1, t2;
  t1 = this._once === true;
  t2 = $._window;
  if (t1)
    t2().clearTimeout$1(this._handle);
  else
    t2().clearInterval$1(this._handle);
},
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon1(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon0(this, callback), milliSeconds);
}
};

$$.Uri = {"": ["scheme", "userInfo", "domain", "port", "path", "query", "fragment"],
 "super": "Object",
 query$1: function(arg0) { return this.query.call$1(arg0); },
 isAbsolute$0: function() {
  if ('' === this.scheme)
    return false;
  if (!('' === this.fragment))
    return false;
  return true;
},
 toString$0: function() {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer('');
  t1 = this.scheme;
  $.Uri__addIfNonEmpty(sb, t1, t1, ':');
  t2 = this.userInfo;
  if (!$.eqB(t2, '') || !$.eqB(this.domain, '') || !$.eqB(this.port, 0) || $.eqB(t1, 'file')) {
    $.getInterceptor(sb).add$1(sb, '//');
    $.Uri__addIfNonEmpty(sb, t2, t2, '@');
    t1 = $.getInterceptor(sb);
    t2 = this.domain;
    t1.add$1(sb, t2 == null ? 'null' : t2);
    t1 = this.port;
    if (!$.eqB(t1, 0)) {
      $.getInterceptor(sb).add$1(sb, ':');
      $.getInterceptor(sb).add$1(sb, $.getInterceptor(t1).toString$0(t1));
    }
  }
  t1 = $.getInterceptor(sb);
  t2 = this.path;
  t1.add$1(sb, t2 == null ? 'null' : t2);
  t1 = this.query;
  $.Uri__addIfNonEmpty(sb, t1, '?', t1);
  t1 = this.fragment;
  $.Uri__addIfNonEmpty(sb, t1, '#', t1);
  return $.getInterceptor(sb).toString$0(sb);
}
};

$$._Random = {"": [],
 "super": "Object",
 nextDouble$0: function() {
  return Math.random();
},
 nextBool$0: function() {
  return Math.random() < 0.5;
}
};

$$.ElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$blur: function() {
  return this.operator$index$1('blur');
},
 get$click: function() {
  return this.operator$index$1('click');
},
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._AttributeClassSet = {"": ["_liblib7$_element>"],
 "super": "CssClassSet",
 readClasses$0: function() {
  var classname, s, t1, t2, trimmed;
  classname = $.index(this._liblib7$_element.get$attributes(), 'class');
  s = $.Set_Set();
  if (classname == null)
    return s;
  for (t1 = $.getInterceptor(classname).split$1(classname, ' '), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    trimmed = $.getInterceptor(t2).trim$0(t2);
    if ($.getInterceptor(trimmed).get$isEmpty(trimmed) !== true)
      $.getInterceptor(s).add$1(s, trimmed);
  }
  return s;
},
 writeClasses$1: function(s) {
  var list = $._ListImpl_List$from(s);
  $.indexSet(this._liblib7$_element.get$attributes(), 'class', $.Strings_join(list, ' '));
}
};

$$.Tuple = {"": ["item1>", "item2>"],
 "super": "Object",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.item1, other.get$item1()) && $.eqB(this.item2, other.get$item2());
},
 toString$0: function() {
  return '{item1: ' + $.S(this.item1) + ', item2: ' + $.S(this.item2) + '}';
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.item1, this.item2]);
}
};

$$.Tuple3 = {"": ["item3>", "item1", "item2"],
 "super": "Tuple",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.item1, other.get$item1()) && $.eqB(this.item2, other.get$item2()) && $.eqB(this.item3, other.get$item3());
},
 toString$0: function() {
  return '{item1: ' + $.S(this.item1) + ', item2: ' + $.S(this.item2) + ', item3: ' + $.S(this.item3) + '}';
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.item1, this.item2, this.item3]);
}
};

$$.Attachable = {"": ["name>"],
 "super": "Object"
};

$$.AttachableObject = {"": [],
 "super": "DisposableImpl",
 _set$2: function(key, value) {
  this.validateNotDisposed$0();
  $.indexSet(this._propertyValues, key, value);
  this._fireChange$1(key);
},
 get$_set: function() { return new $.BoundClosure1(this, '_set$2'); },
 _isSet$1: function(key) {
  this.validateNotDisposed$0();
  return this._propertyValues.containsKey$1(key);
},
 _remove$1: function(key) {
  this.validateNotDisposed$0();
  if (this._isSet$1(key) === true) {
    this._propertyValues.remove$1(key);
    this._fireChange$1(key);
  }
},
 _getValueOrUndefined$3: function(key, obj, ifAbsent) {
  var value;
  this.validateNotDisposed$0();
  if (this._isSet$1(key) === true)
    return $.index(this._propertyValues, key);
  else if (!(ifAbsent == null)) {
    value = ifAbsent.call$1(obj);
    this._set$2(key, value);
    return value;
  } else
    return $.CTC14;
},
 _fireChange$1: function(key) {
  var handle;
  this.validateNotDisposed$0();
  handle = $.index(this._eventHandlers, key);
  if (!(handle == null))
    handle.fireEvent$1(key);
}
};

$$.Property = {"": ["defaultValue", "name"],
 "super": "Attachable",
 get$2: function(obj, ifAbsent) {
  var coreValue = this.getCore$2(obj, ifAbsent);
  if (!(coreValue === $.CTC14))
    return coreValue;
  else
    return this.defaultValue;
},
 get$1: function(obj) {
  return this.get$2(obj,null)
},
 getCore$2: function(obj, ifAbsent) {
  return obj._getValueOrUndefined$3(this, obj, ifAbsent);
},
 set$2: function(obj, value) {
  obj._set$2(this, value);
},
 clear$1: function(obj) {
  return obj._remove$1(this);
},
 toString$0: function() {
  return 'Property \'' + $.S(this.name) + '\'';
}
};

$$._UndefinedValue = {"": [],
 "super": "Object"
};

$$.Enumerable = {"": [],
 "super": "Object",
 every$1: function(f) {
  var t1;
  $.requireArgumentNotNull(f, 'f');
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 contains$1: function(item) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), item))
      return true;
  return false;
},
 get$isEmpty: function() {
  return this.some$1(new $.Enumerable_isEmpty_anon()) !== true;
},
 some$1: function(f) {
  var t1;
  $.requireArgumentNotNull(f, 'f');
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 count$1: function(f) {
  var t1, c;
  if (f == null)
    f = new $.Enumerable_count_anon();
  for (t1 = $.getInterceptor(this).iterator$0(this), c = 0; t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      ++c;
  return c;
},
 join$1: function(separator) {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer('');
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.gtB($.getInterceptor(sb).get$length(sb), 0))
      $.getInterceptor(sb).add$1(sb, separator);
    $.getInterceptor(sb).add$1(sb, t2);
  }
  return $.getInterceptor(sb).toString$0(sb);
},
 join$0: function() {
  return this.join$1(', ')
},
 map$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_map_anon(f));
},
 filter$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_filter_anon(f));
},
 exclude$1: function(items) {
  $.requireArgumentNotNull(items, 'items');
  return $._FuncEnumerable$(this, new $.Enumerable_exclude_anon(new $.Enumerable_exclude_anon0($.$$(items))));
},
 selectMany$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_selectMany_anon(f));
},
 first$1: function(f) {
  var iter;
  if (f == null)
    f = new $.Enumerable_first_anon();
  iter = $._WhereIterator$($.getInterceptor(this).iterator$0(this), f);
  if (iter.get$hasNext() !== true)
    throw $.$$throw($.CTC11);
  return iter.next$0();
},
 first$0: function() {
  return this.first$1(null)
},
 get$first: function() { return new $.BoundClosure2(this, 'first$1'); },
 single$1: function(f) {
  var iter, value;
  if (f == null)
    f = new $.Enumerable_single_anon();
  iter = $._WhereIterator$($.getInterceptor(this).iterator$0(this), f);
  if (iter.get$hasNext() !== true)
    throw $.$$throw($.CTC11);
  value = iter.next$0();
  if (iter.get$hasNext() === true)
    throw $.$$throw($.CTC16);
  return value;
},
 distinct$1: function(comparer) {
  var t1 = {};
  t1.comparer_1 = comparer;
  if (t1.comparer_1 == null)
    t1.comparer_1 = new $.Enumerable_distinct_anon();
  return $._FuncEnumerable$(this, new $.Enumerable_distinct_anon0(t1));
},
 distinct$0: function() {
  return this.distinct$1(null)
},
 group$1: function(keyFunc) {
  return $.Grouping$(this, keyFunc);
},
 toReadOnlyCollection$0: function() {
  return $.ReadOnlyCollection$(this);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 forEachWithIndex$1: function(f) {
  var t1, i, t2, i0;
  for (t1 = $.getInterceptor(this).iterator$0(this), i = 0; t1.get$hasNext() === true; i = i0) {
    t2 = t1.next$0();
    i0 = i + 1;
    f.call$2(t2, i);
  }
},
 toList$0: function() {
  return $._ListImpl_List$from(this);
},
 toHashMap$2: function(valueFunc, keyFunc) {
  var map, t1, t2, k;
  if (keyFunc == null)
    keyFunc = new $.Enumerable_toHashMap_anon();
  map = $.HashMap_HashMap();
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.toHashMap$2$bailout(1, valueFunc, keyFunc, map);
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    k = keyFunc.call$1(t2);
    if (map.containsKey$1(k) === true)
      throw $.$$throw($.UnsupportedError$('The key \'' + $.S(k) + '\' is duplicated'));
    t2 = valueFunc.call$1(t2);
    if (k !== (k | 0))
      throw $.iae(k);
    if (k < 0 || k >= map.length)
      throw $.ioore(k);
    map[k] = t2;
  }
  return map;
},
 toHashMap$2$bailout: function(state0, valueFunc, keyFunc, map) {
  var t1, t2, k;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    k = keyFunc.call$1(t2);
    if (map.containsKey$1(k) === true)
      throw $.$$throw($.UnsupportedError$('The key \'' + $.S(k) + '\' is duplicated'));
    $.indexSet(map, k, valueFunc.call$1(t2));
  }
  return map;
},
 toHashMap$1: function(valueFunc) {
  return this.toHashMap$2(valueFunc,null)
},
 selectNumbers$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncNumEnumerable$(this, new $.Enumerable_selectNumbers_anon(f));
},
 toString$0: function() {
  return '[' + $.S(this.join$0()) + ']';
},
 is$Enumerable: true
};

$$._SimpleEnumerable = {"": ["_source"],
 "super": "Enumerable",
 iterator$0: function() {
  var t1 = this._source;
  return $.getInterceptor(t1).iterator$0(t1);
}
};

$$._FuncEnumerable = {"": ["_source", "_func"],
 "super": "Enumerable",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 iterator$0: function() {
  var t1 = this._source;
  return this._func$1($.getInterceptor(t1).iterator$0(t1));
}
};

$$._SelectIterator = {"": ["_source", "_func"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  return this._source.get$hasNext();
},
 next$0: function() {
  return this._func$1(this._source.next$0());
}
};

$$._WhereIterator = {"": ["_source", "_func", "_liblib2$_next=", "_current>"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  if (this._liblib2$_next == null) {
    this._liblib2$_next = false;
    for (var t1 = this._source; t1.get$hasNext() === true;) {
      this._current = t1.next$0();
      if (this._func$1(this._current) === true) {
        this._liblib2$_next = true;
        break;
      }
    }
  }
  return this._liblib2$_next;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._liblib2$_next = null;
  return this._current;
}
};

$$._DistinctIterator = {"": ["_source", "_comparer", "_found", "_liblib2$_next=", "_current>"],
 "super": "Object",
 _comparer$2: function(arg0, arg1) { return this._comparer.call$2(arg0, arg1); },
 get$hasNext: function() {
  var t1, t2;
  if (this._liblib2$_next == null) {
    this._liblib2$_next = false;
    for (t1 = this._found, t2 = this._source; t2.get$hasNext() === true;) {
      this._current = t2.next$0();
      if ($.getInterceptor(t1).every$1(t1, new $._DistinctIterator_hasNext_anon(this)) === true) {
        this._liblib2$_next = true;
        $.getInterceptor(t1).add$1(t1, this._current);
        break;
      }
    }
  }
  return this._liblib2$_next;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._liblib2$_next = null;
  return this._current;
}
};

$$._SelectManyIterator = {"": ["_sourceIterator", "_func", "_outputIterator"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  var t1, t2;
  t1 = this._outputIterator;
  if (!(t1 == null))
    if (t1.get$hasNext() === true)
      return true;
    else
      this._outputIterator = null;
  t1 = this._sourceIterator;
  if (t1.get$hasNext() === true) {
    t2 = this._func$1(t1.next$0());
    this._outputIterator = $.getInterceptor(t2).iterator$0(t2);
    return this._outputIterator.get$hasNext();
  }
  return false;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  return this._outputIterator.next$0();
}
};

$$.Grouping = {"": ["_liblib2$_values"],
 "super": "Object",
 containsKey$1: function(key) {
  return this._liblib2$_values.containsKey$1(key);
},
 operator$index$1: function(key) {
  return $.index(this._liblib2$_values, key);
},
 forEach$1: function(f) {
  var t1 = this._liblib2$_values;
  return $.getInterceptor(t1).forEach$1(t1, f);
},
 getKeys$0: function() {
  return this._liblib2$_values.get$keys();
},
 get$length: function() {
  var t1 = this._liblib2$_values;
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  var t1 = this._liblib2$_values;
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 toString$0: function() {
  var t1 = this._liblib2$_values;
  return $.getInterceptor(t1).toString$0(t1);
},
 Grouping$2: function(source, keyFunc) {
  var t1, t2, t3, values;
  if (keyFunc == null)
    keyFunc = new $.anon2();
  for (t1 = $.getInterceptor(source).iterator$0(source), t2 = this._liblib2$_values; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    values = t2.putIfAbsent$2(keyFunc.call$1(t3), new $.anon3());
    $.getInterceptor(values).add$1(values, t3);
  }
}
};

$$.IndexIterator = {"": ["_indexer", "_liblib2$_length", "_liblib2$_pos"],
 "super": "Object",
 get$hasNext: function() {
  return $.gt(this._liblib2$_length, this._liblib2$_pos);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var t1 = this._liblib2$_pos;
  this._liblib2$_pos = t1 + 1;
  return this._indexer$1(t1);
},
 _indexer$1: function(arg0) { return this._indexer.call$1(arg0); },
 IndexIterator$2: function(length$, indexer) {
  $.requireArgumentNotNull(this._indexer, '_indexer');
}
};

$$.ListBase = {"": [],
 "super": "Enumerable",
 iterator$0: function() {
  return $.IndexIterator$(this.get$length(), new $.ListBase_iterator_anon(this));
},
 forEach$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, this.get$length()); ++i)
    f.call$1(this.operator$index$1(i));
},
 every$1: function(f) {
  var i, t1;
  i = 0;
  while (true) {
    t1 = this.get$length();
    if (typeof t1 !== 'number')
      return this.every$1$bailout(1, f, t1, i);
    if (!(i < t1))
      break;
    if (f.call$1(this.operator$index$1(i)) !== true)
      return false;
    ++i;
  }
  return true;
},
 every$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      i = env2;
      t1 = env1;
      f = env0;
      break;
  }
  switch (state0) {
    case 0:
      i = 0;
    case 1:
      var i, t1, f;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = this.get$length();
            case 1:
              state0 = 0;
              if (!$.ltB(i, t1))
                break L0;
              if (f.call$1(this.operator$index$1(i)) !== true)
                return false;
              ++i;
          }
      return true;
  }
},
 some$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, this.get$length()); ++i)
    if (f.call$1(this.operator$index$1(i)) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 indexOf$2: function(element, start) {
  var i, t1;
  if (typeof start !== 'number')
    return this.indexOf$2$bailout(1, element, start);
  i = start;
  while (true) {
    t1 = this.get$length();
    if (typeof t1 !== 'number')
      return this.indexOf$2$bailout(2, element, t1, i);
    if (!(i < t1))
      break;
    if ($.eqB(this.operator$index$1(i), element))
      return i;
    ++i;
  }
  return -1;
},
 indexOf$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      start = env1;
      element = env0;
      break;
    case 2:
      i = env2;
      t1 = env1;
      element = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      i = start;
    case 2:
      var start, element, i, t1;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = this.get$length();
            case 2:
              state0 = 0;
              if (!$.ltB(i, t1))
                break L0;
              if ($.eqB(this.operator$index$1(i), element))
                return i;
              i = $.add(i, 1);
          }
      return -1;
  }
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  var i, lastIndex;
  if (start !== (start | 0))
    return this.lastIndexOf$2$bailout(1, element, start);
  for (i = start, lastIndex = -1; $.ltB(i, this.get$length()); ++i)
    if ($.eqB(this.operator$index$1(i), element))
      lastIndex = i;
  return lastIndex;
},
 lastIndexOf$2$bailout: function(state0, element, start) {
  var i, lastIndex;
  for (i = start, lastIndex = -1; $.ltB(i, this.get$length()); i = $.add(i, 1))
    if ($.eqB(this.operator$index$1(i), element))
      lastIndex = i;
  return lastIndex;
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.getInterceptor(this).get$length(this), 1));
},
 get$last: function() { return new $.BoundClosure0(this, 'last$0'); },
 getRange$2: function(start, itemCount) {
  var lastIndex, list, i;
  if (typeof start !== 'number')
    return this.getRange$2$bailout(1, start, itemCount);
  $.requireArgument($.ge(itemCount, 0), 'count', null);
  if (typeof itemCount !== 'number')
    throw $.iae(itemCount);
  lastIndex = start + itemCount - 1;
  if (itemCount > 0)
    if (start < 0)
      throw $.$$throw($.RangeError$(start));
    else if ($.geB(lastIndex, this.get$length()))
      throw $.$$throw($.RangeError$(lastIndex));
  list = $._ListImpl_List(null);
  for (i = start; i <= lastIndex; ++i)
    $.getInterceptor(list).add$1(list, this.operator$index$1(i));
  return list;
},
 getRange$2$bailout: function(state0, start, itemCount) {
  var lastIndex, list, i;
  $.requireArgument($.ge(itemCount, 0), 'count', null);
  lastIndex = $.sub($.add(start, itemCount), 1);
  if ($.gtB(itemCount, 0))
    if ($.ltB(start, 0))
      throw $.$$throw($.RangeError$(start));
    else if ($.geB(lastIndex, this.get$length()))
      throw $.$$throw($.RangeError$(lastIndex));
  list = $._ListImpl_List(null);
  for (i = start; $.leB(i, lastIndex); i = $.add(i, 1))
    $.getInterceptor(list).add$1(list, this.operator$index$1(i));
  return list;
},
 is$Collection: function() { return true; }
};

$$.NumberEnumerable = {"": [],
 "super": "Enumerable",
 sum$0: function() {
  var t1, theSum, t2;
  for (t1 = $.getInterceptor(this).iterator$0(this), theSum = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null)
      throw $.$$throw($.CTC10);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    theSum += t2;
  }
  return theSum;
}
};

$$._FuncNumEnumerable = {"": ["_source", "_func"],
 "super": "NumberEnumerable",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 iterator$0: function() {
  var t1 = this._source;
  return this._func$1($.getInterceptor(t1).iterator$0(t1));
}
};

$$.ReadOnlyCollection = {"": ["_items"],
 "super": "ListBase",
 get$length: function() {
  var t1 = this._items;
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  var t1 = this._items;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout(1, t1, index);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout: function(state0, t1, index) {
  return $.index(t1, index);
}
};

$$.HslColor = {"": ["h>", "s>", "l>"],
 "super": "Object",
 toRgb$0: function() {
  var t1, normH, b, r, g, t2, temp2, temp1, t3;
  t1 = this.h;
  if (typeof t1 !== 'number')
    return this.toRgb$0$bailout(1, t1);
  normH = t1 / 360;
  t1 = this.s;
  if (t1 === 0) {
    b = this.l * 255;
    r = b;
    g = r;
  } else {
    t2 = this.l;
    temp2 = t2 < 0.5 ? t2 * (1 + t1) : t2 + t1 - t1 * t2;
    temp1 = 2 * t2 - temp2;
    r = 255 * $.HslColor__hueToRgb(temp1, temp2, normH + 0.3333333333333333);
    g = 255 * $.HslColor__hueToRgb(temp1, temp2, normH);
    b = 255 * $.HslColor__hueToRgb(temp1, temp2, normH - 0.3333333333333333);
  }
  t1 = $.getInterceptor(r).round$0(r);
  t1 = $.getInterceptor(t1).toInt$0(t1);
  t2 = $.getInterceptor(g).round$0(g);
  t2 = $.getInterceptor(t2).toInt$0(t2);
  t3 = $.getInterceptor(b).round$0(b);
  return $.RgbColor_RgbColor(t1, t2, $.getInterceptor(t3).toInt$0(t3));
},
 toRgb$0$bailout: function(state0, t1) {
  var normH, b, r, g, t2, temp2, temp1, t3;
  normH = $.div(t1, 360);
  t1 = this.s;
  if (t1 === 0) {
    b = this.l * 255;
    r = b;
    g = r;
  } else {
    t2 = this.l;
    temp2 = t2 < 0.5 ? t2 * (1 + t1) : t2 + t1 - t1 * t2;
    temp1 = 2 * t2 - temp2;
    r = 255 * $.HslColor__hueToRgb(temp1, temp2, $.add(normH, 0.3333333333333333));
    g = 255 * $.HslColor__hueToRgb(temp1, temp2, normH);
    b = 255 * $.HslColor__hueToRgb(temp1, temp2, $.sub(normH, 0.3333333333333333));
  }
  t1 = $.getInterceptor(r).round$0(r);
  t1 = $.getInterceptor(t1).toInt$0(t1);
  t2 = $.getInterceptor(g).round$0(g);
  t2 = $.getInterceptor(t2).toInt$0(t2);
  t3 = $.getInterceptor(b).round$0(b);
  return $.RgbColor_RgbColor(t1, t2, $.getInterceptor(t3).toInt$0(t3));
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.h, this.s, this.l]);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$h(), this.h) && $.eqB(other.get$s(), this.s) && $.eqB(other.get$l(), this.l);
},
 toString$0: function() {
  return '{HslColor: ' + $.S(this.h) + ', ' + $.S(this.s) + ', ' + $.S(this.l) + '}';
}
};

$$.RgbColor = {"": ["r>", "g>", "b>"],
 "super": "Object",
 toHex$0: function() {
  var buffer, t1;
  buffer = $.StringBuffer_StringBuffer('#');
  t1 = [this.r, this.g, this.b];
  $.getInterceptor(t1).forEach$1(t1, new $.RgbColor_toHex_anon(buffer));
  return $.getInterceptor(buffer).toString$0(buffer);
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.r, this.g, this.b]);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$r(), this.r) && $.eqB(other.get$g(), this.g) && $.eqB(other.get$b(), this.b);
},
 toString$0: function() {
  return '{RgbColor: ' + $.S(this.r) + ', ' + $.S(this.g) + ', ' + $.S(this.b) + '}';
}
};

$$.DisposableImpl = {"": [],
 "super": "Object",
 validateNotDisposed$0: function() {
}
};

$$.CancelableEventArgs = {"": ["_canceled"],
 "super": "EventArgs",
 get$isCanceled: function() {
  return this._canceled;
},
 cancel$0: function() {
  this._canceled = true;
}
};

$$.EventArgs = {"": [],
 "super": "Object"
};

$$.EventHandle = {"": ["_handlers", "_disposed"],
 "super": "DisposableImpl",
 fireEvent$1: function(args) {
  var t1 = this._handlers;
  if (!(t1 == null))
    $.getInterceptor(t1).forEach$1(t1, new $.EventHandle_fireEvent_anon(args));
},
 add$1: function(handler) {
  var id, t1;
  id = $.GlobalId_GlobalId();
  if (this._handlers == null)
    this._handlers = $.HashMap_HashMap();
  t1 = this._handlers;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.add$1$bailout0(1, handler, t1, id);
  if (id !== (id | 0))
    throw $.iae(id);
  if (id < 0 || id >= t1.length)
    throw $.ioore(id);
  t1[id] = handler;
  return id;
},
 add$1$bailout0: function(state0, handler, t1, id) {
  $.indexSet(t1, id, handler);
  return id;
},
 remove$1: function(id) {
  var t1 = this._handlers;
  if (!(t1 == null))
    return !(t1.remove$1(id) == null);
  else
    return false;
}
};

$$.DetailedArgumentError = {"": ["argument", "details"],
 "super": "Object",
 get$message: function() {
  return 'Illegal argument: "' + $.S(this.argument) + '" -- ' + $.S(this.details);
},
 toString$0: function() {
  return this.get$message();
},
 DetailedArgumentError$2: function(argument, details) {
  $.requireArgumentNotNullOrEmpty(this.argument, 'argument');
  $.requireArgumentNotNullOrEmpty(this.details, 'details');
}
};

$$.InvalidOperationError = {"": ["message"],
 "super": "Object",
 is$Exception: true
};

$$.NullArgumentError = {"": ["argument", "details"],
 "super": "DetailedArgumentError"
};

$$.GlobalId = {"": ["id>", "_hashCode"],
 "super": "Object",
 compareTo$1: function(other) {
  var t1 = this.id;
  return $.getInterceptor(t1).compareTo$1(t1, other.get$id());
},
 get$hashCode: function() {
  return this._hashCode;
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$id(), this.id);
}
};

$$.AffineTransform = {"": ["_m00>", "_m10>", "_m01>", "_m11>", "_m02>", "_m12>"],
 "super": "Object",
 get$scaleX: function() {
  return this._m00;
},
 get$scaleY: function() {
  return this._m11;
},
 get$translateX: function() {
  return this._m02;
},
 get$translateY: function() {
  return this._m12;
},
 get$shearX: function() {
  return this._m01;
},
 get$shearY: function() {
  return this._m10;
},
 get$determinant: function() {
  return $.sub($.mul(this._m00, this._m11), $.mul(this._m01, this._m10));
},
 concatenate$1: function(tx) {
  var m0, m1, m00, m10;
  m0 = this._m00;
  m1 = this._m01;
  this._m00 = $.add($.mul(tx.get$_m00(), m0), $.mul(tx.get$_m10(), m1));
  this._m01 = $.add($.mul(tx.get$_m01(), m0), $.mul(tx.get$_m11(), m1));
  this._m02 = $.add(this._m02, $.add($.mul(tx.get$_m02(), m0), $.mul(tx.get$_m12(), m1)));
  m00 = this._m10;
  m10 = this._m11;
  this._m10 = $.add($.mul(tx.get$_m00(), m00), $.mul(tx.get$_m10(), m10));
  this._m11 = $.add($.mul(tx.get$_m01(), m00), $.mul(tx.get$_m11(), m10));
  this._m12 = $.add(this._m12, $.add($.mul(tx.get$_m02(), m00), $.mul(tx.get$_m12(), m10)));
  return this;
},
 get$concatenate: function() { return new $.BoundClosure(this, 'concatenate$1'); },
 translate$2: function(dx, dy) {
  this._m02 = $.add(this._m02, $.add($.mul(dx, this._m00), $.mul(dy, this._m01)));
  this._m12 = $.add(this._m12, $.add($.mul(dx, this._m10), $.mul(dy, this._m11)));
  return this;
},
 setToScale$2: function(sx, sy) {
  return this.setTransform$6(sx, 0, 0, sy, 0, 0);
},
 setFromTransfrom$1: function(tx) {
  $.requireArgumentNotNull(tx, 'tx');
  return this.setTransform$6(tx.get$_m00(), tx.get$_m10(), tx.get$_m01(), tx.get$_m11(), tx.get$_m02(), tx.get$_m12());
},
 setTransform$6: function(m00, m10, m01, m11, m02, m12) {
  this._m00 = m00;
  this._m10 = m10;
  this._m01 = m01;
  this._m11 = m11;
  this._m02 = m02;
  this._m12 = m12;
  return this;
},
 transformCoordinate$1: function(point) {
  return $.Coordinate$($.add($.add($.mul(point.get$x(), this._m00), $.mul(point.get$y(), this._m01)), this._m02), $.add($.add($.mul(point.get$x(), this._m10), $.mul(point.get$y(), this._m11)), this._m12));
},
 createInverse$0: function() {
  var det = this.get$determinant();
  return $.AffineTransform$($.div(this._m11, det), $.div($.neg(this._m10), det), $.div($.neg(this._m01), det), $.div(this._m00, det), $.div($.sub($.mul(this._m01, this._m12), $.mul(this._m11, this._m02)), det), $.div($.sub($.mul(this._m10, this._m02), $.mul(this._m00, this._m12)), det));
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this._m00, other.get$_m00()) && $.eqB(this._m01, other.get$_m01()) && $.eqB(this._m02, other.get$_m02()) && $.eqB(this._m10, other.get$_m10()) && $.eqB(this._m11, other.get$_m11()) && $.eqB(this._m12, other.get$_m12());
},
 toString$0: function() {
  var t1 = $.$$([this.get$translateX(), this.get$translateY(), this.get$scaleX(), this.get$scaleY(), this.get$shearX(), this.get$shearY()]);
  return $.Strings_join($.getInterceptor(t1).map$1(t1, new $.AffineTransform_toString_anon()).toList$0(), ', ');
}
};

$$.Coordinate = {"": ["x>", "y>"],
 "super": "Object",
 getDistance$1: function(other) {
  var t1 = this.operator$sub$1(other);
  return $.getInterceptor(t1).get$length(t1);
},
 get$isValid: function() {
  return $.isValidNumber(this.x) && $.isValidNumber(this.y);
},
 operator$sub$1: function(other) {
  return $.Vector$($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()));
},
 operator$add$1: function(other) {
  return $.Coordinate$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.x, other.get$x()) && $.eqB(this.y, other.get$y());
},
 toString$0: function() {
  return '{x:' + $.S(this.x) + ', y:' + $.S(this.y) + '}';
}
};

$$.Box = {"": ["left>", "top>", "width>", "height>"],
 "super": "Object",
 get$topLeft: function() {
  return $.Coordinate$(this.left, this.top);
},
 get$size: function() {
  return $.Size$(this.width, this.height);
},
 get$isValid: function() {
  return this.get$topLeft().get$isValid() === true && this.get$size().get$isValid() === true;
},
 get$right: function() {
  var t1, t2;
  t1 = this.left;
  t2 = this.width;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  return t1 + t2;
},
 get$bottom: function() {
  var t1, t2;
  t1 = this.top;
  t2 = this.height;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  return t1 + t2;
},
 contains$1: function(point) {
  var t1, t2, t3;
  t1 = point.get$x();
  t2 = this.left;
  if ($.geB(t1, t2)) {
    t1 = point.get$x();
    t3 = this.width;
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    if ($.leB(t1, t2 + t3)) {
      t1 = point.get$y();
      t2 = this.top;
      if ($.geB(t1, t2)) {
        t1 = point.get$y();
        t3 = this.height;
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        t1 = $.leB(t1, t2 + t3);
      } else
        t1 = false;
    } else
      t1 = false;
  } else
    t1 = false;
  return t1;
},
 constrain$1: function(value) {
  $.requireArgumentNotNull(value, 'value');
  $.requireArgument(value.get$isValid(), 'value', null);
  return $.Coordinate$($.min(this.get$right(), $.max(this.left, value.get$x())), $.min(this.get$bottom(), $.max(this.top, value.get$y())));
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$left(), this.left) && $.eqB(other.get$top(), this.top) && $.eqB(other.get$width(), this.width) && $.eqB(other.get$height(), this.height);
},
 toString$0: function() {
  return 'Location: ' + $.S(this.get$topLeft()) + ', Size: ' + $.S(this.get$size());
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.left, this.top, this.width, this.height]);
}
};

$$.Size = {"": ["width>", "height>"],
 "super": "Object",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.width, other.get$width()) && $.eqB(this.height, other.get$height());
},
 get$area: function() {
  return $.mul(this.width, this.height);
},
 get$aspectRatio: function() {
  return $.div(this.width, this.height);
},
 isEmpty$0: function() {
  return $.eq(this.get$area(), 0);
},
 get$isEmpty: function() { return new $.BoundClosure0(this, 'isEmpty$0'); },
 get$isValid: function() {
  var t1, t2;
  t1 = this.width;
  if ($.isValidNumber(t1)) {
    t2 = this.height;
    t1 = $.isValidNumber(t2) && $.geB(t1, 0) && $.geB(t2, 0);
  } else
    t1 = false;
  return t1;
},
 scale$1: function(magnitude) {
  return $.Size$($.mul(this.width, magnitude), $.mul(this.height, magnitude));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1(magnitude);
},
 toString$0: function() {
  return '(' + $.S(this.width) + ' x ' + $.S(this.height) + ')';
}
};

$$.TarjanCycleDetect = {"": ["_index", "_stack", "_scc", "_liblib2$_list"],
 "super": "Object",
 _executeTarjan$0: function() {
  var nodeList, t1, t2;
  nodeList = $._ListImpl_List$from(this._liblib2$_list.getSourceNodeSet$0());
  for (t1 = $.getInterceptor(nodeList).iterator$0(nodeList); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.eqB(t2.get$index(), -1))
      this._tarjan$1(t2);
  }
  return this._scc;
},
 _tarjan$1: function(v) {
  var t1, t3, t2, t4, component, n;
  v.set$index(this._index);
  v.set$lowlink(this._index);
  t1 = this._index;
  if (typeof t1 !== 'number')
    return this._tarjan$1$bailout(1, v, t1);
  this._index = t1 + 1;
  t3 = this._stack;
  $.getInterceptor(t3).insertRange$3(t3, 0, 1, v);
  for (t1 = this._liblib2$_list.getAdjacent$1(v), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t4 = t2.get$index();
    if (typeof t4 !== 'number')
      return this._tarjan$1$bailout(2, v, t3, t2, t4, t1);
    if (t4 === -1) {
      this._tarjan$1(t2);
      v.set$lowlink($.min(v.get$lowlink(), t2.get$lowlink()));
    } else {
      t4 = $.getInterceptor(t3).indexOf$1(t3, t2);
      if (typeof t4 !== 'number')
        return this._tarjan$1$bailout(3, v, t3, t2, t1, t4);
      if (t4 >= 0)
        v.set$lowlink($.min(v.get$lowlink(), t2.get$index()));
    }
  }
  if ($.eqB(v.get$lowlink(), v.get$index())) {
    component = $._ListImpl_List(null);
    do {
      if (0 >= t3.length)
        throw $.ioore(0);
      n = t3[0];
      $.getInterceptor(t3).removeRange$2(t3, 0, 1);
      $.getInterceptor(component).add$1(component, n.get$value());
    } while (!$.eqB(n, v));
    t1 = this._scc;
    $.getInterceptor(t1).add$1(t1, component);
  }
},
 _tarjan$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      v = env0;
      break;
    case 2:
      t1 = env4;
      t4 = env3;
      t2 = env2;
      t3 = env1;
      v = env0;
      break;
    case 3:
      t4 = env4;
      t1 = env3;
      t2 = env2;
      t3 = env1;
      v = env0;
      break;
  }
  switch (state0) {
    case 0:
      v.set$index(this._index);
      v.set$lowlink(this._index);
      t1 = this._index;
    case 1:
      state0 = 0;
      this._index = $.add(t1, 1);
      t3 = this._stack;
      $.getInterceptor(t3).insertRange$3(t3, 0, 1, v);
      t1 = this._liblib2$_list.getAdjacent$1(v);
      t1 = $.getInterceptor(t1).iterator$0(t1);
    default:
      var t1, v, t3, t2, t4, component, n;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.get$hasNext() === true))
                break L0;
              t2 = t1.next$0();
              t4 = t2.get$index();
            case 2:
              state0 = 0;
            case 3:
              if (state0 === 0 && $.eqB(t4, -1)) {
                this._tarjan$1(t2);
                v.set$lowlink($.min(v.get$lowlink(), t2.get$lowlink()));
              } else
                switch (state0) {
                  case 0:
                    t4 = $.getInterceptor(t3).indexOf$1(t3, t2);
                  case 3:
                    state0 = 0;
                    if ($.geB(t4, 0))
                      v.set$lowlink($.min(v.get$lowlink(), t2.get$index()));
                }
          }
      if ($.eqB(v.get$lowlink(), v.get$index())) {
        component = $._ListImpl_List(null);
        do {
          if (0 >= t3.length)
            throw $.ioore(0);
          n = t3[0];
          $.getInterceptor(t3).removeRange$2(t3, 0, 1);
          $.getInterceptor(component).add$1(component, n.get$value());
        } while (!$.eqB(n, v));
        t1 = this._scc;
        $.getInterceptor(t1).add$1(t1, component);
      }
  }
}
};

$$._TarjanNode = {"": ["value>", "index=", "lowlink="],
 "super": "Object",
 get$hashCode: function() {
  var t1 = this.value;
  return $.getInterceptor(t1).get$hashCode(t1);
},
 operator$eq$1: function(other) {
  return $.eq(other.get$value(), this.value);
}
};

$$._TarjanList = {"": ["_nodes"],
 "super": "Object",
 getSourceNodeSet$0: function() {
  return this._nodes.get$keys();
},
 getAdjacent$1: function(v) {
  var nodes = $.index(this._nodes, v);
  if (nodes == null)
    return [];
  else
    return nodes;
}
};

$$.Vector = {"": ["x", "y"],
 "super": "Coordinate",
 get$length: function() {
  var t1, t2;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  t2 = this.y;
  return $.sqrt($.add(t1, $.mul(t2, t2)));
},
 operator$add$1: function(other) {
  return $.Vector$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1(magnitude);
},
 scale$1: function(magnitude) {
  return $.Vector$($.mul(this.x, magnitude), $.mul(this.y, magnitude));
}
};

$$.Dragger = {"": ["_liblib1$_element>", "_dragDeltaHandle", "_dragStartHandle", "_clientLoc"],
 "super": "Object",
 get$dragDelta: function() {
  return this._dragDeltaHandle;
},
 get$dragStart: function() {
  return this._dragStartHandle;
},
 get$isDragging: function() {
  return !(this._clientLoc == null);
},
 _onMouseDown$1: function(event$) {
  var args = $.CancelableEventArgs$();
  this._dragStartHandle.fireEvent$1(args);
  if (args.get$isCanceled() !== true) {
    event$.preventDefault$0();
    this._clientLoc = $.Coordinate$(event$.get$clientX(), event$.get$clientY());
  }
},
 get$_onMouseDown: function() { return new $.BoundClosure(this, '_onMouseDown$1'); },
 _handleMove$1: function(event$) {
  var newLoc, delta;
  if (this.get$isDragging() === true) {
    newLoc = $.Coordinate$(event$.get$clientX(), event$.get$clientY());
    delta = newLoc.operator$sub$1(this._clientLoc);
    this._dragDeltaHandle.fireEvent$1(delta);
    this._clientLoc = newLoc;
  }
},
 get$_handleMove: function() { return new $.BoundClosure(this, '_handleMove$1'); },
 _endDrag$1: function(event$) {
  if (this.get$isDragging() === true)
    this._clientLoc = null;
},
 get$_endDrag: function() { return new $.BoundClosure(this, '_endDrag$1'); },
 Dragger$1: function(_element) {
  var t1 = this._liblib1$_element.get$on().get$mouseDown();
  $.getInterceptor(t1).add$1(t1, this.get$_onMouseDown());
  t1 = $.window().get$on().get$mouseMove();
  $.getInterceptor(t1).add$1(t1, this.get$_handleMove());
  t1 = $.window().get$on().get$mouseUp();
  $.getInterceptor(t1).add$1(t1, this.get$_endDrag());
  t1 = $.window().get$on().get$blur();
  $.getInterceptor(t1).add$1(t1, this.get$_endDrag());
}
};

$$.HtmlView = {"": [],
 "super": "Object",
 get$node: function() {
  return this._node;
},
 markDirty$0: function() {
  this._dirty = true;
},
 draw$0: function() {
  if (this._dirty) {
    this.updateElement$0();
    this._dirty = false;
  }
},
 HtmlView$1: function(_node) {
  $.requireArgumentNotNull(this._node, 'node');
  this._dirty = true;
}
};

$$.ParentElement = {"": [],
 "super": "PElement",
 childInvalidated$1: function(child) {
  this.invalidateDraw$0();
},
 update$0: function() {
  this._forEach$1(new $.ParentElement_update_anon());
  $.PElement.prototype.update$0.call(this);
},
 drawOverride$1: function(ctx) {
  this._forEach$1(new $.ParentElement_drawOverride_anon(ctx));
},
 _forEach$1: function(f) {
  var length$, i;
  length$ = this.get$visualChildCount();
  if (typeof length$ !== 'number')
    return this._forEach$1$bailout(1, f, length$);
  for (i = 0; i < length$; ++i)
    f.call$1(this.getVisualChild$1(i));
},
 _forEach$1$bailout: function(state0, f, length$) {
  var i;
  for (i = 0; $.ltB(i, length$); ++i)
    f.call$1(this.getVisualChild$1(i));
},
 is$ParentElement: true
};

$$.PElement = {"": [],
 "super": "AttachableObject",
 clip$0: function() { return this.clip.call$0(); },
 get$width: function() {
  return this._width;
},
 set$width: function(value) {
  this._width = value;
  this.invalidateDraw$0();
},
 get$height: function() {
  return this._height;
},
 set$height: function(value) {
  this._height = value;
  this.invalidateDraw$0();
},
 get$size: function() {
  return $.Size$(this._width, this._height);
},
 getTransform$0: function() {
  var tx, t1;
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  t1 = this._transforms;
  $.getInterceptor(t1).forEach$1(t1, tx.get$concatenate());
  return tx;
},
 update$0: function() {
},
 drawCore$1: function(ctx) {
  if (this.cacheEnabled)
    this._drawCached$1(ctx);
  else
    this._drawNormal$1(ctx);
},
 addTransform$0: function() {
  var tx, t1;
  this.validateNotDisposed$0();
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  t1 = this._transforms;
  $.getInterceptor(t1).add$1(t1, tx);
  return tx;
},
 invalidateDraw$0: function() {
  this.validateNotDisposed$0();
  if (!(this._lastDrawSize == null)) {
    this._lastDrawSize = null;
    this._invalidateParent$0();
  }
},
 registerParent$1: function(parent$) {
  $.require(this._parent == null, 'parent already set');
  $.requireArgumentNotNull(parent$, 'parent');
  this._parent = parent$;
},
 _stageDraw$1: function(ctx) {
  var dirty;
  this.update$0();
  dirty = this._lastDrawSize == null;
  this.drawCore$1(ctx);
  return dirty;
},
 _drawCached$1: function(ctx) {
  var t1, intLastDrawSize, t2;
  if (this._cacheCanvas == null)
    this._cacheCanvas = $.CanvasElement_CanvasElement(null, null);
  t1 = this._lastDrawSize;
  if (t1 == null)
    intLastDrawSize = null;
  else {
    t1 = t1.get$width();
    t1 = $.getInterceptor(t1).toInt$0(t1);
    t2 = this._lastDrawSize.get$height();
    intLastDrawSize = $.Size$(t1, $.getInterceptor(t2).toInt$0(t2));
  }
  t1 = this._cacheCanvas;
  if (!$.eqB($.Size$(t1.get$width(), t1.get$height()), intLastDrawSize)) {
    t1 = this.get$width();
    t1 = $.getInterceptor(t1).toInt$0(t1);
    this._cacheCanvas.set$width(t1);
    t1 = this.get$height();
    t1 = $.getInterceptor(t1).toInt$0(t1);
    this._cacheCanvas.set$height(t1);
    this._drawInternal$1(this._cacheCanvas.get$context2d());
  }
  ctx.save$0();
  $.CanvasUtil_transform(ctx, this.getTransform$0());
  ctx.drawImage$3(this._cacheCanvas, 0, 0);
  ctx.restore$0();
},
 _drawNormal$1: function(ctx) {
  var tx = this.getTransform$0();
  if (this._isClipped$2(tx, ctx) === true)
    return;
  ctx.save$0();
  $.CanvasUtil_transform(ctx, tx);
  if (this.clip) {
    ctx.beginPath$0();
    ctx.rect$4(0, 0, this.get$width(), this.get$height());
    ctx.clip$0();
  }
  this._drawInternal$1(ctx);
  ctx.restore$0();
},
 _drawInternal$1: function(ctx) {
  var t1 = this._alpha;
  if (!(t1 == null))
    ctx.set$globalAlpha(t1);
  this.drawOverride$1(ctx);
  this._lastDrawSize = this.get$size();
},
 _isClipped$2: function(tx, ctx) {
  if (this.clip)
    ;
  return false;
},
 _invalidateParent$0: function() {
  this._invalidatedEventHandle.fireEvent$1($.CTC13);
  this._parent.childInvalidated$1(this);
}
};

$$.Stage = {"": ["_invalidatedEventHandle", "_liblib5$_canvas", "_liblib5$_element>", "_ctx", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject",
 get$invalidated: function() {
  return this._invalidatedEventHandle;
},
 get$rootElement: function() {
  return this._liblib5$_element;
},
 draw$0: function() {
  var t1, t2, t3;
  this.validateNotDisposed$0();
  t1 = this._ctx;
  t2 = t1 == null;
  t3 = this._liblib5$_canvas;
  if (t2)
    this._ctx = t3.get$context2d();
  else
    t1.clearRect$4(0, 0, t3.get$width(), t3.get$height());
  return this._liblib5$_element._stageDraw$1(this._ctx);
},
 childInvalidated$1: function(child) {
  this.validateNotDisposed$0();
  this._invalidatedEventHandle.fireEvent$1($.CTC13);
},
 Stage$2: function(_canvas, _element) {
  this._liblib5$_element.registerParent$1(this);
}
};

$$.CalcEngine = {"": ["_distanceElectionMapper", "_pluralityElectionMapper", "_condorcetElectionMapper", "_irvElectionMapper", "_voterHexMapper", "_highlightCandidates"],
 "super": "Object",
 get$locationData: function() {
  return this._distanceElectionMapper.get$input();
},
 set$locationData: function(data) {
  $.requireArgumentNotNull(data, 'data');
  this._distanceElectionMapper.set$input(data);
},
 candidatesMoved$0: function() {
  this.set$locationData(this.get$locationData());
},
 set$hoverPair: function(pair) {
  this._highlightCandidates = pair;
  this._updateVoterHexMapper$0();
},
 get$distanceElection: function() {
  return this._distanceElectionMapper.get$output();
},
 get$pluralityElection: function() {
  return this._pluralityElectionMapper.get$output();
},
 get$condorcetElection: function() {
  return this._condorcetElectionMapper.get$output();
},
 get$irvElection: function() {
  return this._irvElectionMapper.get$output();
},
 get$voterHexMap: function() {
  return this._voterHexMapper.get$output();
},
 addCandidate$0: function() {
  var newData = this.get$locationData().cloneAndAddCandidate$0();
  this._distanceElectionMapper.set$input(newData);
},
 removeCandidate$1: function(candidate) {
  var newData = this.get$locationData().cloneAndRemove$1(candidate);
  this._distanceElectionMapper.set$input(newData);
},
 get$locationDataChanged: function() {
  return this._distanceElectionMapper.get$inputChanged();
},
 get$distanceElectionChanged: function() {
  return this._distanceElectionMapper.get$outputChanged();
},
 get$pluralityElectionChanged: function() {
  return this._pluralityElectionMapper.get$outputChanged();
},
 get$condorcetElectionChanged: function() {
  return this._condorcetElectionMapper.get$outputChanged();
},
 get$irvElectionChanged: function() {
  return this._irvElectionMapper.get$outputChanged();
},
 get$voterHueMapperChanged: function() {
  return this._voterHexMapper.get$outputChanged();
},
 _distanceElectionChanged$0: function() {
  var t1 = this.get$distanceElection().get$ballots();
  this._pluralityElectionMapper.set$input(t1);
  t1 = this.get$distanceElection().get$ballots();
  this._condorcetElectionMapper.set$input(t1);
  t1 = this.get$distanceElection().get$ballots();
  this._irvElectionMapper.set$input(t1);
  this._updateVoterHexMapper$0();
},
 _updateVoterHexMapper$0: function() {
  var val = $.Tuple3$(this.get$distanceElection(), this.get$locationData(), this._highlightCandidates);
  this._voterHexMapper.set$input(val);
},
 CalcEngine$0: function() {
  var t1 = this._distanceElectionMapper.get$outputChanged();
  $.getInterceptor(t1).add$1(t1, new $.anon4(this));
}
};

$$._DistanceElectionMapper = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$._PluralityElectionMapper = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$._CondorcetElectionMapper = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$._IrvElectionMapper = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$._VoterHexMapper = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$.FutureValue = {"": [],
 "super": "Object",
 get$input: function() {
  return this._input;
},
 set$input: function(value) {
  this._input = value;
  if (this._future == null)
    this._startFuture$0();
  else
    this._pending = true;
  this._inputChangedHandle.fireEvent$1($.CTC13);
},
 get$output: function() {
  return this._output;
},
 get$outputChanged: function() {
  return this._outputChangedHandle;
},
 get$inputChanged: function() {
  return this._inputChangedHandle;
},
 _startFuture$0: function() {
  this._future = this.getFuture$1(this._input);
  this._future.handleException$1(this.get$_futureException());
  this._future.then$1(this.get$_futureCompleted());
},
 _futureException$1: function(exception) {
  this._future = null;
  this._errorHandle.fireEvent$1(exception);
  this._cleanup$0();
  return true;
},
 get$_futureException: function() { return new $.BoundClosure(this, '_futureException$1'); },
 _futureCompleted$1: function(value) {
  this._future = null;
  this._output = value;
  this._outputChangedHandle.fireEvent$1($.CTC13);
  this._cleanup$0();
},
 get$_futureCompleted: function() { return new $.BoundClosure(this, '_futureCompleted$1'); },
 _cleanup$0: function() {
  if (this._pending) {
    this._pending = false;
    this._startFuture$0();
  }
}
};

$$.FutureValueResult = {"": ["value>", "exception>", "_outputSerializer"],
 "super": "Object",
 get$isException: function() {
  return !(this.exception == null);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$value(), this.value) && $.eqB(other.get$exception(), this.exception);
},
 FutureValueResult$fromException$1: function(exception) {
  $.requireArgumentNotNull(this.exception, 'exception');
}
};

$$.SendPortValue = {"": [],
 "super": "FutureValue",
 inputSerializer$1: function(arg0) { return this.inputSerializer.call$1(arg0); },
 outputDeserializer$1: function(arg0) { return this.outputDeserializer.call$1(arg0); },
 getFuture$1: function(value) {
  var t1, t2;
  this._completer = $.Completer_Completer();
  t1 = this.inputSerializer == null;
  t2 = this._sendPort;
  if (t1)
    this._innerFuture = t2.call$1(value);
  else
    this._innerFuture = t2.call$1(this.inputSerializer$1(value));
  this._innerFuture.then$1(this.get$__futureCompleted());
  return this._completer.get$future();
},
 __futureCompleted$1: function(value) {
  this._innerFuture = null;
  if (typeof value === 'object' && value !== null && value.is$Map() && $.FutureValueResult_isMyMap(value))
    this._sendValueResultCompleted$1($.FutureValueResult_FutureValueResult$fromMap(value));
  else
    this._liblib3$_complete$1(value);
},
 get$__futureCompleted: function() { return new $.BoundClosure(this, '__futureCompleted$1'); },
 _sendValueResultCompleted$1: function(value) {
  if (value.get$isException() === true)
    this._completeException$1(value.get$exception());
  else
    this._liblib3$_complete$1(value.get$value());
},
 _liblib3$_complete$1: function(rawValue) {
  var c = this._completer;
  this._completer = null;
  c.complete$1(this._deserializer$1(rawValue));
},
 _completeException$1: function(exception) {
  var c = this._completer;
  this._completer = null;
  c.completeException$1(exception);
},
 _deserializer$1: function(input) {
  if (this.outputDeserializer == null)
    return input;
  else
    return this.outputDeserializer$1(input);
}
};

$$.MapPlayer = {"": ["_liblib4$_id>", "name>", "_liblib4$_location="],
 "super": "Player",
 get$location: function() {
  return this._liblib4$_location;
},
 set$location: function(value) {
  $.requireArgumentNotNull(value, 'value');
  this._liblib4$_location = value;
},
 get$id: function() {
  return this._liblib4$_id.get$id();
},
 compareTo$1: function(other) {
  var t1 = this._liblib4$_id;
  return $.getInterceptor(t1).compareTo$1(t1, other.get$_liblib4$_id());
},
 get$hashCode: function() {
  var t1 = this._liblib4$_id;
  return $.getInterceptor(t1).get$hashCode(t1);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$_liblib4$_id(), this._liblib4$_id);
},
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.name;
  if (t1 == null) {
    t1 = this._liblib4$_location.get$x();
    t2 = 'MapPlayer at [' + $.S($.getInterceptor(t1).toStringAsFixed$1(t1, 1)) + ', ';
    t3 = this._liblib4$_location.get$y();
    return t2 + $.S($.getInterceptor(t3).toStringAsFixed$1(t3, 1)) + ']';
  } else
    return t1;
}
};

$$.DistanceElection = {"": ["candidates>", "ballots>", "places>"],
 "super": "Election"
};

$$.DistanceElectionPlace = {"": ["avgDistance>", "avgDistanceSquared>", "place", "_items"],
 "super": "ElectionPlace"
};

$$.DistanceBallot = {"": ["_distances", "rank", "choice", "voter"],
 "super": "RankedBallot",
 getDistance$1: function(candidate) {
  var t1 = this._distances;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.getDistance$1$bailout(1, t1, candidate);
  if (candidate !== (candidate | 0))
    throw $.iae(candidate);
  if (candidate < 0 || candidate >= t1.length)
    throw $.ioore(candidate);
  return t1[candidate];
},
 getDistance$1$bailout: function(state0, t1, candidate) {
  return $.index(t1, candidate);
}
};

$$.LocationData = {"": ["candidates>", "voters>"],
 "super": "Object",
 cloneAndRemove$1: function(mp) {
  var t1, newCans;
  $.requireArgumentNotNull(mp, 'mp');
  t1 = this.candidates;
  newCans = $.getInterceptor(t1).filter$1(t1, new $.LocationData_cloneAndRemove_anon(mp)).toReadOnlyCollection$0();
  return $.LocationData$(this.voters, newCans);
},
 cloneAndAddCandidate$0: function() {
  var newCans, i, t1, newName, mp;
  newCans = this.candidates.toList$0();
  if (typeof newCans !== 'string' && (typeof newCans !== 'object' || newCans === null || newCans.constructor !== Array && !newCans.is$JavaScriptIndexingBehavior()))
    return this.cloneAndAddCandidate$0$bailout(1, newCans);
  for (i = 0; i < newCans.length; ++i) {
    t1 = newCans[i].get$name();
    if ($.gtB($.sub($.getInterceptor(t1).charCodeAt$1(t1, 0), 65), i))
      break;
  }
  newName = $.LocationData_getCandidateName(i);
  mp = $.MapPlayer$($.Vector$($.rnd().nextDouble$0(), $.rnd().nextDouble$0()).scale$1(10), newName);
  $.getInterceptor(newCans).insertRange$3(newCans, i, 1, mp);
  return $.LocationData$(this.voters, $.ReadOnlyCollection$(newCans));
},
 cloneAndAddCandidate$0$bailout: function(state0, newCans) {
  var i, t1, newName, mp;
  for (i = 0; $.ltB(i, $.getInterceptor(newCans).get$length(newCans)); ++i) {
    t1 = $.index(newCans, i).get$name();
    if ($.gtB($.sub($.getInterceptor(t1).charCodeAt$1(t1, 0), 65), i))
      break;
  }
  newName = $.LocationData_getCandidateName(i);
  mp = $.MapPlayer$($.Vector$($.rnd().nextDouble$0(), $.rnd().nextDouble$0()).scale$1(10), newName);
  $.getInterceptor(newCans).insertRange$3(newCans, i, 1, mp);
  return $.LocationData$(this.voters, $.ReadOnlyCollection$(newCans));
},
 LocationData$2: function(voters, candidates) {
}
};

$$.ElectionPlace = {"": ["place>", "_items"],
 "super": "ReadOnlyCollection",
 toString$0: function() {
  return 'Place: ' + $.S(this.place) + '; ' + $.S($.Enumerable.prototype.toString$0.call(this));
},
 ElectionPlace$2: function(place, candidates) {
}
};

$$.Player = {"": [],
 "super": "Object"
};

$$.Election = {"": [],
 "super": "Object"
};

$$.Ballot = {"": ["voter>"],
 "super": "Object",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$voter(), this.voter);
},
 get$hashCode: function() {
  var t1 = this.voter;
  return $.getInterceptor(t1).get$hashCode(t1);
}
};

$$.RankedBallot = {"": ["rank>"],
 "super": "PluralityBallot",
 toString$0: function() {
  var t1, t2;
  t1 = '{RankedBallot for \'' + $.S(this.voter) + '\', ranked ';
  t2 = this.rank;
  return t1 + $.S($.getInterceptor(t2).get$length(t2)) + ' candidates}';
}
};

$$.PluralityBallot = {"": ["choice>"],
 "super": "Ballot"
};

$$.PluralityElection = {"": ["ballots>", "_ballotGroup", "places>"],
 "super": "Election",
 get$candidates: function() {
  return this._ballotGroup.getKeys$0();
}
};

$$.PluralityElectionPlace = {"": ["voteCount>", "place", "_items"],
 "super": "ElectionPlace",
 toString$0: function() {
  return 'Votes: ' + $.S(this.voteCount) + '; ' + $.S($.ElectionPlace.prototype.toString$0.call(this));
},
 PluralityElectionPlace$3: function(place, candidates, voteCount) {
}
};

$$.CondorcetElection = {"": ["_pairs", "_profiles", "ballots>", "places>"],
 "super": "Election",
 get$candidates: function() {
  return this._profiles.get$keys();
},
 getPair$2: function(c1, c2) {
  var t1, filter;
  t1 = this._pairs;
  filter = $.getInterceptor(t1).filter$1(t1, new $.CondorcetElection_getPair_anon(c2, c1));
  if ($.getInterceptor(filter).get$isEmpty(filter) === true)
    return;
  else
    return $.getInterceptor(filter).iterator$0(filter).next$0().flip$2(c1, c2);
}
};

$$.CondorcetPair = {"": ["ballots>", "firstOverSecond>", "secondOverFirst>", "item1", "item2"],
 "super": "Tuple",
 get$winner: function() {
  var t1, t2;
  t1 = this.firstOverSecond;
  t2 = this.secondOverFirst;
  if ($.gtB(t1, t2))
    return this.item1;
  else if ($.gtB(t2, t1))
    return this.item2;
  else
    return;
},
 get$isTie: function() {
  return $.eq(this.firstOverSecond, this.secondOverFirst);
},
 matches$2: function(can1, can2) {
  var t0;
  $.requireArgumentNotNull(can1, 'can1');
  $.requireArgumentNotNull(can2, 'can2');
  $.requireArgument(!$.eqB(can1, can2), 'can1 and can2 must be different', null);
  if ($.gtB($.getInterceptor(can1).compareTo$1(can1, can2), 0)) {
    t0 = can2;
    can2 = can1;
    can1 = t0;
  }
  return $.eqB(this.item1, can1) && $.eqB(this.item2, can2);
},
 flip$2: function(can1, can2) {
  var t1, t2, t3, t0, flipped;
  t1 = this.item1;
  t2 = $.getInterceptor(t1);
  t3 = this.item2;
  if ($.gtB(t2.compareTo$1(t1, t3), 0))
    throw $.$$throw('already flipped!');
  $.requireArgumentNotNull(can1, 'can1');
  $.requireArgumentNotNull(can2, 'can2');
  $.requireArgument(!$.eqB(can1, can2), 'can1 and can2 must be different', null);
  if ($.gtB($.getInterceptor(can1).compareTo$1(can1, can2), 0)) {
    t0 = can2;
    can2 = can1;
    can1 = t0;
    flipped = true;
  } else
    flipped = false;
  $.requireArgument($.eq(can1, t1), 'can1', null);
  $.requireArgument($.eq(can2, t3), 'can1', null);
  if (flipped)
    return $.CondorcetPair$_internal(can2, can1, this.ballots, this.secondOverFirst, this.firstOverSecond);
  else
    return this;
}
};

$$.CondorcetCandidateProfile = {"": ["candidate>", "lostTo", "beat", "tied"],
 "super": "Object",
 get$hashCode: function() {
  var t1 = this.candidate;
  return $.getInterceptor(t1).get$hashCode(t1);
},
 toString$0: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = '[ ' + $.S(this.candidate) + ': Beat: ';
  t2 = this.beat;
  t3 = t1 + $.S($.getInterceptor(t2).get$length(t2)) + ', Tied: ';
  t4 = this.tied;
  t5 = t3 + $.S($.getInterceptor(t4).get$length(t4)) + ', Lost to: ';
  t6 = this.lostTo;
  return t5 + $.S($.getInterceptor(t6).get$length(t6));
}
};

$$.IrvElection = {"": ["candidates>", "ballots>", "rounds>"],
 "super": "Election"
};

$$.IrvRound = {"": ["places>", "eliminations>"],
 "super": "Object",
 get$isFinal: function() {
  var t1 = this.eliminations;
  return $.eq($.getInterceptor(t1).get$length(t1), 0);
},
 get$eliminatedCandidates: function() {
  var t1 = this.eliminations;
  return $.getInterceptor(t1).map$1(t1, new $.IrvRound_eliminatedCandidates_anon());
},
 get$candidates: function() {
  return this.places.selectMany$1(new $.IrvRound_candidates_anon());
}
};

$$.IrvElimination = {"": ["candidate>", "_transfers", "exhausted"],
 "super": "Object",
 getTransferCount$1: function(key) {
  var t1, list;
  t1 = this._transfers;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.getTransferCount$1$bailout(1, key, t1);
  if (key !== (key | 0))
    throw $.iae(key);
  if (key < 0 || key >= t1.length)
    throw $.ioore(key);
  list = t1[key];
  if (list == null)
    return 0;
  else
    return $.getInterceptor(list).get$length(list);
},
 getTransferCount$1$bailout: function(state0, key, t1) {
  var list = $.index(t1, key);
  if (list == null)
    return 0;
  else
    return $.getInterceptor(list).get$length(list);
},
 IrvElimination$3: function(candidate, _transfers, exhausted) {
}
};

$$.CandidateManagerView = {"": ["_requestRemoveCandidateHandle", "_requestNewCandidateHandle", "_candidates", "_node", "_dirty"],
 "super": "HtmlView",
 set$candidates: function(value) {
  this._candidates = value;
  this.markDirty$0();
},
 get$candidateRemoveRequest: function() {
  return this._requestRemoveCandidateHandle;
},
 get$newCandidateRequest: function() {
  return this._requestNewCandidateHandle;
},
 updateElement$0: function() {
  var t1, table, cell, addButton, t2, row, hue, t3, deleteButton;
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).clear$0(t1);
  table = $.TableElement_TableElement();
  cell = table.insertRow$1(-1).insertCell$1(-1);
  cell.set$colSpan(2);
  addButton = $.ButtonElement_ButtonElement();
  addButton.set$text('Add Candidate');
  t1 = this._candidates;
  if ($.ltB($.getInterceptor(t1).get$length(t1), 26)) {
    t1 = addButton.get$on().get$click();
    $.getInterceptor(t1).add$1(t1, this.get$_requestNewCandidate());
  } else
    addButton.set$disabled(true);
  t1 = cell.get$elements();
  $.getInterceptor(t1).add$1(t1, addButton);
  t1 = this._candidates;
  if (!(t1 == null))
    for (t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      row = table.insertRow$1(-1);
      hue = $.LocationData_getHue(t2);
      if (!(hue == null)) {
        t3 = $.HslColor_HslColor(hue, 1, 0.75).toRgb$0().toHex$0();
        row.get$style().set$background(t3);
      }
      cell = row.insertCell$1(-1);
      t3 = cell.get$classes();
      $.getInterceptor(t3).add$1(t3, 'candidate-cell');
      cell.set$innerHTML($.getInterceptor(t2).toString$0(t2));
      cell = row.insertCell$1(-1);
      deleteButton = $.ButtonElement_ButtonElement();
      deleteButton.set$text('Delete');
      t3 = deleteButton.get$dataAttributes();
      t2 = t2.get$id();
      $.indexSet(t3, 'candidate-id', $.getInterceptor(t2).toString$0(t2));
      t2 = this._candidates;
      if ($.gtB($.getInterceptor(t2).get$length(t2), 1)) {
        t2 = deleteButton.get$on().get$click();
        $.getInterceptor(t2).add$1(t2, this.get$_deleteClick());
      } else
        deleteButton.set$disabled(true);
      t2 = cell.get$elements();
      $.getInterceptor(t2).add$1(t2, deleteButton);
    }
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).add$1(t1, table);
},
 _requestNewCandidate$1: function(args) {
  var source = args.get$toElement();
  this._requestNewCandidateHandle.fireEvent$1($.CTC13);
  source.set$disabled(true);
},
 get$_requestNewCandidate: function() { return new $.BoundClosure(this, '_requestNewCandidate$1'); },
 _deleteClick$1: function(args) {
  var source = args.get$toElement();
  this._removeCandidateWithId$1($.int_parse($.index(source.get$dataAttributes(), 'candidate-id')));
  source.set$disabled(true);
},
 get$_deleteClick: function() { return new $.BoundClosure(this, '_deleteClick$1'); },
 _removeCandidateWithId$1: function(id) {
  var candidate = this._candidates.single$1(new $.CandidateManagerView__removeCandidateWithId_anon(id));
  this._requestRemoveCandidateHandle.fireEvent$1(candidate);
}
};

$$.PluralityView = {"": ["_election", "_node", "_dirty"],
 "super": "HtmlView",
 set$election: function(election) {
  this._election = election;
  this.markDirty$0();
},
 updateElement$0: function() {
  var t1, table, row, cell, evenPlaceRow, evenCandidateRow, t2, t3, first, t4, t5, t6, hue;
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).clear$0(t1);
  table = $.TableElement_TableElement();
  row = table.insertRow$1(-1);
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Place');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Candidate');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  t1 = row.get$classes();
  $.getInterceptor(t1).add$1(t1, 'row-odd');
  cell.set$innerHTML('Votes');
  t1 = this._election;
  if (!(t1 == null))
    for (t1 = t1.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1), evenPlaceRow = true, evenCandidateRow = true; t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      for (t3 = $.getInterceptor(t2).iterator$0(t2), first = true; t3.get$hasNext() === true;) {
        t4 = t3.next$0();
        row = table.insertRow$1(-1);
        t5 = row.get$classes();
        t6 = $.getInterceptor(t5);
        t6.add$1(t5, evenPlaceRow ? 'row-even' : 'row-odd');
        if (first) {
          cell = $.Element_Element$tag('th');
          t5 = row.get$elements();
          $.getInterceptor(t5).add$1(t5, cell);
          t5 = cell.get$classes();
          $.getInterceptor(t5).add$1(t5, 'place-number');
          cell.set$rowSpan($.getInterceptor(t2).get$length(t2));
          t5 = t2.get$place();
          cell.set$innerHTML($.getInterceptor(t5).toString$0(t5));
        }
        cell = row.insertCell$1(-1);
        t5 = cell.get$classes();
        $.getInterceptor(t5).add$1(t5, 'candidate-cell');
        hue = $.LocationData_getHue(t4);
        if (!(hue == null)) {
          t5 = $.HslColor_HslColor(hue, 1, 0.75).toRgb$0().toHex$0();
          cell.get$style().set$background(t5);
        }
        cell.set$innerHTML($.getInterceptor(t4).toString$0(t4));
        if (first) {
          cell = row.insertCell$1(-1);
          cell.set$rowSpan($.getInterceptor(t2).get$length(t2));
          t4 = t2.get$voteCount();
          cell.set$innerHTML($.getInterceptor(t4).toString$0(t4));
          t5 = cell.get$classes();
          $.getInterceptor(t5).add$1(t5, 'vote-count');
          first = false;
        }
        evenCandidateRow = !evenCandidateRow;
      }
      evenPlaceRow = !evenPlaceRow;
    }
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).add$1(t1, table);
}
};

$$.DistanceView = {"": ["_election", "_node", "_dirty"],
 "super": "HtmlView",
 set$election: function(value) {
  this._election = value;
  this.markDirty$0();
},
 updateElement$0: function() {
  var t1, table, row, cell, evenPlaceRow, evenCandidateRow, t2, t3, first, t4, t5, t6, hue;
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).clear$0(t1);
  table = $.TableElement_TableElement();
  row = table.insertRow$1(-1);
  t1 = row.get$classes();
  $.getInterceptor(t1).add$1(t1, 'row-odd');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Place');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Candidate');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Avg Dist');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Avg Dist\xb2');
  t1 = this._election;
  if (!(t1 == null))
    for (t1 = t1.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1), evenPlaceRow = true, evenCandidateRow = true; t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      for (t3 = $.getInterceptor(t2).iterator$0(t2), first = true; t3.get$hasNext() === true;) {
        t4 = t3.next$0();
        row = table.insertRow$1(-1);
        t5 = row.get$classes();
        t6 = $.getInterceptor(t5);
        t6.add$1(t5, evenPlaceRow ? 'row-even' : 'row-odd');
        if (first) {
          cell = $.Element_Element$tag('th');
          t5 = row.get$elements();
          $.getInterceptor(t5).add$1(t5, cell);
          t5 = cell.get$classes();
          $.getInterceptor(t5).add$1(t5, 'place-number');
          cell.set$rowSpan($.getInterceptor(t2).get$length(t2));
          t5 = t2.get$place();
          cell.set$innerHTML($.getInterceptor(t5).toString$0(t5));
        }
        cell = row.insertCell$1(-1);
        t5 = cell.get$classes();
        $.getInterceptor(t5).add$1(t5, 'candidate-cell');
        hue = $.LocationData_getHue(t4);
        if (!(hue == null)) {
          t5 = $.HslColor_HslColor(hue, 1, 0.75).toRgb$0().toHex$0();
          cell.get$style().set$background(t5);
        }
        cell.set$innerHTML($.getInterceptor(t4).toString$0(t4));
        if (first) {
          cell = row.insertCell$1(-1);
          cell.set$rowSpan($.getInterceptor(t2).get$length(t2));
          t4 = t2.get$avgDistance();
          cell.set$innerHTML($.getInterceptor(t4).toStringAsFixed$1(t4, 2));
          t5 = cell.get$classes();
          $.getInterceptor(t5).add$1(t5, 'vote-count');
          cell = row.insertCell$1(-1);
          cell.set$rowSpan($.getInterceptor(t2).get$length(t2));
          t5 = t2.get$avgDistanceSquared();
          cell.set$innerHTML($.getInterceptor(t5).toStringAsFixed$1(t5, 2));
          t6 = cell.get$classes();
          $.getInterceptor(t6).add$1(t6, 'vote-count');
          first = false;
        }
        evenCandidateRow = !evenCandidateRow;
      }
      evenPlaceRow = !evenPlaceRow;
    }
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).add$1(t1, table);
}
};

$$.CondorcetView = {"": ["_hoverChangedHandle", "_election", "_candidates", "_liblib6$_highlightCandidates", "_node", "_dirty"],
 "super": "HtmlView",
 set$election: function(election) {
  this._election = election;
  this._candidates = null;
  this.markDirty$0();
},
 get$hoverChanged: function() {
  return this._hoverChangedHandle;
},
 get$highlightCandidates: function() {
  return this._liblib6$_highlightCandidates;
},
 updateElement$0: function() {
  var t1, table, row, cell, t2, t3, evenPlaceRow, evenCandidateRow, first, t4, t5, t6, pair, leftColor, rightColor, middleText, cellClass, cellData, t7, cell0, cell1, t8;
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).clear$0(t1);
  table = $.TableElement_TableElement();
  row = table.insertRow$1(-1);
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  t1 = row.get$classes();
  $.getInterceptor(t1).add$1(t1, 'row-odd');
  cell.set$innerHTML('Place');
  cell = $.Element_Element$tag('th');
  t1 = row.get$elements();
  $.getInterceptor(t1).add$1(t1, cell);
  cell.set$innerHTML('Candidate');
  t1 = this._election;
  if (!(t1 == null)) {
    this._candidates = t1.get$places().selectMany$1(new $.CondorcetView_updateElement_anon()).toReadOnlyCollection$0();
    for (t1 = this._candidates, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      cell = $.Element_Element$tag('th');
      t3 = row.get$elements();
      $.getInterceptor(t3).add$1(t3, cell);
      cell.set$innerHTML($.getInterceptor(t2).toString$0(t2));
      t2 = $.getCandidateHexColor(t2, false);
      cell.get$style().set$background(t2);
      cell.set$colSpan(3);
    }
    for (t1 = this._election.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1), evenPlaceRow = true, evenCandidateRow = true; t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      for (t3 = $.getInterceptor(t2).iterator$0(t2), first = true; t3.get$hasNext() === true;) {
        t4 = t3.next$0();
        row = table.insertRow$1(-1);
        t5 = row.get$classes();
        t6 = $.getInterceptor(t5);
        t6.add$1(t5, evenPlaceRow ? 'row-even' : 'row-odd');
        if (first) {
          cell = $.Element_Element$tag('th');
          t5 = row.get$elements();
          $.getInterceptor(t5).add$1(t5, cell);
          t5 = cell.get$classes();
          $.getInterceptor(t5).add$1(t5, 'place-number');
          cell.set$rowSpan($.getInterceptor(t2).get$length(t2));
          t5 = t2.get$place();
          cell.set$innerHTML($.getInterceptor(t5).toString$0(t5));
          first = false;
        }
        cell = row.insertCell$1(-1);
        t5 = cell.get$classes();
        $.getInterceptor(t5).add$1(t5, 'candidate-cell');
        t5 = $.getCandidateHexColor(t4, false);
        cell.get$style().set$background(t5);
        cell.set$innerHTML($.getInterceptor(t4).toString$0(t4));
        for (t5 = this._candidates, t5 = $.getInterceptor(t5).iterator$0(t5); t5.get$hasNext() === true;) {
          t6 = t5.next$0();
          if ($.eqB(t6, t4)) {
            cell = row.insertCell$1(-1);
            cell.get$style().set$background('#999999');
            cell.set$colSpan(3);
          } else {
            pair = this._election.getPair$2(t4, t6);
            if ($.eqB(t4, pair.get$winner())) {
              leftColor = $.getCandidateHexColor(t4, true);
              rightColor = $.getCandidateHexColor(t6, true);
              middleText = '&gt;';
              cellClass = 'winner';
            } else if ($.eqB(t6, pair.get$winner())) {
              leftColor = $.getCandidateHexColor(t4, false);
              rightColor = $.getCandidateHexColor(t6, false);
              middleText = '&lt;';
              cellClass = 'loser';
            } else {
              leftColor = $.getCandidateHexColor(t4, true);
              rightColor = $.getCandidateHexColor(t6, true);
              middleText = '=';
              cellClass = 'tie';
            }
            cellData = this._getPairElementName$2(t4, t6);
            cell = row.insertCell$1(-1);
            t6 = pair.get$firstOverSecond();
            cell.set$innerHTML($.getInterceptor(t6).toString$0(t6));
            cell.get$style().set$color(leftColor);
            t7 = cell.get$classes();
            $.getInterceptor(t7).add$1(t7, 'vote-count');
            t7 = cell.get$classes();
            $.getInterceptor(t7).add$1(t7, 'pair-cell');
            t7 = cell.get$classes();
            $.getInterceptor(t7).add$1(t7, cellData);
            t7 = cell.get$classes();
            $.getInterceptor(t7).add$1(t7, cellClass);
            t7 = cell.get$classes();
            $.getInterceptor(t7).add$1(t7, 'left_value');
            $.indexSet(cell.get$dataAttributes(), 'pair-ids', cellData);
            cell0 = row.insertCell$1(-1);
            cell0.set$innerHTML(middleText);
            t7 = cell0.get$classes();
            $.getInterceptor(t7).add$1(t7, 'pair-cell');
            t7 = cell0.get$classes();
            $.getInterceptor(t7).add$1(t7, cellClass);
            t7 = cell0.get$classes();
            $.getInterceptor(t7).add$1(t7, cellData);
            $.indexSet(cell0.get$dataAttributes(), 'pair-ids', cellData);
            cell1 = row.insertCell$1(-1);
            t7 = pair.get$secondOverFirst();
            cell1.set$innerHTML($.getInterceptor(t7).toString$0(t7));
            cell1.get$style().set$color(rightColor);
            t8 = cell1.get$classes();
            $.getInterceptor(t8).add$1(t8, 'vote-count');
            t8 = cell1.get$classes();
            $.getInterceptor(t8).add$1(t8, 'right_value');
            t8 = cell1.get$classes();
            $.getInterceptor(t8).add$1(t8, cellClass);
            t8 = cell1.get$classes();
            $.getInterceptor(t8).add$1(t8, 'pair-cell');
            t8 = cell1.get$classes();
            $.getInterceptor(t8).add$1(t8, cellData);
            $.indexSet(cell1.get$dataAttributes(), 'pair-ids', cellData);
            cell = cell1;
          }
        }
        evenCandidateRow = !evenCandidateRow;
      }
      evenPlaceRow = !evenPlaceRow;
    }
  }
  t1 = table.get$on().get$mouseMove();
  $.getInterceptor(t1).add$1(t1, this.get$_onMouseOver());
  t1 = table.get$on().get$mouseOut();
  $.getInterceptor(t1).add$1(t1, this.get$_onMouseOut());
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).add$1(t1, table);
},
 set$_thePair: function(pair) {
  if (!$.eqB(pair, this._liblib6$_highlightCandidates)) {
    this._liblib6$_highlightCandidates = pair;
    this._updateCellHoverStyle$0();
    this._hoverChangedHandle.fireEvent$1($.CTC13);
  }
},
 _updateCellHoverStyle$0: function() {
  var cells, t1, matchClass, thePairs;
  cells = this.get$node().queryAll$1('td.pair-cell.hover-pair');
  $.getInterceptor(cells).forEach$1(cells, new $.CondorcetView__updateCellHoverStyle_anon('hover-pair'));
  t1 = this._liblib6$_highlightCandidates;
  if (!(t1 == null)) {
    matchClass = this._getPairElementName$2($.index(t1, 0), $.index(this._liblib6$_highlightCandidates, 1));
    thePairs = this.get$node().queryAll$1('td.pair-cell.' + $.S(matchClass));
    $.getInterceptor(thePairs).forEach$1(thePairs, new $.CondorcetView__updateCellHoverStyle_anon0('hover-pair'));
  }
},
 _onMouseOver$1: function(e) {
  var t1, pair;
  t1 = e.get$toElement();
  if (typeof t1 === 'object' && t1 !== null && t1.is$Element()) {
    pair = $.CondorcetView__getPair(e.get$toElement());
    if (!(pair == null)) {
      this.set$_thePair([$.index(this._candidates, pair.get$item1()), $.index(this._candidates, pair.get$item2())]);
      return;
    }
  }
  this.set$_thePair(null);
},
 get$_onMouseOver: function() { return new $.BoundClosure(this, '_onMouseOver$1'); },
 _onMouseOut$1: function(args) {
  this.set$_thePair(null);
},
 get$_onMouseOut: function() { return new $.BoundClosure(this, '_onMouseOut$1'); },
 _getPairElementName$2: function(can1, can2) {
  var t1, cIndex, oIndex;
  t1 = this._candidates;
  cIndex = $.getInterceptor(t1).indexOf$1(t1, can1);
  t1 = this._candidates;
  oIndex = $.getInterceptor(t1).indexOf$1(t1, can2);
  return 'pair' + $.S($.min(cIndex, oIndex)) + '_' + $.S($.max(cIndex, oIndex));
}
};

$$.IrvView = {"": ["_hoverChangedHandle", "_highlightRound", "_election", "_node", "_dirty"],
 "super": "HtmlView",
 get$election: function() {
  return this._election;
},
 set$election: function(value) {
  this._election = value;
  this.markDirty$0();
},
 get$hoverChanged: function() {
  return this._hoverChangedHandle;
},
 get$highlightCandidates: function() {
  var t1 = this._highlightRound;
  if (t1 == null)
    return;
  else
    return $.index(this._election.get$rounds(), t1).get$candidates().toList$0();
},
 updateElement$0: function() {
  var t1, table, cell, previousPlaces, i, round, drawPlaces, t2, i0, currentPlace, previousPlace, j, row, t3, t4, t5, t6, el, ei, elimination, foundSelf, transferCount;
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).clear$0(t1);
  if (this.get$election() == null)
    return;
  t1 = this._election.get$rounds();
  $.getInterceptor(t1).first$0(t1).get$places().selectMany$1(new $.IrvView_updateElement_anon()).toReadOnlyCollection$0();
  table = $.TableElement_TableElement();
  for (cell = null, previousPlaces = null, i = 0; t1 = this.get$election().get$rounds(), $.ltB(i, $.getInterceptor(t1).get$length(t1)); i = i0) {
    round = $.index(this.get$election().get$rounds(), i);
    if (previousPlaces == null)
      drawPlaces = true;
    else {
      t1 = $.getInterceptor(previousPlaces).get$length(previousPlaces);
      t2 = round.get$places();
      if ($.ltB(t1, $.getInterceptor(t2).get$length(t2)))
        drawPlaces = true;
      else
        for (drawPlaces = false, i0 = 0; t1 = round.get$places(), $.ltB(i0, $.getInterceptor(t1).get$length(t1)); ++i0) {
          currentPlace = $.index(round.get$places(), i0);
          if (typeof currentPlace !== 'string' && (typeof currentPlace !== 'object' || currentPlace === null || currentPlace.constructor !== Array && !currentPlace.is$JavaScriptIndexingBehavior()))
            return this.updateElement$0$bailout(1, previousPlaces, i, drawPlaces, i0, currentPlace, table, round, cell);
          previousPlace = $.index(previousPlaces, i0);
          if (typeof previousPlace !== 'string' && (typeof previousPlace !== 'object' || previousPlace === null || previousPlace.constructor !== Array && !previousPlace.is$JavaScriptIndexingBehavior()))
            return this.updateElement$0$bailout(2, previousPlaces, i, drawPlaces, i0, currentPlace, previousPlace, table, round, cell);
          if (currentPlace.length !== previousPlace.length)
            drawPlaces = true;
          else
            for (j = 0; j < currentPlace.length; ++j) {
              t1 = currentPlace[j];
              if (j >= previousPlace.length)
                throw $.ioore(j);
              if (!$.eqB(t1, previousPlace[j])) {
                drawPlaces = true;
                break;
              }
            }
        }
    }
    previousPlaces = round.get$places();
    if (drawPlaces) {
      row = table.insertRow$1(-1);
      row.insertCell$1(-1).set$innerHTML('&nbsp;');
      for (t1 = round.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        cell = $.Element_Element$tag('th');
        t3 = row.get$elements();
        $.getInterceptor(t3).add$1(t3, cell);
        cell.set$colSpan($.getInterceptor(t2).get$length(t2));
        t2 = t2.get$place();
        cell.set$innerHTML($.getInterceptor(t2).toString$0(t2));
        t3 = cell.get$classes();
        $.getInterceptor(t3).add$1(t3, 'candidate-cell');
      }
      row = table.insertRow$1(-1);
      row.insertCell$1(-1).set$innerHTML('&nbsp;');
      for (t1 = round.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        for (t2 = $.getInterceptor(t2).iterator$0(t2); t2.get$hasNext() === true;) {
          t3 = t2.next$0();
          cell = $.Element_Element$tag('th');
          t4 = row.get$elements();
          $.getInterceptor(t4).add$1(t4, cell);
          cell.set$innerHTML($.getInterceptor(t3).toString$0(t3));
          t4 = cell.get$classes();
          $.getInterceptor(t4).add$1(t4, 'candidate-cell');
          t3 = $.getCandidateHexColor(t3, false);
          cell.get$style().set$background(t3);
        }
      }
    }
    row = table.insertRow$1(-1);
    cell = $.Element_Element$tag('th');
    i0 = i + 1;
    cell.set$innerHTML('Round ' + $.S(i0));
    t1 = cell.get$classes();
    $.getInterceptor(t1).add$1(t1, 'irv_round');
    $.indexSet(cell.get$dataAttributes(), 'roundIndex', $.getInterceptor(i).toString$0(i));
    t1 = row.get$elements();
    $.getInterceptor(t1).add$1(t1, cell);
    for (t1 = round.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      for (t3 = $.getInterceptor(t2).iterator$0(t2); t3.get$hasNext() === true;) {
        t4 = t3.next$0();
        cell = row.insertCell$1(-1);
        t5 = t2.get$voteCount();
        cell.set$innerHTML($.getInterceptor(t5).toString$0(t5));
        t6 = cell.get$classes();
        $.getInterceptor(t6).add$1(t6, 'candidate-cell');
        t6 = cell.get$classes();
        $.getInterceptor(t6).add$1(t6, 'vote-count');
        t4 = $.getCandidateHexColor(t4, false);
        cell.get$style().set$background(t4);
      }
    }
    t1 = round.get$eliminations();
    el = $.getInterceptor(t1).get$length(t1);
    if (typeof el !== 'number')
      return this.updateElement$0$bailout(3, row, el, cell, i0, table, previousPlaces, round);
    for (ei = 0; ei < el; ++ei) {
      elimination = $.index(round.get$eliminations(), el - ei - 1);
      row = table.insertRow$1(-1);
      cell = row.insertCell$1(-1);
      t1 = elimination.get$candidate();
      cell.set$innerHTML($.getInterceptor(t1).toString$0(t1));
      cell.get$style().set$fontStyle('italic');
      cell.get$style().set$textAlign('right');
      for (t1 = round.get$candidates(), t1 = $.getInterceptor(t1).iterator$0(t1), foundSelf = false; t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        cell = row.insertCell$1(-1);
        if ($.eqB(t2, elimination.get$candidate())) {
          cell.set$innerHTML('&larr;');
          foundSelf = true;
        } else {
          transferCount = elimination.getTransferCount$1(t2);
          if ($.gtB(transferCount, 0)) {
            cell.set$innerHTML($.getInterceptor(transferCount).toString$0(transferCount));
            t2 = cell.get$classes();
            $.getInterceptor(t2).add$1(t2, 'vote-count');
          }
        }
      }
    }
  }
  t1 = table.get$on().get$mouseMove();
  $.getInterceptor(t1).add$1(t1, this.get$_onMouseOver());
  t1 = table.get$on().get$mouseOut();
  $.getInterceptor(t1).add$1(t1, this.get$_onMouseOut());
  t1 = this.get$node().get$elements();
  $.getInterceptor(t1).add$1(t1, table);
  this._updateHighlightedRound$1(null);
},
 updateElement$0$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      cell = env7;
      round = env6;
      table = env5;
      currentPlace = env4;
      i0 = env3;
      drawPlaces = env2;
      i = env1;
      previousPlaces = env0;
      break;
    case 2:
      cell = env8;
      round = env7;
      table = env6;
      previousPlace = env5;
      currentPlace = env4;
      i0 = env3;
      drawPlaces = env2;
      i = env1;
      previousPlaces = env0;
      break;
    case 3:
      round = env6;
      previousPlaces = env5;
      table = env4;
      i0 = env3;
      cell = env2;
      el = env1;
      row = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.get$node().get$elements();
      $.getInterceptor(t1).clear$0(t1);
      if (this.get$election() == null)
        return;
      t1 = this._election.get$rounds();
      $.getInterceptor(t1).first$0(t1).get$places().selectMany$1(new $.IrvView_updateElement_anon()).toReadOnlyCollection$0();
      table = $.TableElement_TableElement();
      cell = null;
      previousPlaces = null;
      i = 0;
    default:
      var t1, table, cell, previousPlaces, i, round, drawPlaces, t2, i0, currentPlace, previousPlace, j, row, t3, t4, t5, t6, el, ei, elimination, foundSelf, transferCount;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = this.get$election().get$rounds();
              if (!$.ltB(i, $.getInterceptor(t1).get$length(t1)))
                break L0;
              round = $.index(this.get$election().get$rounds(), i);
            default:
              if (state0 === 0 && previousPlaces == null)
                drawPlaces = true;
              else
                switch (state0) {
                  case 0:
                    t1 = $.getInterceptor(previousPlaces).get$length(previousPlaces);
                    t2 = round.get$places();
                  default:
                    if (state0 === 0 && $.ltB(t1, $.getInterceptor(t2).get$length(t2)))
                      drawPlaces = true;
                    else
                      switch (state0) {
                        case 0:
                          drawPlaces = false;
                          i0 = 0;
                        default:
                          L1:
                            while (true)
                              switch (state0) {
                                case 0:
                                  t1 = round.get$places();
                                  if (!$.ltB(i0, $.getInterceptor(t1).get$length(t1)))
                                    break L1;
                                  currentPlace = $.index(round.get$places(), i0);
                                case 1:
                                  state0 = 0;
                                  previousPlace = $.index(previousPlaces, i0);
                                case 2:
                                  state0 = 0;
                                  if (!$.eqB($.getInterceptor(currentPlace).get$length(currentPlace), $.getInterceptor(previousPlace).get$length(previousPlace)))
                                    drawPlaces = true;
                                  else
                                    for (j = 0; $.ltB(j, $.getInterceptor(currentPlace).get$length(currentPlace)); ++j)
                                      if (!$.eqB($.index(currentPlace, j), $.index(previousPlace, j))) {
                                        drawPlaces = true;
                                        break;
                                      }
                                  ++i0;
                              }
                      }
                }
              previousPlaces = round.get$places();
              if (drawPlaces) {
                row = table.insertRow$1(-1);
                row.insertCell$1(-1).set$innerHTML('&nbsp;');
                for (t1 = round.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
                  t2 = t1.next$0();
                  cell = $.Element_Element$tag('th');
                  t3 = row.get$elements();
                  $.getInterceptor(t3).add$1(t3, cell);
                  cell.set$colSpan($.getInterceptor(t2).get$length(t2));
                  t2 = t2.get$place();
                  cell.set$innerHTML($.getInterceptor(t2).toString$0(t2));
                  t3 = cell.get$classes();
                  $.getInterceptor(t3).add$1(t3, 'candidate-cell');
                }
                row = table.insertRow$1(-1);
                row.insertCell$1(-1).set$innerHTML('&nbsp;');
                for (t1 = round.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
                  t2 = t1.next$0();
                  for (t2 = $.getInterceptor(t2).iterator$0(t2); t2.get$hasNext() === true;) {
                    t3 = t2.next$0();
                    cell = $.Element_Element$tag('th');
                    t4 = row.get$elements();
                    $.getInterceptor(t4).add$1(t4, cell);
                    cell.set$innerHTML($.getInterceptor(t3).toString$0(t3));
                    t4 = cell.get$classes();
                    $.getInterceptor(t4).add$1(t4, 'candidate-cell');
                    t3 = $.getCandidateHexColor(t3, false);
                    cell.get$style().set$background(t3);
                  }
                }
              }
              row = table.insertRow$1(-1);
              cell = $.Element_Element$tag('th');
              i0 = i + 1;
              cell.set$innerHTML('Round ' + $.S(i0));
              t1 = cell.get$classes();
              $.getInterceptor(t1).add$1(t1, 'irv_round');
              $.indexSet(cell.get$dataAttributes(), 'roundIndex', $.getInterceptor(i).toString$0(i));
              t1 = row.get$elements();
              $.getInterceptor(t1).add$1(t1, cell);
              for (t1 = round.get$places(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
                t2 = t1.next$0();
                for (t3 = $.getInterceptor(t2).iterator$0(t2); t3.get$hasNext() === true;) {
                  t4 = t3.next$0();
                  cell = row.insertCell$1(-1);
                  t5 = t2.get$voteCount();
                  cell.set$innerHTML($.getInterceptor(t5).toString$0(t5));
                  t6 = cell.get$classes();
                  $.getInterceptor(t6).add$1(t6, 'candidate-cell');
                  t6 = cell.get$classes();
                  $.getInterceptor(t6).add$1(t6, 'vote-count');
                  t4 = $.getCandidateHexColor(t4, false);
                  cell.get$style().set$background(t4);
                }
              }
              t1 = round.get$eliminations();
              el = $.getInterceptor(t1).get$length(t1);
            case 3:
              state0 = 0;
              for (ei = 0; $.ltB(ei, el); ++ei) {
                elimination = $.index(round.get$eliminations(), $.sub($.sub(el, ei), 1));
                row = table.insertRow$1(-1);
                cell = row.insertCell$1(-1);
                t1 = elimination.get$candidate();
                cell.set$innerHTML($.getInterceptor(t1).toString$0(t1));
                cell.get$style().set$fontStyle('italic');
                cell.get$style().set$textAlign('right');
                for (t1 = round.get$candidates(), t1 = $.getInterceptor(t1).iterator$0(t1), foundSelf = false; t1.get$hasNext() === true;) {
                  t2 = t1.next$0();
                  cell = row.insertCell$1(-1);
                  if ($.eqB(t2, elimination.get$candidate())) {
                    cell.set$innerHTML('&larr;');
                    foundSelf = true;
                  } else {
                    transferCount = elimination.getTransferCount$1(t2);
                    if ($.gtB(transferCount, 0)) {
                      cell.set$innerHTML($.getInterceptor(transferCount).toString$0(transferCount));
                      t2 = cell.get$classes();
                      $.getInterceptor(t2).add$1(t2, 'vote-count');
                    }
                  }
                }
              }
              i = i0;
          }
      t1 = table.get$on().get$mouseMove();
      $.getInterceptor(t1).add$1(t1, this.get$_onMouseOver());
      t1 = table.get$on().get$mouseOut();
      $.getInterceptor(t1).add$1(t1, this.get$_onMouseOut());
      t1 = this.get$node().get$elements();
      $.getInterceptor(t1).add$1(t1, table);
      this._updateHighlightedRound$1(null);
  }
},
 _onMouseOver$1: function(e) {
  var t1, elem;
  t1 = e.get$toElement();
  if (typeof t1 === 'object' && t1 !== null && t1.is$Element()) {
    elem = e.get$toElement();
    t1 = elem.get$classes();
    if ($.getInterceptor(t1).contains$1(t1, 'irv_round') === true) {
      this._updateHighlightedRound$1($.int_parse($.index(elem.get$dataAttributes(), 'roundIndex')));
      return;
    }
  }
  this._updateHighlightedRound$1(null);
},
 get$_onMouseOver: function() { return new $.BoundClosure(this, '_onMouseOver$1'); },
 _onMouseOut$1: function(args) {
  this._updateHighlightedRound$1(null);
},
 get$_onMouseOut: function() { return new $.BoundClosure(this, '_onMouseOut$1'); },
 _updateHighlightedRound$1: function(roundIndex) {
  if (!$.eqB(roundIndex, this._highlightRound)) {
    this._highlightRound = roundIndex;
    this._hoverChangedHandle.fireEvent$1($.CTC13);
  }
}
};

$$.RootMapElement = {"": ["_voterMap", "_candidateMap", "_tx>", "_candidatesMovedHandle", "_averageCloseness", "_bounds", "_radius=", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "ParentElement",
 get$candidatesMoved: function() {
  return this._candidatesMovedHandle;
},
 candidatesMoved$0: function() { return this.get$candidatesMoved().call$0(); },
 get$visualChildCount: function() {
  return 2;
},
 getVisualChild$1: function(index) {
  switch (index) {
    case 0:
      return this._voterMap;
    case 1:
      return this._candidateMap;
    default:
      throw $.$$throw('bad index, foo!');
  }
},
 set$locationData: function(data) {
  this.set$voters(data.get$voters());
  this.set$candidates(data.get$candidates());
  this.invalidateDraw$0();
},
 get$voters: function() {
  return this._voterMap.get$players();
},
 set$voterHexMap: function(value) {
  this._voterMap.set$playerHexMap(value);
},
 set$voters: function(value) {
  var vals;
  $.requireArgumentNotNull(value, 'value');
  vals = $.Tuple$(1, $.Box$(0, 0, 10, 10));
  this._averageCloseness = vals.item1;
  this._bounds = vals.item2;
  this._radius = null;
  this._voterMap.set$players(value);
},
 set$candidates: function(value) {
  $.requireArgumentNotNull(value, 'value');
  this._candidateMap.set$players(value);
},
 set$showOnlyPlayers: function(value) {
  this._candidateMap.set$showOnlyPlayers(value);
},
 dragCandidate$2: function(candidate, delta) {
  var can, t1, newCanLocPix;
  can = $.$$(this._candidateMap.get$players()).single$1(new $.RootMapElement_dragCandidate_anon(candidate));
  t1 = this._tx;
  newCanLocPix = $.add(t1.transformCoordinate$1(candidate.get$location()), delta);
  can.set$location($.CTC15.constrain$1(t1.createInverse$0().transformCoordinate$1(newCanLocPix)));
  this._candidatesMovedHandle.fireEvent$1($.CTC13);
},
 update$0: function() {
  var t1, dataScale, t2, t3, scale, offsetY, offsetX;
  t1 = this._bounds;
  if (!(t1 == null) && this._radius == null) {
    dataScale = $.Size$($.add(t1.get$width(), this._averageCloseness), $.add(this._bounds.get$height(), this._averageCloseness));
    t1 = $.gtB(dataScale.get$aspectRatio(), this.get$size().get$aspectRatio());
    t2 = dataScale.width;
    t3 = dataScale.height;
    if (t1) {
      scale = $.div(this.get$width(), t2);
      offsetY = $.div($.sub($.div(this.get$height(), scale), t3), 2);
      offsetX = 0;
    } else {
      scale = $.div(this.get$height(), t3);
      offsetX = $.div($.sub($.div(this.get$width(), scale), t2), 2);
      offsetY = 0;
    }
    t1 = this._tx;
    t1.setToScale$2(scale, scale);
    t1.translate$2($.add($.add(this._bounds.get$left(), $.div(this._averageCloseness, 2)), offsetX), $.add($.add(this._bounds.get$top(), $.div(this._averageCloseness, 2)), offsetY));
    this._radius = $.mul(this._averageCloseness, 0.3);
  }
  t1 = [this._voterMap, this._candidateMap];
  $.getInterceptor(t1).forEach$1(t1, new $.RootMapElement_update_anon(this));
  $.ParentElement.prototype.update$0.call(this);
},
 RootMapElement$2: function(w, h) {
  this._voterMap.registerParent$1(this);
  this._candidateMap.registerParent$1(this);
}
};

$$.VoterMapElement = {"": ["_players", "_tx>", "_radius=", "_liblib8$_map", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 setTransform$1: function(value) {
  $.requireArgumentNotNull(value, 'value');
  this._tx.setFromTransfrom$1(value);
  this.invalidateDraw$0();
},
 get$players: function() {
  return this._players;
},
 set$players: function(value) {
  var t1;
  $.requireArgumentNotNull(value, 'value');
  t1 = this._players;
  $.getInterceptor(t1).clear$0(t1);
  $.getInterceptor(t1).addAll$1(t1, value);
  this.invalidateDraw$0();
},
 set$playerHexMap: function(value) {
  this._liblib8$_map = value;
  this.invalidateDraw$0();
},
 drawOverride$1: function(ctx) {
  var t1;
  for (t1 = this._players, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;)
    this._drawPlayer$2(ctx, t1.next$0());
},
 _drawPlayer$2: function(ctx, player) {
  var t1, hex, txLoc, t2, t3, t4;
  t1 = this._liblib8$_map;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._drawPlayer$2$bailout(1, ctx, player, t1);
  if (player !== (player | 0))
    throw $.iae(player);
  if (player < 0 || player >= t1.length)
    throw $.ioore(player);
  hex = t1[player];
  if (typeof hex !== 'string')
    return this._drawPlayer$2$bailout(2, ctx, player, hex);
  ctx.set$fillStyle(hex);
  t1 = this._tx;
  txLoc = t1.transformCoordinate$1(player.get$location());
  t2 = txLoc.get$x();
  t3 = txLoc.get$y();
  t4 = this._radius;
  if (typeof t4 !== 'number')
    return this._drawPlayer$2$bailout(3, ctx, t1, t4, t2, t3);
  t1 = t1.get$scaleX();
  if (typeof t1 !== 'number')
    return this._drawPlayer$2$bailout(4, ctx, t1, t4, t2, t3);
  $.CanvasUtil_centeredCircle(ctx, t2, t3, t4 * t1);
  ctx.fill$0();
},
 _drawPlayer$2$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env2;
      player = env1;
      ctx = env0;
      break;
    case 2:
      hex = env2;
      player = env1;
      ctx = env0;
      break;
    case 3:
      t3 = env4;
      t2 = env3;
      t4 = env2;
      t1 = env1;
      ctx = env0;
      break;
    case 4:
      t3 = env4;
      t2 = env3;
      t4 = env2;
      t1 = env1;
      ctx = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._liblib8$_map;
    case 1:
      state0 = 0;
      hex = $.index(t1, player);
    case 2:
      state0 = 0;
      ctx.set$fillStyle(hex == null ? '#999999' : hex);
      t1 = this._tx;
      txLoc = t1.transformCoordinate$1(player.get$location());
      t2 = txLoc.get$x();
      t3 = txLoc.get$y();
      t4 = this._radius;
    case 3:
      state0 = 0;
      t1 = t1.get$scaleX();
    case 4:
      var t1, player, ctx, hex, txLoc, t2, t3, t4;
      state0 = 0;
      $.CanvasUtil_centeredCircle(ctx, t2, t3, $.mul(t4, t1));
      ctx.fill$0();
  }
},
 VoterMapElement$2: function(w, h) {
  this._radius = 0.3;
}
};

$$.CandidateMapElement = {"": ["_players", "_tx>", "_radius=", "_elements", "_showOnlyPlayers", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "ParentElement",
 get$visualChildCount: function() {
  this._ensureElements$0();
  var t1 = this._elements;
  return $.getInterceptor(t1).get$length(t1);
},
 getVisualChild$1: function(index) {
  var t1;
  this._ensureElements$0();
  t1 = this._elements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.getVisualChild$1$bailout(1, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 getVisualChild$1$bailout: function(state0, index, t1) {
  return $.index(t1, index);
},
 setTransform$1: function(value) {
  $.requireArgumentNotNull(value, 'value');
  this._tx.setFromTransfrom$1(value);
  this.invalidateDraw$0();
},
 get$players: function() {
  return this._players;
},
 set$players: function(value) {
  var t1;
  $.requireArgumentNotNull(value, 'value');
  t1 = this._players;
  $.getInterceptor(t1).clear$0(t1);
  $.getInterceptor(t1).addAll$1(t1, value);
  this._elements = null;
  this.invalidateDraw$0();
},
 set$showOnlyPlayers: function(value) {
  if (value == null)
    this._showOnlyPlayers = null;
  else
    this._showOnlyPlayers = $.$$(value).toReadOnlyCollection$0();
  if (this._elements == null)
    this.invalidateDraw$0();
  else
    this._updateCandidateElements$0();
},
 _ensureElements$0: function() {
  var t1, t2, t3, rgb, ce, tempTx, t4, t5, t6, t7;
  if (this._elements == null) {
    this._elements = $._ListImpl_List(null);
    for (t1 = this._players, t1 = $.getInterceptor(t1).iterator$0(t1), t2 = this._tx; t1.get$hasNext() === true;) {
      t3 = t1.next$0();
      rgb = $.HslColor_HslColor($.LocationData_getHue(t3), 0.5, 0.6).toRgb$0();
      ce = $.CandidateElement$($.mul(this._radius, 4), $.mul(this._radius, 4), rgb.toHex$0(), t3);
      ce.registerParent$1(this);
      tempTx = ce.addTransform$0();
      tempTx.concatenate$1(t2);
      t4 = t3.get$location().get$x();
      t5 = this._radius;
      if (typeof t5 !== 'number')
        throw $.iae(t5);
      t4 = $.sub(t4, 2 * t5);
      t6 = t3.get$location().get$y();
      t7 = this._radius;
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      tempTx.translate$2(t4, $.sub(t6, 2 * t7));
      t4 = this._elements;
      $.getInterceptor(t4).add$1(t4, ce);
    }
    this._updateCandidateElements$0();
  }
},
 _updateCandidateElements$0: function() {
  var t1, t2, t3;
  for (t1 = this._elements, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t3 = this._showOnlyPlayers;
    t2.set$hidden(!(t3 == null) && $.ltB($.getInterceptor(t3).indexOf$1(t3, t2.get$player()), 0));
  }
}
};

$$.CandidateElement = {"": ["_color", "player>", "_text", "_tx>", "_hidden", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 get$hidden: function() {
  return this._hidden;
},
 set$hidden: function(value) {
  if (!$.eqB(value, this._hidden)) {
    this._hidden = value;
    this.invalidateDraw$0();
  }
},
 drawOverride$1: function(ctx) {
  var shadowDistance;
  if (this.get$hidden() === true) {
    ctx.set$globalAlpha(0.3);
    ctx.set$fillStyle('#999999');
  } else {
    shadowDistance = $.Mouse_isMouseDirectlyOver(this) === true ? 4 : 2;
    ctx.set$shadowColor('black');
    ctx.set$shadowBlur(6);
    ctx.set$shadowOffsetX(shadowDistance);
    ctx.set$shadowOffsetY(shadowDistance);
    ctx.set$fillStyle(this._color);
  }
  $.CanvasUtil_ellipse(ctx, 0, 0, this.get$width(), this.get$height());
  ctx.fill$0();
  ctx.set$shadowColor('transparent');
  ctx.set$font('1px Helvetica');
  ctx.set$textAlign('center');
  ctx.set$textBaseline('baseline');
  ctx.set$fillStyle('black');
  ctx.fillText$3(this._text, $.mul(this.get$width(), 0.5), $.mul(this.get$height(), 0.8));
},
 CandidateElement$4: function(w, h, _color, p) {
  this._tx = this.addTransform$0();
},
 is$CandidateElement: true
};

$$.Maps__emitMap_anon = {"": ["box_0", "visiting_3", "result_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_2;
    $.getInterceptor(t2).add$1(t2, ', ');
  }
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor(t1).add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_2;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor(t1).get$length(t1);
    case 2:
      var t1, value, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = $.index(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor(t1).add$1(t1, value);
      t1 = this.copies_3;
      $.getInterceptor(t1).add$1(t1, null);
      return length$;
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["readSlot_8", "findSlot_7", "writeSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_8.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_6.call$2(slot, t1.copy_1);
    $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_8;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_6.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_6;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, length$, i, copy0, t2, slot, copy);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$('structured clone of other type'));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env1;
      e = env0;
      break;
    case 3:
      copy = env8;
      slot = env7;
      t3 = env6;
      copy0 = env5;
      i = env4;
      length$ = env3;
      elementCopy = env2;
      t2 = env1;
      e = env0;
      break;
    case 4:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_8.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_6.call$2(slot, t1.copy_1);
        $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, t3, copy, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.getInterceptor(e).get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_7.call$1(e);
            t3 = this.readSlot_8;
            copy = t3.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_6.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t2 = this.writeSlot_6;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t2.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t3.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t2.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, $.index(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t2.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t2.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$('structured clone of other type'));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["box_0", "walk_9"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor(t2).add$1(t2, ', ');
  }
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, ': ');
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.EventHandle_fireEvent_anon = {"": ["args_0"],
 "super": "Closure",
 call$2: function(id, handler) {
  handler.call$1(this.args_0);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["arg2_5", "closure_4", "arg1_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_4.call$2(this.arg1_3, this.arg2_5);
}
};

$$.anon5 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(data) {
  this.this_0.get$_calcEngine().candidatesMoved$0();
}
};

$$.anon6 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(args) {
  this.this_1._requestFrame$0();
}
};

$$.anon7 = {"": ["this_2"],
 "super": "Closure",
 call$1: function(data) {
  this.this_2.get$_calcEngine().removeCandidate$1(data);
}
};

$$.anon8 = {"": ["this_3"],
 "super": "Closure",
 call$1: function(args) {
  this.this_3.get$_calcEngine().addCandidate$0();
}
};

$$.anon9 = {"": ["this_4"],
 "super": "Closure",
 call$1: function(args) {
  var t1 = this.this_4;
  t1._updateHighlightCandidates$1(t1.get$_condorcetView().get$highlightCandidates());
}
};

$$.anon10 = {"": ["this_5"],
 "super": "Closure",
 call$1: function(args) {
  var t1 = this.this_5;
  t1._updateHighlightCandidates$1(t1.get$_irvView().get$highlightCandidates());
}
};

$$.anon4 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(args) {
  this.this_0._distanceElectionChanged$0();
}
};

$$._voterHexMapperIsolate_anon = {"": [],
 "super": "Closure",
 call$2: function(tuple, reply) {
  var map, t1, t2, candidate, t3, hue;
  map = $.HashMap_HashMap();
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.call$2$bailout(1, tuple, reply, map);
  for (t1 = tuple.get$item1().get$ballots(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (tuple.get$item3() == null)
      candidate = t2.get$choice();
    else {
      t3 = t2.get$rank();
      t3 = $.getInterceptor(t3).filter$1(t3, new $._voterHexMapperIsolate__anon(tuple));
      candidate = $.getInterceptor(t3).first$0(t3);
    }
    if (!(candidate == null)) {
      hue = $.LocationData_getHue(candidate);
      t2 = t2.get$voter();
      t3 = $.HslColor_HslColor(hue, 0.5, 0.75).toRgb$0().toHex$0();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= map.length)
        throw $.ioore(t2);
      map[t2] = t3;
    }
  }
  reply.send$1(map);
},
 call$2$bailout: function(state0, tuple, reply, map) {
  var t1, t2, candidate, t3, hue;
  for (t1 = tuple.get$item1().get$ballots(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (tuple.get$item3() == null)
      candidate = t2.get$choice();
    else {
      t3 = t2.get$rank();
      t3 = $.getInterceptor(t3).filter$1(t3, new $._voterHexMapperIsolate__anon(tuple));
      candidate = $.getInterceptor(t3).first$0(t3);
    }
    if (!(candidate == null)) {
      hue = $.LocationData_getHue(candidate);
      $.indexSet(map, t2.get$voter(), $.HslColor_HslColor(hue, 0.5, 0.75).toRgb$0().toHex$0());
    }
  }
  reply.send$1(map);
}
};

$$._voterHexMapperIsolate__anon = {"": ["tuple_0"],
 "super": "Closure",
 call$1: function(c) {
  var t1 = this.tuple_0.get$item3();
  return $.ge($.getInterceptor(t1).indexOf$1(t1, c), 0);
}
};

$$.RgbColor_toHex_anon = {"": ["buffer_0"],
 "super": "Closure",
 call$1: function(c) {
  var t1, t2, t3;
  t1 = this.buffer_0;
  t2 = $.getInterceptor(t1);
  t3 = $.getInterceptor(c).toRadixString$1(c, 16);
  t2.add$1(t1, $.eqB($.getInterceptor(t3).get$length(t3), 1) ? $.getInterceptor('0').concat$1('0', t3) : t3);
}
};

$$._IsolateNatives__spawn_anon = {"": ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(msg, replyPort) {
  this.port_1.close$0();
  this.completer_0.complete$1(replyPort);
}
};

$$.anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(p) {
  var t1, t2, t3;
  t1 = this.this_0;
  t1.set$_port(p);
  for (t2 = t1.get$pending(), t2 = $.getInterceptor(t2).iterator$0(t2); t2.get$hasNext() === true;) {
    t3 = t2.next$0();
    p.send$2($.index(t3, 'message'), $.index(t3, 'replyTo'));
  }
  t1.set$pending(null);
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._NativeJsSendPort_send_anon = {"": ["this_5", "replyTo_4", "message_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_5;
  t3 = this.replyTo_4;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_3;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t2, shouldSerialize, t1), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"": ["this_7", "shouldSerialize_6", "box_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$._WorkerSendPort_send_anon = {"": ["message_2", "this_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_1;
  t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_2, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor(t1).add$1(t1, v);
}
};

$$._LinkedHashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._HashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor(t1).add$1(t1, k);
}
};

$$._LinkedHashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._HashMapImpl_keys_anon = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Futures_wait_anon = {"": ["pos_5", "result_4", "completer_3", "box_0", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_2;
  $.indexSet(t1, this.pos_5, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_4.get$isComplete() !== true)
    this.completer_3.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["future_8", "result_7", "completer_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_7.get$isComplete() !== true)
    this.completer_6.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$._IsolateNatives__startNonWorker_function = {"": ["replyPort_1", "functionName_0"],
 "super": "Closure",
 call$0: function() {
  $._IsolateNatives__startIsolate($globalThis[this.functionName_0], this.replyPort_1);
}
};

$$._IsolateNatives__spawnWorker_anon = {"": ["worker_0"],
 "super": "Closure",
 call$1: function(e) {
  $._IsolateNatives__processWorkerMessage(this.worker_0, e);
}
};

$$._IsolateNatives__processWorkerMessage_function = {"": ["replyTo_1", "entryPoint_0"],
 "super": "Closure",
 call$0: function() {
  $._IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
}
};

$$._IsolateNatives__startIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$.anon0 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon1 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$._irvElectionIsolate_anon = {"": [],
 "super": "Closure",
 call$2: function(ballots, reply) {
  reply.send$1($.IrvElection_IrvElection(ballots));
}
};

$$.IrvElection_IrvElection_anon = {"": [],
 "super": "Closure",
 call$1: function(b) {
  return b.get$rank();
}
};

$$.IrvRound_IrvRound_anon = {"": ["eliminatedCandidates_2"],
 "super": "Closure",
 call$1: function(b) {
  var pruned, winner;
  pruned = $.$$(b.get$rank()).exclude$1(this.eliminatedCandidates_2).toReadOnlyCollection$0();
  winner = $.eqB($.getInterceptor(pruned).get$length(pruned), 0) ? null : $.index(pruned, 0);
  return $.Tuple3$(b, pruned, winner);
}
};

$$.IrvRound_IrvRound_anon0 = {"": [],
 "super": "Closure",
 call$1: function(t) {
  return !(t.get$item3() == null);
}
};

$$.IrvRound_IrvRound_anon1 = {"": [],
 "super": "Closure",
 call$1: function(t) {
  return !(t.get$item3() == null);
}
};

$$.IrvRound_IrvRound_anon2 = {"": [],
 "super": "Closure",
 call$1: function(tuple) {
  return tuple.get$item3();
}
};

$$.IrvRound_IrvRound_anon3 = {"": ["candidateAllocations_3"],
 "super": "Closure",
 call$1: function(c) {
  var t1 = $.index(this.candidateAllocations_3, c);
  return $.getInterceptor(t1).get$length(t1);
}
};

$$.IrvRound_IrvRound_anon4 = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.getInterceptor(b).compareTo$1(b, a);
}
};

$$.IrvRound_IrvRound_anon5 = {"": ["box_0", "voteGroups_4"],
 "super": "Closure",
 call$1: function(pv) {
  var vg, t1, currentPlaceNumber;
  vg = $.index(this.voteGroups_4, pv);
  t1 = this.box_0;
  currentPlaceNumber = t1.placeNumber_1;
  t1.placeNumber_1 = $.add(currentPlaceNumber, $.getInterceptor(vg).get$length(vg));
  return $.PluralityElectionPlace$(currentPlaceNumber, vg, pv);
}
};

$$.IrvRound_IrvRound_anon6 = {"": ["newlyEliminatedCandidates_6", "cleanedBallots_5"],
 "super": "Closure",
 call$1: function(c) {
  var xfers, exhausted, t1, t2, t3, rb, pruned;
  xfers = $.Map_Map();
  exhausted = $._ListImpl_List(null);
  for (t1 = this.cleanedBallots_5, t1 = $.getInterceptor(t1).filter$1(t1, new $.IrvRound_IrvRound__anon(c)), t1 = $.getInterceptor(t1).iterator$0(t1), t2 = this.newlyEliminatedCandidates_6; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    rb = t3.get$item1();
    pruned = t3.get$item2().exclude$1(t2);
    if ($.getInterceptor(pruned).get$isEmpty(pruned) === true)
      $.getInterceptor(exhausted).add$1(exhausted, rb);
    else {
      t3 = xfers.putIfAbsent$2($.getInterceptor(pruned).first$0(pruned), new $.IrvRound_IrvRound__anon0());
      $.getInterceptor(t3).add$1(t3, rb);
    }
  }
  return $.IrvElimination$(c, xfers, $.$$(exhausted).toReadOnlyCollection$0());
}
};

$$.IrvRound_IrvRound__anon = {"": ["c_7"],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(t.get$item3(), this.c_7);
}
};

$$.IrvRound_IrvRound__anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $._ListImpl_List(null);
}
};

$$.IrvRound_eliminatedCandidates_anon = {"": [],
 "super": "Closure",
 call$1: function(ie) {
  return ie.get$candidate();
}
};

$$.IrvRound__getEliminatedCandidates_anon = {"": [],
 "super": "Closure",
 call$1: function(p) {
  return $.mul(p.get$voteCount(), $.getInterceptor(p).get$length(p));
}
};

$$.IrvRound__getEliminatedCandidates_anon0 = {"": [],
 "super": "Closure",
 call$1: function(p) {
  return p;
}
};

$$.Enumerable_selectNumbers_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectIterator$(s, this.f_0);
}
};

$$.anon2 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v;
}
};

$$.anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $._ListImpl_List(null);
}
};

$$.Enumerable_distinct_anon = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.eq(a, b);
}
};

$$.Enumerable_distinct_anon0 = {"": ["box_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._DistinctIterator$(s, this.box_0.comparer_1);
}
};

$$._DistinctIterator_hasNext_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.this_0;
  return t1._comparer$2(e, t1.get$_current()) !== true;
}
};

$$.Enumerable_first_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.Enumerable_selectMany_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectManyIterator$_internal(s, this.f_0);
}
};

$$.Enumerable_exclude_anon0 = {"": ["iEnum_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.iEnum_0;
  return $.getInterceptor(t1).contains$1(t1, e) !== true;
}
};

$$.Enumerable_exclude_anon = {"": ["f_1"],
 "super": "Closure",
 call$1: function(s) {
  return $._WhereIterator$(s, this.f_1);
}
};

$$.Enumerable_filter_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._WhereIterator$(s, this.f_0);
}
};

$$.Enumerable_map_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectIterator$(s, this.f_0);
}
};

$$.Enumerable_count_anon = {"": [],
 "super": "Closure",
 call$1: function(a) {
  return true;
}
};

$$.Enumerable_isEmpty_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.ListBase_iterator_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.this_0, i);
}
};

$$._condorcetElectionIsolate_anon = {"": [],
 "super": "Closure",
 call$2: function(ballots, reply) {
  reply.send$1($.CondorcetElection_CondorcetElection(ballots));
}
};

$$.CondorcetElection_CondorcetElection_anon = {"": [],
 "super": "Closure",
 call$1: function(b) {
  return b.get$voter();
}
};

$$.CondorcetElection_CondorcetElection_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $._ListImpl_List(null);
}
};

$$.CondorcetElection_CondorcetElection_anon1 = {"": ["hashSet_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var c, t1;
  c = $.CondorcetPair_CondorcetPair(k.get$item1(), k.get$item2(), v);
  t1 = this.hashSet_0;
  $.getInterceptor(t1).add$1(t1, c);
}
};

$$._TarjanList__TarjanList_anon = {"": ["nodes_1", "map_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, tKey, t2, edges, t3, tEdge;
  t1 = this.map_0;
  tKey = t1.putIfAbsent$2(k, new $._TarjanList__TarjanList__anon(k));
  t2 = this.nodes_1;
  edges = $.HashSet_HashSet();
  $.indexSet(t2, tKey, edges);
  if (!(v == null))
    for (t2 = $.getInterceptor(v).iterator$0(v); t2.get$hasNext() === true;) {
      t3 = t2.next$0();
      tEdge = t1.putIfAbsent$2(t3, new $._TarjanList__TarjanList__anon0(t3));
      $.getInterceptor(edges).add$1(edges, tEdge);
    }
}
};

$$._TarjanList__TarjanList__anon = {"": ["k_2"],
 "super": "Closure",
 call$0: function() {
  return $._TarjanNode$(this.k_2);
}
};

$$._TarjanList__TarjanList__anon0 = {"": ["edge_3"],
 "super": "Closure",
 call$0: function() {
  return $._TarjanNode$(this.edge_3);
}
};

$$._HashSetImpl_filter_anon = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1;
  if (this.f_1.call$1(key) === true) {
    t1 = this.result_0;
    $.getInterceptor(t1).add$1(t1, key);
  }
}
};

$$._HashSetImpl_map_anon = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.result_0;
  $.getInterceptor(t1).add$1(t1, this.f_1.call$1(key));
}
};

$$._HashSetImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$._HashSetImpl_addAll_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
}
};

$$.CondorcetPair_CondorcetPair_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(b) {
  var t1, t2, t3, firstIndex, secondIndex;
  t1 = b.get$rank();
  t2 = $.getInterceptor(t1);
  t3 = this.box_0;
  firstIndex = t2.indexOf$1(t1, t3.can1_1);
  $.requireArgument($.ge(firstIndex, 0), 'bals', null);
  t1 = b.get$rank();
  secondIndex = $.getInterceptor(t1).indexOf$1(t1, t3.can2_2);
  $.requireArgument($.ge(secondIndex, 0), 'bals', null);
  if ($.ltB(firstIndex, secondIndex))
    t3.fos_3 = $.add(t3.fos_3, 1);
  else
    t3.sof_4 = $.add(t3.sof_4, 1);
}
};

$$._pluralityElectionIsolate_anon = {"": [],
 "super": "Closure",
 call$2: function(ballots, reply) {
  reply.send$1($.PluralityElection_PluralityElection(ballots));
}
};

$$.PluralityElection_PluralityElection_anon1 = {"": [],
 "super": "Closure",
 call$1: function(pb) {
  return pb.get$voter();
}
};

$$.PluralityElection_PluralityElection_anon2 = {"": [],
 "super": "Closure",
 call$1: function(pb) {
  return pb.get$choice();
}
};

$$.PluralityElection_PluralityElection_anon = {"": ["voteCounts_0"],
 "super": "Closure",
 call$2: function(c, b) {
  var count, candidates;
  count = $.getInterceptor(b).get$length(b);
  candidates = this.voteCounts_0.putIfAbsent$2(count, new $.PluralityElection_PluralityElection__anon());
  $.getInterceptor(candidates).add$1(candidates, c);
}
};

$$.PluralityElection_PluralityElection__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $._ListImpl_List(null);
}
};

$$.PluralityElection_PluralityElection_anon0 = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.getInterceptor(b).compareTo$1(b, a);
}
};

$$._distanceElectionIsolate_anon = {"": [],
 "super": "Closure",
 call$2: function(data, reply) {
  reply.send$1($.DistanceElection_DistanceElection$fromData(data));
}
};

$$.IrvRound_candidates_anon = {"": [],
 "super": "Closure",
 call$1: function(p) {
  return p;
}
};

$$.DistanceElection_DistanceElection_anon = {"": ["cans_2"],
 "super": "Closure",
 call$1: function(voter) {
  return $.DistanceBallot_DistanceBallot(voter, this.cans_2);
}
};

$$.DistanceElection_DistanceElection_anon0 = {"": ["ballots_3"],
 "super": "Closure",
 call$1: function(candidate) {
  var t1, sumOfSquaredDistance, count, sumOfDistance, distance;
  for (t1 = this.ballots_3, t1 = $.getInterceptor(t1).iterator$0(t1), sumOfSquaredDistance = 0, count = 0, sumOfDistance = 0; t1.get$hasNext() === true;) {
    distance = t1.next$0().getDistance$1(candidate);
    if (typeof distance !== 'number')
      throw $.iae(distance);
    sumOfDistance += distance;
    sumOfSquaredDistance += distance * distance;
    ++count;
  }
  return $.Tuple$(sumOfDistance / count, sumOfSquaredDistance / count);
}
};

$$.DistanceElection_DistanceElection_anon1 = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  var t1 = a.get$item1();
  return $.getInterceptor(t1).compareTo$1(t1, b.get$item1());
}
};

$$.DistanceElection_DistanceElection_anon2 = {"": ["box_0", "distanceGroups_4"],
 "super": "Closure",
 call$1: function(d) {
  var placeCans, t1, place;
  placeCans = $.index(this.distanceGroups_4, d);
  t1 = this.box_0;
  place = $.DistanceElectionPlace$(t1.placeNumber_10, placeCans, d.get$item1(), d.get$item2());
  t1.placeNumber_10 = $.add(t1.placeNumber_10, $.getInterceptor(placeCans).get$length(placeCans));
  return place;
}
};

$$.DistanceBallot_DistanceBallot_anon = {"": ["voter_0"],
 "super": "Closure",
 call$1: function(c) {
  var t1 = $.mul(this.voter_0.get$location().getDistance$1(c.get$location()), 128);
  return $.div($.getInterceptor(t1).toInt$0(t1), 128);
}
};

$$.DistanceBallot_DistanceBallot_anon0 = {"": ["distances_1"],
 "super": "Closure",
 call$2: function(a, b) {
  var t1, t2, d;
  t1 = this.distances_1;
  t2 = $.index(t1, a);
  d = $.getInterceptor(t2).compareTo$1(t2, $.index(t1, b));
  if ($.eqB(d, 0))
    d = $.rnd().nextBool$0() === true ? -1 : 1;
  return d;
}
};

$$.Enumerable_toHashMap_anon = {"": [],
 "super": "Closure",
 call$1: function(a) {
  return a;
}
};

$$.LocationData_LocationData$random_anon = {"": [],
 "super": "Closure",
 call$1: function(c) {
  return c.scale$1(10);
}
};

$$.LocationData_LocationData$random_anon0 = {"": ["candidates_0"],
 "super": "Closure",
 call$2: function(c, i) {
  var candidate, t1;
  candidate = $.MapPlayer$(c, $.LocationData_getCandidateName(i));
  t1 = this.candidates_0;
  $.getInterceptor(t1).add$1(t1, candidate);
}
};

$$.Mouse_markMouseOver_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().clear$1(e);
  $.get$Mouse_isMouseDirectlyOverProperty().clear$1(e);
}
};

$$.Mouse_markMouseOver_anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().set$2(e, true);
}
};

$$.AffineTransform_toString_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return $.getInterceptor(n).toString$0(n);
}
};

$$.RootMapElement_dragCandidate_anon = {"": ["candidate_0"],
 "super": "Closure",
 call$1: function(mp) {
  return $.eq(mp, this.candidate_0);
}
};

$$.Enumerable_single_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.LocationData_cloneAndRemove_anon = {"": ["mp_0"],
 "super": "Closure",
 call$1: function(e) {
  return !$.eqB(e, this.mp_0);
}
};

$$._ChildrenElementList_filter_anon = {"": ["output_1", "f_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1;
  if (this.f_0.call$1(element) === true) {
    t1 = this.output_1;
    $.getInterceptor(t1).add$1(t1, element);
  }
}
};

$$.FilteredElementList__filtered_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$.FilteredElementList_removeRange_anon = {"": [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.CssClassSet_clear_anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.getInterceptor(s).clear$0(s);
}
};

$$.CssClassSet_addAll_anon = {"": ["collection_0"],
 "super": "Closure",
 call$1: function(s) {
  return $.getInterceptor(s).addAll$1(s, this.collection_0);
}
};

$$.CssClassSet_add_anon = {"": ["value_0"],
 "super": "Closure",
 call$1: function(s) {
  return $.getInterceptor(s).add$1(s, this.value_0);
}
};

$$.CondorcetView_updateElement_anon = {"": [],
 "super": "Closure",
 call$1: function(p) {
  return p;
}
};

$$.CondorcetView__updateCellHoverStyle_anon = {"": ["hoverPairClass_0"],
 "super": "Closure",
 call$1: function(e) {
  e.get$classes().remove$1(this.hoverPairClass_0);
}
};

$$.CondorcetView__updateCellHoverStyle_anon0 = {"": ["hoverPairClass_1"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = e.get$classes();
  $.getInterceptor(t1).add$1(t1, this.hoverPairClass_1);
}
};

$$.CondorcetView__getPair_anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.int_parse(s);
}
};

$$._DataAttributeMap_keys_anon = {"": ["this_1", "keys_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1;
  if ($.getInterceptor(key).startsWith$1(key, 'data-') === true) {
    t1 = this.keys_0;
    $.getInterceptor(t1).add$1(t1, $.getInterceptor(key).substring$1(key, 5));
  }
}
};

$$._DataAttributeMap_values_anon = {"": ["values_1", "this_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1;
  if ($.getInterceptor(key).startsWith$1(key, 'data-') === true) {
    t1 = this.values_1;
    $.getInterceptor(t1).add$1(t1, value);
  }
}
};

$$._DataAttributeMap_forEach_anon = {"": ["this_1", "f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  if ($.getInterceptor(key).startsWith$1(key, 'data-') === true)
    this.f_0.call$2($.getInterceptor(key).substring$1(key, 5), value);
}
};

$$.ConstantMap_values_anon = {"": ["result_1", "this_0"],
 "super": "Closure",
 call$1: function(key) {
  var t1 = this.result_1;
  return $.getInterceptor(t1).add$1(t1, $.index(this.this_0, key));
}
};

$$.ConstantMap_forEach_anon = {"": ["f_1", "this_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_1.call$2(key, $.index(this.this_0, key));
}
};

$$.CondorcetElection_getPair_anon = {"": ["c2_1", "c1_0"],
 "super": "Closure",
 call$1: function(p) {
  return p.matches$2(this.c1_0, this.c2_1);
}
};

$$.IrvView_updateElement_anon = {"": [],
 "super": "Closure",
 call$1: function(p) {
  return p;
}
};

$$.CandidateManagerView__removeCandidateWithId_anon = {"": ["id_0"],
 "super": "Closure",
 call$1: function(mp) {
  return $.eq(mp.get$id(), this.id_0);
}
};

$$.ParentElement_drawOverride_anon = {"": ["ctx_0"],
 "super": "Closure",
 call$1: function(e) {
  return e.drawCore$1(this.ctx_0);
}
};

$$.RootMapElement_update_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(m) {
  var t1 = this.this_0;
  m.set$_radius(t1.get$_radius());
  m.setTransform$1(t1.get$_tx());
}
};

$$.ParentElement_update_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return e.update$0();
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1(null)
}
};
$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.getInterceptor(index).truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.oprator$indexSet$2(index, value);
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.mod = function(a, b) {
  var result;
  if ($.checkNumbers(a, b)) {
    result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.getInterceptor(message).contains$1(message, 'JSNull') === true || $.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.getInterceptor(message).endsWith$1(message, 'is null') === true || $.getInterceptor(message).endsWith$1(message, 'is undefined') === true || $.getInterceptor(message).endsWith$1(message, 'is null or undefined') === true)
        return $.NoSuchMethodError$(null, '<unknown>', [], $.makeLiteralMap([]), null);
      else {
        if ($.getInterceptor(message).contains$1(message, ' is not a function') !== true)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.getInterceptor(message).contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.getInterceptor(keyValuePairs).iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.tdiv = function(a, b) {
  var t1;
  if ($.checkNumbers(a, b)) {
    t1 = a / b;
    return $.getInterceptor(t1).truncate$0(t1);
  }
  return a.operator$tdiv$1(b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg2, closure, arg1));
  else
    throw $.$$throw($.Exception_Exception('Unsupported number of arguments for wrapped closure'));
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.stringLastIndexOfUnchecked = function(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S(staticName)));
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return 'Null';
  constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.listInsertRange = function(receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, t3, i;
  if (typeof receiver !== 'object' || receiver === null || (receiver.constructor !== Array || !!receiver.immutable$list) && !receiver.is$JavaScriptIndexingBehavior())
    return $.listInsertRange$bailout(1, receiver, start, length$, initialValue);
  if ($.eqB(length$, 0))
    return;
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.getInterceptor(receiver).set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (t3 = receiver.length, i = start; i < t2; ++i) {
      if (i < 0 || i >= t3)
        throw $.ioore(i);
      receiver[i] = initialValue;
    }
  $.getInterceptor(receiver).set$length(receiver, t1);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'm');
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'i');
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'g');
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === 'string')
    return !$.eqB($.getInterceptor(receiver).indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.getInterceptor(receiver).substring$1(receiver, startIndex));
  else {
    substr = $.getInterceptor(receiver).substring$1(receiver, startIndex);
    t1 = $.getInterceptor(other).allMatches$1(other, substr);
    return $.getInterceptor(t1).iterator$0(t1).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, length$, patternLength, startIndex, position, endIndex;
  result = $._ListImpl_List(null);
  length$ = $.getInterceptor(haystack).get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.getInterceptor(haystack).indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    $.getInterceptor(result).add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i, t1;
  if (typeof from === 'string')
    if (from === '')
      if (receiver === '')
        return to;
      else {
        result = $.StringBuffer_StringBuffer('');
        length$ = receiver.length;
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; i < length$; ++i) {
          t1 = $.getInterceptor(result);
          if (i >= receiver.length)
            throw $.ioore(i);
          t1.add$1(result, receiver[i]);
          $.getInterceptor(result).add$1(result, to);
        }
        return $.getInterceptor(result).toString$0(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw('String.replaceAll(Pattern) UNIMPLEMENTED');
  }
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.getInterceptor(object).toString$0(object));
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$.Set_Set = function() {
  return $._HashSetImpl$();
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.operator$negate$0();
};

$._IsolateNatives__thisScript = function() {
  return $thisScriptUrl;
};

$._IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo;
  msg = $._deserializeMessage(e.data);
  switch ($.index(msg, 'command')) {
    case 'start':
      t1 = $.index(msg, 'id');
      $._globalState().set$currentManagerId(t1);
      entryPoint = $globalThis[$.index(msg, 'functionName')];
      replyTo = $._deserializeMessage($.index(msg, 'replyTo'));
      $._globalState().get$topEventLoop().enqueue$3($._IsolateContext$(), new $._IsolateNatives__processWorkerMessage_function(replyTo, entryPoint), 'worker-start');
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'spawn-worker':
      $._IsolateNatives__spawnWorker($.index(msg, 'functionName'), $.index(msg, 'uri'), $.index(msg, 'replyPort'));
      break;
    case 'message':
      $.index(msg, 'port').send$2($.index(msg, 'msg'), $.index(msg, 'replyTo'));
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'close':
      $._IsolateNatives__log('Closing Worker');
      $._globalState().get$managers().remove$1(sender.get$id());
      sender.terminate$0();
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'log':
      $._IsolateNatives__log($.index(msg, 'msg'));
      break;
    case 'print':
      if ($._globalState().get$isWorker() === true)
        $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'print', 'msg', msg])));
      else
        $.print($.index(msg, 'msg'));
      break;
    case 'error':
      throw $.$$throw($.index(msg, 'msg'));
  }
};

$._IsolateNatives__log = function(msg, exception) {
  var trace;
  if ($._globalState().get$isWorker() === true)
    $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'log', 'msg', msg])));
  else
    try {
      $globalThis.console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($.Exception_Exception(trace));
    }

};

$.coreSort = function(l, compare) {
  $._Sort__doSort(l, 0, l.length - 1, compare);
  return;
};

$._IsolateNatives__spawn = function(functionName, uri, isLight) {
  var completer, port, signalReply;
  completer = $.Completer_Completer();
  port = $.ReceivePort_ReceivePort();
  port.receive$1(new $._IsolateNatives__spawn_anon(port, completer));
  signalReply = port.toSendPort$0();
  if ($._globalState().get$useWorkers() === true && !isLight)
    $._IsolateNatives__startWorker(functionName, uri, signalReply);
  else
    $._IsolateNatives__startNonWorker(functionName, uri, signalReply);
  return $._BufferingSendPort$($._globalState().get$currentContext().get$id(), completer.get$future());
};

$._IsolateNatives__startWorker = function(functionName, uri, replyPort) {
  if ($._globalState().get$isWorker() === true)
    $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'spawn-worker', 'functionName', functionName, 'uri', uri, 'replyPort', replyPort])));
  else
    $._IsolateNatives__spawnWorker(functionName, uri, replyPort);
};

$._IsolateNatives__startNonWorker = function(functionName, uri, replyPort) {
  if (!(uri == null))
    throw $.$$throw($.UnsupportedError$('Currently spawnUri is not supported without web workers.'));
  $._globalState().get$topEventLoop().enqueue$3($._IsolateContext$(), new $._IsolateNatives__startNonWorker_function(replyPort, functionName), 'nonworker start');
};

$._IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $globals = $._globalState().get$currentContext().isolateStatics;
  $static_init();
  $._lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2('spawned', $.port().toSendPort$0());
  if (!($._window() == null))
    $._globalState().get$currentContext().eval$1(new $._IsolateNatives__startIsolate_anon());
  topLevel.call$0();
};

$._IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var t1, t2, t3, uri0, worker, workerId;
  if (functionName == null)
    functionName = 'main';
  if (uri == null)
    uri = $._IsolateNatives__thisScript();
  if ($.Uri$fromString(uri).isAbsolute$0() !== true) {
    t1 = $._IsolateNatives__thisScript();
    t2 = $.getInterceptor(t1);
    t3 = $._IsolateNatives__thisScript();
    uri0 = $.S(t2.substring$2(t1, 0, $.getInterceptor(t3).lastIndexOf$1(t3, '/'))) + '/' + $.S(uri);
    uri = uri0;
  }
  worker = new Worker(uri);
  worker.set$onmessage(new $._IsolateNatives__spawnWorker_anon(worker));
  t1 = $._globalState();
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.add(workerId, 1));
  worker.set$id(workerId);
  $.indexSet($._globalState().get$managers(), workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'start', 'id', workerId, 'replyTo', $._serializeMessage(replyPort), 'functionName', functionName])));
};

$.stringSplitUnchecked = function(receiver, pattern) {
  if (typeof pattern === 'string')
    return receiver.split(pattern);
  else if (typeof pattern === 'object' && pattern !== null && !!pattern.is$JSSyntaxRegExp)
    return receiver.split($.regExpGetNative(pattern));
  else
    throw $.$$throw('String.split(Pattern) UNIMPLEMENTED');
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.getInterceptor = function(object) {
  if (typeof object === 'string')
    return $.CTC0;
  if ($.isJsArray(object))
    return $.CTC1;
  if (typeof object === 'number' && Math.floor(object) === object)
    return $.CTC2;
  if (typeof object === 'number')
    return $.CTC3;
  if (typeof object === 'boolean')
    return $.CTC4;
  if (object == null)
    return $.CTC5;
  if (typeof object === 'function')
    return $.CTC6;
  return $.CTC7;
};

$._DataAttributeMap$ = function($$dom_attributes) {
  return new $._DataAttributeMap($$dom_attributes);
};

$._FrozenCssClassSet$ = function() {
  return new $._FrozenCssClassSet();
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf('Chrome') !== -1 || userAgent.indexOf('DumpRenderTree') !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf('Firefox') !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf('MSIE') !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf('Opera') !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf('AppleWebKit') !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.Uri$fromString = function(uri) {
  var t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  return new $.Uri($.Uri__emptyIfNull($.index(t1, 1)), $.Uri__emptyIfNull($.index(t1, 2)), $.Uri__emptyIfNull($.index(t1, 3)), $.Uri__parseIntOrZero($.index(t1, 4)), $.Uri__emptyIfNull($.index(t1, 5)), $.Uri__emptyIfNull($.index(t1, 6)), $.Uri__emptyIfNull($.index(t1, 7)));
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.Uri__emptyIfNull = function(val) {
  return !(val == null) ? val : '';
};

$.Uri__parseIntOrZero = function(val) {
  if (!(val == null) && !$.eqB(val, ''))
    return $.int_parse(val);
  else
    return 0;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC18)[name$];
  if (!(dartMethod == null))
    methods['Object'] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  if (name$ === 'GeoGeolocation')
    return 'Geolocation';
  return name$;
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  var t1;
  if (!('' === test)) {
    t1 = $.getInterceptor(sb);
    t1.add$1(sb, first == null ? 'null' : first);
    t1 = $.getInterceptor(sb);
    t1.add$1(sb, second == null ? 'null' : second);
  }
};

$.TableElement_TableElement = function() {
  return $.document().$$dom_createElement$1('table');
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.main = function() {
  $.VoteDemo_VoteDemo($.query('#content'), $.query('#pluralityView'), $.query('#distanceView'), $.query('#condorcetView'), $.query('#canManView'), $.query('#irvView'))._requestFrame$0();
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.document().query$1(selector);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnProperty, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnProperty = Object.prototype.hasOwnProperty;
  method = $.lookupDynamicClass(hasOwnProperty, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (hasOwnProperty.call(entry.get$_liblib0$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnProperty, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnProperty, methods, $.getTypeNameOf($.CTC18));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!hasOwnProperty.call(proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = $.getInterceptor(tags).split$1(tags, '|');
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    $.getInterceptor(result).add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = $.document().$$dom_createElement$1('canvas');
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  var end, i, t1;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    t1 = $.getInterceptor(accumulator);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    t1.add$1(accumulator, a[i]);
  }
  return accumulator;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  if (name$ === 'Position')
    return 'Geoposition';
  return name$;
};

$.CanvasUtil_transform = function(ctx, tx) {
  $.requireArgumentNotNull(ctx, 'ctx');
  $.requireArgumentNotNull(tx, 'tx');
  ctx.transform$6(tx.get$scaleX(), tx.get$shearY(), tx.get$shearX(), tx.get$scaleY(), tx.get$translateX(), tx.get$translateY());
};

$.CanvasUtil_centeredCircle = function(ctx, x, y, radius) {
  $.CanvasUtil_ellipse(ctx, $.sub(x, radius), $.sub(y, radius), $.mul(radius, 2), $.mul(radius, 2));
};

$.CanvasUtil_ellipse = function(ctx, x, y, width, height) {
  var hB, vB, eX, eY, mX, mY;
  hB = $.mul($.div(width, 2), 0.5522847498307935);
  vB = $.mul($.div(height, 2), 0.5522847498307935);
  eX = $.add(x, width);
  eY = $.add(y, height);
  mX = $.add(x, $.div(width, 2));
  mY = $.add(y, $.div(height, 2));
  ctx.beginPath$0();
  ctx.moveTo$2(x, mY);
  ctx.bezierCurveTo$6(x, $.sub(mY, vB), $.sub(mX, hB), y, mX, y);
  ctx.bezierCurveTo$6($.add(mX, hB), y, eX, $.sub(mY, vB), eX, mY);
  ctx.bezierCurveTo$6(eX, $.add(mY, vB), $.add(mX, hB), eY, mX, eY);
  ctx.bezierCurveTo$6($.sub(mX, hB), eY, x, $.add(mY, vB), x, mY);
  ctx.closePath$0();
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (count !== (count | 0))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, i = srcStart, j = dstStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Arrays_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.lookupDynamicClass = function(hasOwnProperty, methods, className) {
  return hasOwnProperty.call(methods, className) ? methods[className] : null;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.Tuple3$ = function(param1, param2, item3) {
  return new $.Tuple3(item3, param1, param2);
};

$.Tuple$ = function(item1, item2) {
  return new $.Tuple(item1, item2);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.HslColor$_internal = function(h, s, l) {
  return new $.HslColor(h, s, l);
};

$.HslColor_HslColor = function(h, s, l) {
  var t1;
  $.requireArgument(!(h == null) && $.getInterceptor(h).get$isInfinite(h) !== true && $.getInterceptor(h).get$isNaN(h) !== true, 'h', null);
  h = $.mod(h, 360);
  $.requireArgument($.getInterceptor(s).get$isInfinite(s) !== true && $.getInterceptor(s).get$isNaN(s) !== true, 's', 'must be a valid number');
  t1 = s >= 0 && s <= 1;
  $.requireArgument(t1, 's', 'must be >= 0 && <= 1 but was ' + $.S(s));
  $.requireArgument($.getInterceptor(l).get$isInfinite(l) !== true && $.getInterceptor(l).get$isNaN(l) !== true, 'l', 'must be a valid number');
  t1 = l >= 0 && l <= 1;
  $.requireArgument(t1, 'l', 'must be >= 0 && <=1 but was ' + $.S(l));
  return $.HslColor$_internal(h, s, l);
};

$.HslColor__hueToRgb = function(v1, v2, vH) {
  vH = $.mod(vH, 1);
  if (typeof vH !== 'number')
    throw $.iae(vH);
  if (6 * vH < 1)
    return v1 + (v2 - v1) * 6 * vH;
  else if (2 * vH < 1)
    return v2;
  else if (3 * vH < 2)
    return v1 + (v2 - v1) * (0.6666666666666666 - vH) * 6;
  return v1;
};

$.RgbColor$_internal = function(r, g, b) {
  return new $.RgbColor(r, g, b);
};

$.RgbColor_RgbColor = function(r, g, b) {
  $.RgbColor__validateComponent(r, 'r');
  $.RgbColor__validateComponent(g, 'g');
  $.RgbColor__validateComponent(b, 'b');
  return $.RgbColor$_internal(r, g, b);
};

$.RgbColor__validateComponent = function(c, name$) {
  $.requireArgument(!(c == null) && $.getInterceptor(c).get$isInfinite(c) !== true && $.getInterceptor(c).get$isNaN(c) !== true, name$, null);
  $.requireArgument($.geB(c, 0) && $.leB(c, 255), name$, null);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor(t1).contains$2(t1, 'Opera', 0);
};

$._Device_isIE = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor(t1).contains$2(t1, 'MSIE', 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor(t1).contains$2(t1, 'Firefox', 0);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$.ReadOnlyCollection$wrap = function(source) {
  return new $.ReadOnlyCollection(source);
};

$.ReadOnlyCollection$empty = function() {
  return new $.ReadOnlyCollection($.CTC9);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.ReadOnlyCollection$ = function(source) {
  return new $.ReadOnlyCollection($._ListImpl_List$from(source));
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t2, t1, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$.IrvRound_IrvRound = function(ballots, eliminatedCandidates) {
  var t1, cleanedBallots, candidateAllocations, voteGroups, placeVotes, t2, places, newlyEliminatedCandidates, t3;
  t1 = {};
  cleanedBallots = $.getInterceptor(ballots).map$1(ballots, new $.IrvRound_IrvRound_anon(eliminatedCandidates));
  cleanedBallots.count$1(new $.IrvRound_IrvRound_anon0());
  candidateAllocations = $.getInterceptor(cleanedBallots).filter$1(cleanedBallots, new $.IrvRound_IrvRound_anon1()).group$1(new $.IrvRound_IrvRound_anon2());
  voteGroups = $.$$(candidateAllocations.getKeys$0()).group$1(new $.IrvRound_IrvRound_anon3(candidateAllocations));
  placeVotes = $.$$(voteGroups.getKeys$0()).toList$0();
  $.getInterceptor(placeVotes).sort$1(placeVotes, new $.IrvRound_IrvRound_anon4());
  t1.placeNumber_1 = 1;
  t2 = $.$$(placeVotes);
  places = $.getInterceptor(t2).map$1(t2, new $.IrvRound_IrvRound_anon5(t1, voteGroups)).toReadOnlyCollection$0();
  newlyEliminatedCandidates = $.IrvRound__getEliminatedCandidates(places);
  t3 = $.$$(newlyEliminatedCandidates);
  return $.IrvRound$_internal(places, $.getInterceptor(t3).map$1(t3, new $.IrvRound_IrvRound_anon6(newlyEliminatedCandidates, cleanedBallots)).toReadOnlyCollection$0());
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.IrvRound$_internal = function(places, eliminations) {
  return new $.IrvRound(places, eliminations);
};

$.port = function() {
  if ($._lazyPort == null)
    $._lazyPort = $.ReceivePort_ReceivePort();
  return $._lazyPort;
};

$.spawnFunction = function(topLevelFunction) {
  var name$ = (topLevelFunction.$name || null);
  if (name$ == null)
    throw $.$$throw($.UnsupportedError$('only top-level functions can be spawned.'));
  return $._IsolateNatives__spawn(name$, null, false);
};

$.IrvRound__getEliminatedCandidates = function(places) {
  var majorityCount, t1;
  if ($.eqB($.getInterceptor(places).get$length(places), 1))
    return [];
  majorityCount = $.add($.tdiv(places.selectNumbers$1(new $.IrvRound__getEliminatedCandidates_anon()).sum$0(), 2), 1);
  t1 = $.index(places, 0);
  if ($.eqB($.getInterceptor(t1).get$length(t1), 1) && $.geB($.index(places, 0).get$voteCount(), majorityCount))
    return [];
  t1 = $.getInterceptor(places).last$0(places);
  return $.getInterceptor(t1).map$1(t1, new $.IrvRound__getEliminatedCandidates_anon0()).toList$0();
};

$.ElectionPlace$ = function(place, candidates) {
  var t1 = new $.ElectionPlace(place, $._ListImpl_List$from(candidates));
  t1.ElectionPlace$2(place, candidates);
  return t1;
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._globalState = function() {
  return $globalState;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.PluralityElectionPlace$ = function(place, candidates, voteCount) {
  var t1 = new $.PluralityElectionPlace(voteCount, place, $._ListImpl_List$from(candidates));
  t1.ElectionPlace$2(place, candidates);
  t1.PluralityElectionPlace$3(place, candidates, voteCount);
  return t1;
};

$.IrvElimination$ = function(candidate, _transfers, exhausted) {
  var t1 = new $.IrvElimination(candidate, _transfers, exhausted);
  t1.IrvElimination$3(candidate, _transfers, exhausted);
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$.Enumerable_Enumerable$fromIterable = function(source) {
  $.requireArgumentNotNull(source, 'source');
  return $._SimpleEnumerable$(source);
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.Grouping$ = function(source, keyFunc) {
  var t1 = new $.Grouping($.HashMap_HashMap());
  t1.Grouping$2(source, keyFunc);
  return t1;
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.getInterceptor(b).get$isNegative(b) === true || $.getInterceptor(b).get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.getInterceptor(b).get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.getInterceptor(a).get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.HashSet_HashSet = function() {
  return $._HashSetImpl$();
};

$.SequenceIterator$ = function(_sequence) {
  return new $.SequenceIterator(_sequence, 0);
};

$.IndexIterator$ = function(length$, indexer) {
  var t1 = new $.IndexIterator(indexer, length$, 0);
  t1.IndexIterator$2(length$, indexer);
  return t1;
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$._FuncEnumerable$ = function(_source, _func) {
  return new $._FuncEnumerable(_source, _func);
};

$._DistinctIterator$ = function(_source, _comparer) {
  return new $._DistinctIterator(_source, _comparer, $._ListImpl_List(null), null, null);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$._WhereIterator$ = function(_source, _func) {
  return new $._WhereIterator(_source, _func, null, null);
};

$.ButtonElement_ButtonElement = function() {
  return $.document().$$dom_createElement$1('button');
};

$.require = function(truth, message) {
  if (truth !== true)
    throw $.$$throw($.Exception_Exception(message));
};

$.requireArgument = function(truth, argName, message) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (truth !== true)
    throw $.$$throw($.DetailedArgumentError$(argName, message));
};

$.requireArgumentNotNull = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
};

$.requireArgumentNotNullOrEmpty = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
  else if ($.eqB($.getInterceptor(argument).get$length(argument), 0))
    throw $.$$throw($.DetailedArgumentError$(argName, 'cannot be an empty string'));
};

$._metaRequireArgumentNotNullOrEmpty = function(argName) {
  if (argName == null || $.eqB($.getInterceptor(argName).get$length(argName), 0))
    throw $.$$throw($.InvalidOperationError$('That\'s just sad. Give me a good argName'));
};

$._SelectManyIterator$_internal = function(_sourceIterator, _func) {
  return new $._SelectManyIterator(_sourceIterator, _func, null);
};

$.$$ = function(source) {
  if (typeof source === 'object' && source !== null && !!source.is$Enumerable)
    return source;
  else
    return $.Enumerable_Enumerable$fromIterable(source);
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$._SimpleEnumerable$ = function(_source) {
  return new $._SimpleEnumerable(_source);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$.isValidNumber = function(value) {
  return !(value == null) && $.getInterceptor(value).get$isInfinite(value) !== true && $.getInterceptor(value).get$isNaN(value) !== true;
};

$.rnd = function() {
  if ($._botHelperRandom == null)
    $._botHelperRandom = $.Random_Random(null);
  return $._botHelperRandom;
};

$._SelectIterator$ = function(_source, _func) {
  return new $._SelectIterator(_source, _func);
};

$.getMouseEventCoordinate = function(event$) {
  return $.Coordinate$(event$.get$offsetX(), event$.get$offsetY());
};

$._distanceElectionIsolate = function() {
  $.port().receive$1(new $._distanceElectionIsolate_anon());
};

$._pluralityElectionIsolate = function() {
  $.port().receive$1(new $._pluralityElectionIsolate_anon());
};

$._condorcetElectionIsolate = function() {
  $.port().receive$1(new $._condorcetElectionIsolate_anon());
};

$._irvElectionIsolate = function() {
  $.port().receive$1(new $._irvElectionIsolate_anon());
};

$._voterHexMapperIsolate = function() {
  $.port().receive$1(new $._voterHexMapperIsolate_anon());
};

$.getCandidateHexColor = function(c, dark) {
  var hue = $.LocationData_getHue(c);
  if (hue == null)
    return '#999999';
  else
    return $.HslColor_HslColor(hue, 1, dark === true ? 0.3 : 0.75).toRgb$0().toHex$0();
};

$._FuncNumEnumerable$ = function(_source, _func) {
  return new $._FuncNumEnumerable(_source, _func);
};

$._Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $._Sort_insertionSort_(a, left, right, compare);
  else
    $._Sort__dualPivotQuicksort(a, left, right, compare);
};

$.Comparable_compare = function(a, b) {
  return $.getInterceptor(a).compareTo$1(a, b);
};

$._Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$._Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$.VoteDemo_VoteDemo = function(canvas, pluralityDiv, distanceDiv, condorcetDiv, canManDiv, irvDiv) {
  var voterMap, stage, distanceView, pluralityView, condorcetView, irvView, canManView;
  voterMap = $.RootMapElement$(canvas.get$width(), canvas.get$height());
  stage = $.Stage$(canvas, voterMap);
  distanceView = $.DistanceView$(distanceDiv);
  pluralityView = $.PluralityView$(pluralityDiv);
  condorcetView = $.CondorcetView$(condorcetDiv);
  irvView = $.IrvView$(irvDiv);
  canManView = $.CandidateManagerView$(canManDiv);
  return $.VoteDemo$_internal(canvas, stage, $.Dragger$(canvas), voterMap, condorcetView, pluralityView, distanceView, canManView, irvView);
};

$._ListImpl_List = function(length$) {
  return $.Primitives_newList(length$);
};

$._ListImpl_List$from = function(other) {
  var result, t1, t2;
  result = $._ListImpl_List(null);
  for (t1 = $.getInterceptor(other).iterator$0(other); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(result).add$1(result, t2);
  }
  return result;
};

$.VoteDemo$_internal = function(_canvas, _stage, _dragger, _rootMapElement, _condorcetView, _pluralityView, _distanceView, _canManView, _irvView) {
  var t1 = new $.VoteDemo(_canvas, _stage, _dragger, $.CalcEngine$(), _rootMapElement, $.HashMap_HashMap(), _condorcetView, _irvView, _distanceView, _pluralityView, _canManView, null, null, null, null, false);
  t1.VoteDemo$_internal$9(_canvas, _stage, _dragger, _rootMapElement, _condorcetView, _pluralityView, _distanceView, _canManView, _irvView);
  return t1;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.Dragger$ = function(_element) {
  var t1 = new $.Dragger(_element, $.EventHandle$(), $.EventHandle$(), null);
  t1.Dragger$1(_element);
  return t1;
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.CalcEngine$ = function() {
  var t1 = new $.CalcEngine($._DistanceElectionMapper$(), $._PluralityElectionMapper$(), $._CondorcetElectionMapper$(), $._IrvElectionMapper$(), $._VoterHexMapper$(), null);
  t1.CalcEngine$0();
  return t1;
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.CondorcetPair$_internal = function(can1, can2, ballots, firstOverSecond, secondOverFirst) {
  return new $.CondorcetPair(ballots, firstOverSecond, secondOverFirst, can1, can2);
};

$.CondorcetPair_CondorcetPair = function(can1, can2, bals) {
  var t1, t2, temp, roBallots;
  t1 = {};
  t1.can1_1 = can1;
  t1.can2_2 = can2;
  $.requireArgumentNotNull(t1.can1_1, 'can1');
  $.requireArgumentNotNull(t1.can2_2, 'can2');
  $.requireArgument(!$.eqB(t1.can1_1, t1.can2_2), 'can1 and can2 must be different', null);
  t2 = t1.can1_1;
  if ($.gtB($.getInterceptor(t2).compareTo$1(t2, t1.can2_2), 0)) {
    temp = t1.can2_2;
    t1.can2_2 = t1.can1_1;
    t1.can1_1 = temp;
  }
  if (bals == null)
    return $.CondorcetPair$_internal(t1.can1_1, t1.can2_2, null, 0, 0);
  else {
    roBallots = $.ReadOnlyCollection$(bals);
    $.requireArgument($.CollectionUtil_allUnique(roBallots), 'Only one ballot per voter is allowed', null);
    t1.fos_3 = 0;
    t1.sof_4 = 0;
    $.getInterceptor(roBallots).forEach$1(roBallots, new $.CondorcetPair_CondorcetPair_anon(t1));
    return $.CondorcetPair$_internal(t1.can1_1, t1.can2_2, roBallots, t1.fos_3, t1.sof_4);
  }
};

$.CondorcetCandidateProfile$_internal = function(candidate, lostTo, beat, tied) {
  return new $.CondorcetCandidateProfile(candidate, lostTo, beat, tied);
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!$.isJsArray(charCodes))
    charCodes = $._ListImpl_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.CollectionUtil_allUnique = function(items) {
  var i, j, j0, t1;
  if (typeof items !== 'string' && (typeof items !== 'object' || items === null || items.constructor !== Array && !items.is$JavaScriptIndexingBehavior()))
    return $.CollectionUtil_allUnique$bailout(1, items);
  $.requireArgumentNotNull(items, 'items');
  for (i = 0; i < items.length; i = j)
    for (j = i + 1, j0 = j; t1 = items.length, j0 < t1; ++j0) {
      if (i >= t1)
        throw $.ioore(i);
      if ($.eqB(items[i], items[j0]))
        return false;
    }
  return true;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.TarjanCycleDetect$_internal = function(_list) {
  return new $.TarjanCycleDetect(0, $._ListImpl_List(null), $._ListImpl_List(null), _list);
};

$.TarjanCycleDetect_getStronglyConnectedComponents = function(graph) {
  return $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph))._executeTarjan$0();
};

$._TarjanList__TarjanList = function(source) {
  var map, nodes;
  map = $.HashMap_HashMap();
  nodes = $.HashMap_HashMap();
  $.getInterceptor(source).forEach$1(source, new $._TarjanList__TarjanList_anon(nodes, map));
  return $._TarjanList$_internal(nodes);
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate(x, y);
};

$._TarjanList$_internal = function(_nodes) {
  return new $._TarjanList(_nodes);
};

$.MapPlayer$ = function(_location, name$) {
  return new $.MapPlayer($.GlobalId_GlobalId(), name$, _location);
};

$._TarjanNode$ = function(value) {
  return new $._TarjanNode(value, -1, null);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.CancelableEventArgs$ = function() {
  return new $.CancelableEventArgs(false);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashSetIterator$ = function(set_) {
  var t1 = new $._HashSetIterator(set_._backingMap._keys, -1);
  t1._HashSetIterator$1(set_);
  return t1;
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ('\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n' === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.getInterceptor(result).get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.LocalWindow__isDartLocation = function(thing, exception) {
  var t1;
  try {
    t1 = thing;
    t1 = typeof t1 === 'object' && t1 !== null && t1.is$Location();
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.getInterceptor(name$).charCodeAt$1(name$, 0) === 36 ? $.getInterceptor(name$).substring$1(name$, 1) : name$;
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.getInterceptor(object).replaceAll$2(object, '\\', '\\\\');
    t1 = $.getInterceptor(t1).replaceAll$2(t1, '\n', '\\n');
    t1 = $.getInterceptor(t1).replaceAll$2(t1, '\r', '\\r');
    return '"' + $.S($.getInterceptor(t1).replaceAll$2(t1, '"', '\\"')) + '"';
  }
  return $.Primitives_objectToString(object);
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$._CondorcetElectionMapper$ = function() {
  return new $._CondorcetElectionMapper($.spawnFunction($._condorcetElectionIsolate), null, null, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$._IrvElectionMapper$ = function() {
  return new $._IrvElectionMapper($.spawnFunction($._irvElectionIsolate), null, null, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$.LocationData_getHue = function(candidate) {
  var letter, letterCode;
  if ($.LocationData__candidateHues == null)
    $.LocationData__candidateHues = $.LocationData__slice(26, 360, 3);
  letter = candidate.get$name();
  letterCode = $.sub($.getInterceptor(letter).charCodeAt$1(letter, 0), 65);
  return $.index($.LocationData__candidateHues, letterCode);
};

$.LocationData__slice = function(itemCount, maxValue, sliceCount) {
  var values, sliceSize, index, i, index0, t1, index1;
  values = $._ListImpl_List(itemCount);
  sliceSize = maxValue / sliceCount;
  for (index = 0, i = 0; i < sliceCount; ++i, index = index0)
    if (index === itemCount)
      return values;
    else {
      index0 = index + 1;
      t1 = i * sliceSize;
      if (index >= itemCount)
        throw $.ioore(index);
      values[index] = t1;
    }
  for (; true; index = index0) {
    sliceSize = maxValue / (index * 2);
    for (index0 = index, i = 0; i < index; ++i, index0 = index1)
      if (index0 === itemCount)
        return values;
      else {
        index1 = index0 + 1;
        if (i >= itemCount)
          throw $.ioore(i);
        t1 = $.add(values[i], sliceSize);
        if (index0 < 0 || index0 >= itemCount)
          throw $.ioore(index0);
        values[index0] = t1;
      }
  }
};

$._VoterHexMapper$ = function() {
  return new $._VoterHexMapper($.spawnFunction($._voterHexMapperIsolate), null, null, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$.PluralityElection_PluralityElection = function(ballots) {
  var roBallots, group, voteCounts, f, ballotCounts, places, t1, place, t2, p;
  roBallots = $.$$(ballots).toReadOnlyCollection$0();
  $.requireArgument($.CollectionUtil_allUnique($.getInterceptor(roBallots).map$1(roBallots, new $.PluralityElection_PluralityElection_anon1()).toReadOnlyCollection$0()), 'Only one ballot per voter is allowed', null);
  group = roBallots.group$1(new $.PluralityElection_PluralityElection_anon2());
  voteCounts = $.HashMap_HashMap();
  if (typeof voteCounts !== 'string' && (typeof voteCounts !== 'object' || voteCounts === null || voteCounts.constructor !== Array && !voteCounts.is$JavaScriptIndexingBehavior()))
    return $.PluralityElection_PluralityElection$bailout(1, group, voteCounts, roBallots);
  f = new $.PluralityElection_PluralityElection_anon(voteCounts);
  $.getInterceptor(group).forEach$1(group, f);
  ballotCounts = $._ListImpl_List$from(voteCounts.get$keys());
  $.getInterceptor(ballotCounts).sort$1(ballotCounts, new $.PluralityElection_PluralityElection_anon0());
  places = $._ListImpl_List(null);
  for (t1 = $.getInterceptor(ballotCounts).iterator$0(ballotCounts), place = 1; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= voteCounts.length)
      throw $.ioore(t2);
    p = $.PluralityElectionPlace$(place, voteCounts[t2], t2);
    $.getInterceptor(places).add$1(places, p);
    t2 = $.getInterceptor(p).get$length(p);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    place += t2;
  }
  return $.PluralityElection$_internal(roBallots, group, places);
};

$.CondorcetElection$_internal = function(_pairs, _profiles, ballots, places) {
  return new $.CondorcetElection(_pairs, _profiles, ballots, places);
};

$.CondorcetElection_CondorcetElection = function(ballots) {
  var roBallots, hashMap, candidateHashSet, t1, t2, i, t3, candidateI, j, j0, pairBallotList, hashSet, candidateProfiles, tarjanMap, lostTo, beat, tied, tarjanLostTiedSet, t4, other, profile, components, places, placeNumber, place;
  roBallots = $.$$(ballots).toReadOnlyCollection$0();
  $.requireArgument($.CollectionUtil_allUnique($.getInterceptor(roBallots).map$1(roBallots, new $.CondorcetElection_CondorcetElection_anon()).toReadOnlyCollection$0()), 'Only one ballot per voter is allowed', null);
  hashMap = $.HashMap_HashMap();
  candidateHashSet = $.HashSet_HashSet();
  for (t1 = $.getInterceptor(ballots).iterator$0(ballots); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    for (i = 0; t3 = t2.get$rank(), $.ltB(i, $.getInterceptor(t3).get$length(t3)); i = j) {
      candidateI = $.index(t2.get$rank(), i);
      $.getInterceptor(candidateHashSet).add$1(candidateHashSet, candidateI);
      for (j = i + 1, j0 = j; t3 = t2.get$rank(), $.ltB(j0, $.getInterceptor(t3).get$length(t3)); ++j0) {
        pairBallotList = hashMap.putIfAbsent$2($.CondorcetPair_CondorcetPair(candidateI, $.index(t2.get$rank(), j0), null), new $.CondorcetElection_CondorcetElection_anon0());
        $.getInterceptor(pairBallotList).add$1(pairBallotList, t2);
      }
    }
  }
  hashSet = $.HashSet_HashSet();
  $.getInterceptor(hashMap).forEach$1(hashMap, new $.CondorcetElection_CondorcetElection_anon1(hashSet));
  candidateProfiles = $.HashMap_HashMap();
  if (typeof candidateProfiles !== 'object' || candidateProfiles === null || (candidateProfiles.constructor !== Array || !!candidateProfiles.immutable$list) && !candidateProfiles.is$JavaScriptIndexingBehavior())
    return $.CondorcetElection_CondorcetElection$bailout(1, candidateHashSet, candidateProfiles, roBallots, hashSet);
  tarjanMap = $.HashMap_HashMap();
  if (typeof tarjanMap !== 'object' || tarjanMap === null || (tarjanMap.constructor !== Array || !!tarjanMap.immutable$list) && !tarjanMap.is$JavaScriptIndexingBehavior())
    return $.CondorcetElection_CondorcetElection$bailout(2, candidateHashSet, candidateProfiles, roBallots, tarjanMap, hashSet);
  for (t1 = $.getInterceptor(candidateHashSet).iterator$0(candidateHashSet); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    lostTo = $._ListImpl_List(null);
    beat = $._ListImpl_List(null);
    tied = $._ListImpl_List(null);
    tarjanLostTiedSet = $.HashSet_HashSet();
    for (t3 = $.getInterceptor(hashSet).iterator$0(hashSet); t3.get$hasNext() === true;) {
      t4 = t3.next$0();
      if ($.eqB(t4.get$item1(), t2) || $.eqB(t4.get$item2(), t2)) {
        other = $.eqB(t4.get$item1(), t2) ? t4.get$item2() : t4.get$item1();
        if (t4.get$isTie() === true) {
          $.getInterceptor(tied).add$1(tied, other);
          $.getInterceptor(tarjanLostTiedSet).add$1(tarjanLostTiedSet, other);
        } else if ($.eqB(t4.get$winner(), t2))
          $.getInterceptor(beat).add$1(beat, other);
        else {
          $.getInterceptor(lostTo).add$1(lostTo, other);
          $.getInterceptor(tarjanLostTiedSet).add$1(tarjanLostTiedSet, other);
        }
      }
    }
    profile = $.CondorcetCandidateProfile$_internal(t2, $.ReadOnlyCollection$(lostTo), $.ReadOnlyCollection$(beat), $.ReadOnlyCollection$(tied));
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= candidateProfiles.length)
      throw $.ioore(t2);
    candidateProfiles[t2] = profile;
    if (t2 >= tarjanMap.length)
      throw $.ioore(t2);
    tarjanMap[t2] = tarjanLostTiedSet;
  }
  components = $.TarjanCycleDetect_getStronglyConnectedComponents(tarjanMap);
  places = $._ListImpl_List(null);
  for (t1 = $.getInterceptor(components).iterator$0(components), placeNumber = 1; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    place = $.ElectionPlace$(placeNumber, t2);
    $.getInterceptor(places).add$1(places, place);
    t2 = $.getInterceptor(t2).get$length(t2);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    placeNumber += t2;
  }
  return $.CondorcetElection$_internal(hashSet, candidateProfiles, roBallots, $.ReadOnlyCollection$(places));
};

$._DistanceElectionMapper$ = function() {
  return new $._DistanceElectionMapper($.spawnFunction($._distanceElectionIsolate), null, null, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$.IrvElection$_internal = function(candidates, ballots, rounds) {
  return new $.IrvElection(candidates, ballots, rounds);
};

$.IrvElection_IrvElection = function(ballots) {
  var roBallots, roCandidates, rounds, eliminatedCandidates, round;
  roBallots = $.$$(ballots).toReadOnlyCollection$0();
  roCandidates = roBallots.selectMany$1(new $.IrvElection_IrvElection_anon()).distinct$0().toReadOnlyCollection$0();
  rounds = $._ListImpl_List(null);
  eliminatedCandidates = $._ListImpl_List(null);
  do {
    round = $.IrvRound_IrvRound(roBallots, eliminatedCandidates);
    $.getInterceptor(rounds).add$1(rounds, round);
    $.getInterceptor(eliminatedCandidates).addAll$1(eliminatedCandidates, round.get$eliminatedCandidates().toList$0());
  } while (round.get$isFinal() !== true);
  return $.IrvElection$_internal(roCandidates, roBallots, $.$$(rounds).toReadOnlyCollection$0());
};

$.PluralityElection$_internal = function(ballots, _ballotGroup, sourcePlaces) {
  return new $.PluralityElection(ballots, _ballotGroup, $.ReadOnlyCollection$(sourcePlaces));
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._HashSetImpl$ = function() {
  var t1 = new $._HashSetImpl(null);
  t1._HashSetImpl$0();
  return t1;
};

$.DistanceElection$_internal = function(candidates, ballots, places) {
  return new $.DistanceElection(candidates, ballots, places);
};

$.DistanceElection_DistanceElection = function(voters, candidates) {
  var t1, cans, t2, ballots, distanceGroups, distances, t3;
  t1 = {};
  cans = $.ReadOnlyCollection$(candidates);
  t2 = $.$$(voters);
  ballots = $.getInterceptor(t2).map$1(t2, new $.DistanceElection_DistanceElection_anon(cans)).toReadOnlyCollection$0();
  distanceGroups = $.$$(cans).group$1(new $.DistanceElection_DistanceElection_anon0(ballots));
  distances = $._ListImpl_List$from(distanceGroups.getKeys$0());
  $.getInterceptor(distances).sort$1(distances, new $.DistanceElection_DistanceElection_anon1());
  t1.placeNumber_10 = 1;
  t3 = $.$$(distances);
  return $.DistanceElection$_internal(cans, ballots, $.getInterceptor(t3).map$1(t3, new $.DistanceElection_DistanceElection_anon2(t1, distanceGroups)).toReadOnlyCollection$0());
};

$._PluralityElectionMapper$ = function() {
  return new $._PluralityElectionMapper($.spawnFunction($._pluralityElectionIsolate), null, null, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$.LocationData$ = function(voters, candidates) {
  var t1 = new $.LocationData(candidates, voters);
  t1.LocationData$2(voters, candidates);
  return t1;
};

$.Random_Random = function(seed) {
  return $.CTC12;
};

$.DistanceElection_DistanceElection$fromData = function(data) {
  return $.DistanceElection_DistanceElection(data.get$voters(), data.get$candidates());
};

$.DistanceElectionPlace$ = function(place, candidates, avgDistance, avgDistanceSquared) {
  var t1 = new $.DistanceElectionPlace(avgDistance, avgDistanceSquared, place, $._ListImpl_List$from(candidates));
  t1.ElectionPlace$2(place, candidates);
  return t1;
};

$.FutureValueResult$ = function(value, _outputSerializer) {
  return new $.FutureValueResult(value, null, _outputSerializer);
};

$.FutureValueResult_FutureValueResult$fromMap = function(value) {
  var ex;
  $.requireArgumentNotNull(value, 'value');
  $.requireArgument($.FutureValueResult_isMyMap(value), 'value', null);
  ex = $.index(value, 'exception');
  if (!(ex == null))
    return $.FutureValueResult$fromException(ex);
  else
    return $.FutureValueResult$($.index(value, 'value'), null);
};

$.DistanceBallot_DistanceBallot = function(voter, candidates) {
  var distances, rank;
  distances = $.$$(candidates).toHashMap$1(new $.DistanceBallot_DistanceBallot_anon(voter));
  rank = $._ListImpl_List$from(candidates);
  $.requireArgument(rank.length > 0, 'candidates', null);
  $.requireArgument($.CollectionUtil_allUnique(rank), 'candidates', null);
  $.getInterceptor(rank).sort$1(rank, new $.DistanceBallot_DistanceBallot_anon0(distances));
  return $.DistanceBallot$_internal(voter, $.ReadOnlyCollection$(rank), distances);
};

$.FutureValueResult$fromException = function(exception) {
  var t1 = new $.FutureValueResult(null, exception, null);
  t1.FutureValueResult$fromException$1(exception);
  return t1;
};

$.DistanceBallot$_internal = function(voter, items, _distances) {
  return new $.DistanceBallot(_distances, items, items.operator$index$1(0), voter);
};

$.EventHandle$ = function() {
  return new $.EventHandle(null, false);
};

$.GlobalId$_internal = function(value) {
  return new $.GlobalId(value, $.Util_getHashCode([value]));
};

$.GlobalId_GlobalId = function() {
  var t1 = $.GlobalId__globalId;
  $.GlobalId__globalId = $.add(t1, 1);
  return $.GlobalId$_internal(t1);
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._LocationCrossFrame__createSafe = function(location$) {
  var t1 = $.window().get$location();
  if (location$ == null ? t1 == null : location$ === t1)
    return location$;
  else
    return $._LocationCrossFrame$(location$);
};

$.FutureValueResult_isMyMap = function(value) {
  return !(value == null) && $.eqB($.getInterceptor(value).get$length(value), 2) && value.containsKey$1('value') === true && value.containsKey$1('exception') === true;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.LocationData_getCandidateName = function(i) {
  $.requireArgument($.ge(i, 0), 'i', null);
  $.requireArgument($.lt(i, 26), 'i', null);
  return $.String_String$fromCharCodes([$.add(i, 65)]);
};

$.RootMapElement$ = function(w, h) {
  var t1, t2;
  t1 = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  t2 = $.EventHandle$();
  t2 = new $.RootMapElement($.VoterMapElement$(w, h), $.CandidateMapElement$(w, h), t1, t2, null, null, null, $._ListImpl_List(null), false, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t2.RootMapElement$2(w, h);
  return t2;
};

$.LocationData_LocationData$random = function() {
  var voters, i, t1, j, coords, middle, coord, candidates;
  voters = $._ListImpl_List(null);
  for (i = 0; i < 10; ++i)
    for (t1 = i * 1.1111111111111112, j = 0; j < 10; ++j)
      $.getInterceptor(voters).add$1(voters, $.MapPlayer$($.Coordinate$(t1, j * 1.1111111111111112), null));
  coords = $._ListImpl_List(null);
  middle = $.Vector$(0.5, 0.5);
  $.getInterceptor(coords).add$1(coords, middle);
  for (i = 0; i < 4; ++i) {
    coord = $.Vector$($.rnd().nextDouble$0(), $.rnd().nextDouble$0());
    $.getInterceptor(coords).add$1(coords, coord);
  }
  candidates = $._ListImpl_List(null);
  t1 = $.$$(coords);
  $.getInterceptor(t1).map$1(t1, new $.LocationData_LocationData$random_anon()).forEachWithIndex$1(new $.LocationData_LocationData$random_anon0(candidates));
  return $.LocationData$($.ReadOnlyCollection$wrap(voters), $.ReadOnlyCollection$wrap(candidates));
};

$.ReceivePort_ReceivePort = function() {
  return $._ReceivePortImpl$();
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.getInterceptor(charCodes).iterator$0(charCodes); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
  }
  return String.fromCharCode.apply(null, charCodes);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.Box$ = function(left, top$, width, height) {
  return new $.Box(left, top$, width, height);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.CondorcetView__getPair = function(elem) {
  var pairIdStr, t1, ids;
  pairIdStr = $.index(elem.get$dataAttributes(), 'pair-ids');
  if (!(pairIdStr == null)) {
    pairIdStr = $.getInterceptor(pairIdStr).substring$1(pairIdStr, 4);
    t1 = $.$$($.getInterceptor(pairIdStr).split$1(pairIdStr, '_'));
    ids = $.getInterceptor(t1).map$1(t1, new $.CondorcetView__getPair_anon()).toList$0();
    return $.Tuple$($.index(ids, 0), $.index(ids, 1));
  }
  return;
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DistanceView$ = function(node) {
  var t1 = new $.DistanceView(null, node, null);
  t1.HtmlView$1(node);
  return t1;
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$.CondorcetView$ = function(node) {
  var t1 = new $.CondorcetView($.EventHandle$(), null, null, null, node, null);
  t1.HtmlView$1(node);
  return t1;
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.Stage$ = function(_canvas, _element) {
  var t1 = new $.Stage($.EventHandle$(), _canvas, _element, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t1.Stage$2(_canvas, _element);
  return t1;
};

$.VoterMapElement$ = function(w, h) {
  var t1 = new $.VoterMapElement($._ListImpl_List(null), $.AffineTransform$(1, 0, 0, 1, 0, 0), null, $.HashMap_HashMap(), $._ListImpl_List(null), true, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t1.VoterMapElement$2(w, h);
  return t1;
};

$.Property$ = function(name$, defaultValue) {
  return new $.Property(defaultValue, name$);
};

$.CandidateMapElement$ = function(w, h) {
  return new $.CandidateMapElement($._ListImpl_List(null), $.AffineTransform$(1, 0, 0, 1, 0, 0), 0, null, null, $._ListImpl_List(null), false, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$.CandidateManagerView$ = function(node) {
  var t1 = new $.CandidateManagerView($.EventHandle$(), $.EventHandle$(), $.ReadOnlyCollection$empty(), node, null);
  t1.HtmlView$1(node);
  return t1;
};

$.IrvView$ = function(node) {
  var t1 = new $.IrvView($.EventHandle$(), null, null, node, null);
  t1.HtmlView$1(node);
  return t1;
};

$.PluralityView$ = function(node) {
  var t1 = new $.PluralityView(null, node, null);
  t1.HtmlView$1(node);
  return t1;
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$._Collections_map = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(destination).add$1(destination, f.call$1(t2));
  }
  return destination;
};

$._Collections_every = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
};

$._Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.getInterceptor(array).get$length(array), array, 0);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_every = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
};

$.Collections_map = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(destination).add$1(destination, f.call$1(t2));
  }
  return destination;
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $._ListImpl_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.getInterceptor(visiting).add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? '[' : '{');
  for (t1 = $.getInterceptor(c).iterator$0(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.getInterceptor(result).add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
  }
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? ']' : '}');
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor(result).add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.RangeError$value = function(value) {
  return new $.RangeError('value ' + $.S(value));
};

$.Util_getHashCode = function(source) {
  var t1, hash, t2, next, hash0, hash1;
  $.requireArgumentNotNull(source, 'source');
  for (t1 = $.getInterceptor(source).iterator$0(source), hash = 0; t1.get$hasNext() === true; hash = hash1) {
    t2 = t1.next$0();
    next = t2 == null ? 0 : $.getInterceptor(t2).get$hashCode(t2);
    if (typeof next !== 'number')
      throw $.iae(next);
    hash0 = 536870911 & hash + next;
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
};

$.Mouse_markMouseOver = function(stage, coordinate) {
  var t1, items, hits;
  $.requireArgumentNotNull(stage, 'stage');
  t1 = !(coordinate == null);
  $.requireArgument(coordinate == null || coordinate.get$isValid() === true, 'coordinate', null);
  items = $.get$Mouse__stageMouseCacheProperty().get$1(stage);
  if (!(items == null)) {
    $.getInterceptor(items).forEach$1(items, new $.Mouse_markMouseOver_anon());
    $.get$Mouse__stageMouseCacheProperty().clear$1(stage);
  }
  if (t1) {
    hits = $.RetainedUtil__hitTest(stage.get$rootElement(), coordinate);
    $.get$Mouse__stageMouseCacheProperty().set$2(stage, hits);
    $.getInterceptor(hits).forEach$1(hits, new $.Mouse_markMouseOver_anon0());
    if ($.gtB($.getInterceptor(hits).get$length(hits), 0))
      $.get$Mouse_isMouseDirectlyOverProperty().set$2($.index(hits, 0), true);
    return hits;
  }
  return;
};

$.NullArgumentError$ = function(argument) {
  var t1 = new $.NullArgumentError(argument, 'cannot be null');
  t1.DetailedArgumentError$2(argument, 'cannot be null');
  return t1;
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.DetailedArgumentError$ = function(argument, details) {
  var t1 = new $.DetailedArgumentError(argument, details);
  t1.DetailedArgumentError$2(argument, details);
  return t1;
};

$.Mouse_isMouseDirectlyOver = function(element) {
  return $.get$Mouse_isMouseDirectlyOverProperty().get$1(element);
};

$.RetainedUtil__hitTest = function(element, point) {
  var bounds, hits, length$, t1, i, t2;
  point = $.RetainedUtil_transformPointGlobalToLocal(element, point);
  bounds = $.Box$(0, 0, element.get$width(), element.get$height());
  hits = $._ListImpl_List(null);
  if ($.getInterceptor(bounds).contains$1(bounds, point) === true) {
    if (typeof element === 'object' && element !== null && !!element.is$ParentElement) {
      length$ = element.get$visualChildCount();
      if (typeof length$ !== 'number')
        return $.RetainedUtil__hitTest$bailout(1, element, point, hits, length$);
      for (t1 = length$ - 1, i = 0; i < length$; ++i) {
        hits = $.RetainedUtil__hitTest(element.getVisualChild$1(t1 - i), point);
        if (typeof hits !== 'object' || hits === null || hits.constructor !== Array || !!hits.fixed$length)
          return $.RetainedUtil__hitTest$bailout(2, element, hits, point, i, length$);
        t2 = hits.length;
        if (t2 > 0)
          break;
      }
      element = element;
    }
    $.getInterceptor(hits).add$1(hits, element);
  }
  return hits;
};

$.RetainedUtil_transformPointGlobalToLocal = function(element, point) {
  return element.getTransform$0().createInverse$0().transformCoordinate$1(point);
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$.CandidateElement$ = function(w, h, _color, p) {
  var t1 = new $.CandidateElement(_color, p, p.get$name(), null, false, $._ListImpl_List(null), false, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t1.CandidateElement$4(w, h, _color, p);
  return t1;
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $._ListImpl_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.getInterceptor(visiting).add$1(visiting, m);
  $.getInterceptor(result).add$1(result, '{');
  t1.first_1 = true;
  $.getInterceptor(m).forEach$1(m, new $.Maps__emitMap_anon(t1, visiting, result));
  $.getInterceptor(result).add$1(result, '}');
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.stringJoinUnchecked($.Strings__toJsStringArray(strings), separator);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._BufferingSendPort$ = function(isolateId, _futurePort) {
  var t1 = new $._BufferingSendPort($._BufferingSendPort__idCount, null, _futurePort, [], isolateId);
  t1._BufferingSendPort$2(isolateId, _futurePort);
  return t1;
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.getInterceptor(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC9);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $._ListImpl_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(i, result, completer, t1, values));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.getInterceptor(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC9);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = $.getInterceptor(futures).get$length(futures);
  values = $._ListImpl_List($.getInterceptor(futures).get$length(futures));
  for (i = 0; $.ltB(i, $.getInterceptor(futures).get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(i, result, completer, t1, values));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
  else
    for (i = srcStart, j = dstStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
};

$.Arrays_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var i;
  if ($.ltB(startIndex, 0))
    return -1;
  if ($.geB(startIndex, a.length))
    startIndex = a.length - 1;
  for (i = startIndex; $.geB(i, 0); --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.listInsertRange$bailout = function(state0, receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, i;
  if ($.eqB(length$, 0))
    return;
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.getInterceptor(receiver).set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (i = start; i < t2; ++i)
      $.indexSet(receiver, i, initialValue);
  $.getInterceptor(receiver).set$length(receiver, t1);
};

$.RetainedUtil__hitTest$bailout = function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      length$ = env3;
      hits = env2;
      point = env1;
      element = env0;
      break;
    case 2:
      length$ = env4;
      i = env3;
      point = env2;
      hits = env1;
      element = env0;
      break;
    case 3:
      t1 = env5;
      i = env4;
      hits = env3;
      length$ = env2;
      point = env1;
      element = env0;
      break;
  }
  switch (state0) {
    case 0:
      point = $.RetainedUtil_transformPointGlobalToLocal(element, point);
      bounds = $.Box$(0, 0, element.get$width(), element.get$height());
      hits = $._ListImpl_List(null);
    default:
      var point, bounds, hits, length$, element, i, t1;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && $.getInterceptor(bounds).contains$1(bounds, point) === true)
        switch (state0) {
          case 0:
          default:
            if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof element === 'object' && element !== null && !!element.is$ParentElement)
              switch (state0) {
                case 0:
                  length$ = element.get$visualChildCount();
                case 1:
                  state0 = 0;
                  i = 0;
                default:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          hits = $.RetainedUtil__hitTest(element.getVisualChild$1($.sub($.sub(length$, 1), i)), point);
                        case 2:
                          state0 = 0;
                          t1 = $.getInterceptor(hits).get$length(hits);
                        case 3:
                          state0 = 0;
                          if ($.gtB(t1, 0))
                            break L0;
                          ++i;
                      }
                  element = element;
              }
            $.getInterceptor(hits).add$1(hits, element);
        }
      return hits;
  }
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor(strings).get$length(strings);
    case 2:
      var strings, length$, i, string, array;
      state0 = 0;
      if ($.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else {
        array = $._ListImpl_List(length$);
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
          if (i >= array.length)
            throw $.ioore(i);
          array[i] = string;
        }
      }
      return array;
  }
};

$.CollectionUtil_allUnique$bailout = function(state0, items) {
  var i, j, j0;
  $.requireArgumentNotNull(items, 'items');
  for (i = 0; $.ltB(i, $.getInterceptor(items).get$length(items)); i = j)
    for (j = i + 1, j0 = j; $.ltB(j0, $.getInterceptor(items).get$length(items)); ++j0)
      if ($.eqB($.index(items, i), $.index(items, j0)))
        return false;
  return true;
};

$.PluralityElection_PluralityElection$bailout = function(state0, group, voteCounts, roBallots) {
  var f, ballotCounts, places, t1, place, t2, p;
  f = new $.PluralityElection_PluralityElection_anon(voteCounts);
  $.getInterceptor(group).forEach$1(group, f);
  ballotCounts = $._ListImpl_List$from(voteCounts.get$keys());
  $.getInterceptor(ballotCounts).sort$1(ballotCounts, new $.PluralityElection_PluralityElection_anon0());
  places = $._ListImpl_List(null);
  for (t1 = $.getInterceptor(ballotCounts).iterator$0(ballotCounts), place = 1; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    p = $.PluralityElectionPlace$(place, $.index(voteCounts, t2), t2);
    $.getInterceptor(places).add$1(places, p);
    t2 = $.getInterceptor(p).get$length(p);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    place += t2;
  }
  return $.PluralityElection$_internal(roBallots, group, places);
};

$._Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, t2, great0, less0;
  sixth = $.tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.indexSet(a, index1, el1);
  $.indexSet(a, index3, el3);
  $.indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.indexSet(a, k, a[less]);
          $.indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.indexSet(a, less, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.indexSet(a, k, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.indexSet(a, k, a[less]);
          $.indexSet(a, less, ak);
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.indexSet(a, less, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.indexSet(a, k, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  if (t1 >= a.length)
    throw $.ioore(t1);
  $.indexSet(a, left, a[t1]);
  $.indexSet(a, t1, el2);
  t1 = great + 1;
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  $.indexSet(a, right, a[t1]);
  $.indexSet(a, t1, el4);
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.indexSet(a, k, a[less]);
          $.indexSet(a, less, ak);
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.indexSet(a, less, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.indexSet(a, k, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$._Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.indexSet(a, j, a[j0]);
      j = j0;
    }
    $.indexSet(a, j, el);
  }
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.getInterceptor(a).get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_lastIndexOf$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      startIndex = env2;
      element = env1;
      a = env0;
      break;
    case 2:
      startIndex = env2;
      element = env1;
      a = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if ($.ltB(startIndex, 0))
        return -1;
      if ($.geB(startIndex, $.getInterceptor(a).get$length(a)))
        startIndex = $.sub($.getInterceptor(a).get$length(a), 1);
    case 2:
      var startIndex, element, a, i;
      state0 = 0;
      for (i = startIndex; $.geB(i, 0); i = $.sub(i, 1))
        if ($.eqB($.index(a, i), element))
          return i;
      return -1;
  }
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  if ($.gtB(end, $.getInterceptor(a).get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    $.getInterceptor(accumulator).add$1(accumulator, $.index(a, i));
  return accumulator;
};

$.CondorcetElection_CondorcetElection$bailout = function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      hashSet = env3;
      roBallots = env2;
      candidateProfiles = env1;
      candidateHashSet = env0;
      break;
    case 2:
      hashSet = env4;
      tarjanMap = env3;
      roBallots = env2;
      candidateProfiles = env1;
      candidateHashSet = env0;
      break;
  }
  switch (state0) {
    case 0:
      roBallots = $.$$(ballots).toReadOnlyCollection$0();
      $.requireArgument($.CollectionUtil_allUnique($.getInterceptor(roBallots).map$1(roBallots, new $.CondorcetElection_CondorcetElection_anon()).toReadOnlyCollection$0()), 'Only one ballot per voter is allowed', null);
      hashMap = $.HashMap_HashMap();
      candidateHashSet = $.HashSet_HashSet();
      for (t1 = $.getInterceptor(ballots).iterator$0(ballots); t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        for (i = 0; t3 = t2.get$rank(), $.ltB(i, $.getInterceptor(t3).get$length(t3)); i = j) {
          candidateI = $.index(t2.get$rank(), i);
          $.getInterceptor(candidateHashSet).add$1(candidateHashSet, candidateI);
          for (j = i + 1, j0 = j; t3 = t2.get$rank(), $.ltB(j0, $.getInterceptor(t3).get$length(t3)); ++j0) {
            pairBallotList = hashMap.putIfAbsent$2($.CondorcetPair_CondorcetPair(candidateI, $.index(t2.get$rank(), j0), null), new $.CondorcetElection_CondorcetElection_anon0());
            $.getInterceptor(pairBallotList).add$1(pairBallotList, t2);
          }
        }
      }
      hashSet = $.HashSet_HashSet();
      $.getInterceptor(hashMap).forEach$1(hashMap, new $.CondorcetElection_CondorcetElection_anon1(hashSet));
      candidateProfiles = $.HashMap_HashMap();
    case 1:
      state0 = 0;
      tarjanMap = $.HashMap_HashMap();
    case 2:
      var roBallots, hashMap, candidateHashSet, t1, t2, i, t3, candidateI, j, j0, pairBallotList, hashSet, candidateProfiles, tarjanMap, lostTo, beat, tied, tarjanLostTiedSet, t4, other, components, places, placeNumber, place;
      state0 = 0;
      for (t1 = $.getInterceptor(candidateHashSet).iterator$0(candidateHashSet); t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        lostTo = $._ListImpl_List(null);
        beat = $._ListImpl_List(null);
        tied = $._ListImpl_List(null);
        tarjanLostTiedSet = $.HashSet_HashSet();
        for (t3 = $.getInterceptor(hashSet).iterator$0(hashSet); t3.get$hasNext() === true;) {
          t4 = t3.next$0();
          if ($.eqB(t4.get$item1(), t2) || $.eqB(t4.get$item2(), t2)) {
            other = $.eqB(t4.get$item1(), t2) ? t4.get$item2() : t4.get$item1();
            if (t4.get$isTie() === true) {
              $.getInterceptor(tied).add$1(tied, other);
              $.getInterceptor(tarjanLostTiedSet).add$1(tarjanLostTiedSet, other);
            } else if ($.eqB(t4.get$winner(), t2))
              $.getInterceptor(beat).add$1(beat, other);
            else {
              $.getInterceptor(lostTo).add$1(lostTo, other);
              $.getInterceptor(tarjanLostTiedSet).add$1(tarjanLostTiedSet, other);
            }
          }
        }
        $.indexSet(candidateProfiles, t2, $.CondorcetCandidateProfile$_internal(t2, $.ReadOnlyCollection$(lostTo), $.ReadOnlyCollection$(beat), $.ReadOnlyCollection$(tied)));
        $.indexSet(tarjanMap, t2, tarjanLostTiedSet);
      }
      components = $.TarjanCycleDetect_getStronglyConnectedComponents(tarjanMap);
      places = $._ListImpl_List(null);
      for (t1 = $.getInterceptor(components).iterator$0(components), placeNumber = 1; t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        place = $.ElectionPlace$(placeNumber, t2);
        $.getInterceptor(places).add$1(places, place);
        t2 = $.getInterceptor(t2).get$length(t2);
        if (typeof t2 !== 'number')
          throw $.iae(t2);
        placeNumber += t2;
      }
      return $.CondorcetElection$_internal(hashSet, candidateProfiles, roBallots, $.ReadOnlyCollection$(places));
  }
};

$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$._distanceElectionIsolate.call$0 = $._distanceElectionIsolate;
$._distanceElectionIsolate.$name = "_distanceElectionIsolate";
$._pluralityElectionIsolate.call$0 = $._pluralityElectionIsolate;
$._pluralityElectionIsolate.$name = "_pluralityElectionIsolate";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._condorcetElectionIsolate.call$0 = $._condorcetElectionIsolate;
$._condorcetElectionIsolate.$name = "_condorcetElectionIsolate";
$._irvElectionIsolate.call$0 = $._irvElectionIsolate;
$._irvElectionIsolate.$name = "_irvElectionIsolate";
$._voterHexMapperIsolate.call$0 = $._voterHexMapperIsolate;
$._voterHexMapperIsolate.$name = "_voterHexMapperIsolate";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
Isolate.$finishClasses($$);
$$ = {};
$.CTC2 = new Isolate.$isolateProperties.JSInt();
$.CTC3 = new Isolate.$isolateProperties.JSDouble();
$.CTC19 = new Isolate.$isolateProperties.Returns('IDBRequest');
$.CTC0 = new Isolate.$isolateProperties.JSString();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC9 = Isolate.makeConstantList([]);
$.CTC13 = new Isolate.$isolateProperties.EventArgs();
$.CTC16 = new Isolate.$isolateProperties.InvalidOperationError('The input sequence contains more than one element.');
$.CTC8 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC20 = new Isolate.$isolateProperties.Creates('Null');
$.CTC21 = new Isolate.$isolateProperties.Creates('IDBRequest');
$.CTC18 = new Isolate.$isolateProperties.Object();
$.CTC22 = new Isolate.$isolateProperties.Coordinate(0, 0);
$.CTC23 = new Isolate.$isolateProperties.Creates('num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView');
$.CTC15 = new Isolate.$isolateProperties.Box(0, 0, 10, 10);
$.CTC24 = new Isolate.$isolateProperties.Returns('=List|=Object|num|String');
$.CTC17 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC9);
$.CTC25 = new Isolate.$isolateProperties.Creates('=List|=Object|num|String');
$.CTC10 = new Isolate.$isolateProperties.InvalidOperationError('Input contained a null item');
$.CTC26 = new Isolate.$isolateProperties.Returns('num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView');
$.CTC = new Isolate.$isolateProperties.NullThrownError();
$.CTC27 = new Isolate.$isolateProperties.Creates('_NodeList');
$.CTC28 = new Isolate.$isolateProperties.Returns('_NodeList');
$.CTC14 = new Isolate.$isolateProperties._UndefinedValue();
$.CTC11 = new Isolate.$isolateProperties.InvalidOperationError('The input sequence is empty.');
$.CTC12 = new Isolate.$isolateProperties._Random();
$.CTC7 = new Isolate.$isolateProperties.ObjectInterceptor();
$.CTC6 = new Isolate.$isolateProperties.JSFunction();
$.CTC4 = new Isolate.$isolateProperties.JSBool();
$.CTC5 = new Isolate.$isolateProperties.JSNull();
$.CTC1 = new Isolate.$isolateProperties.JSArray();
$.CTC29 = new Isolate.$isolateProperties.Creates('=List');
$._serializedScriptValue = 'num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView';
$._annotation_Creates_SerializedScriptValue = Isolate.$isolateProperties.CTC23;
$._annotation_Returns_SerializedScriptValue = Isolate.$isolateProperties.CTC26;
$._idbKey = '=List|=Object|num|String';
$._annotation_Creates_IDBKey = Isolate.$isolateProperties.CTC25;
$._annotation_Returns_IDBKey = Isolate.$isolateProperties.CTC24;
$._lazyPort = null;
$._SPAWNED_SIGNAL = 'spawned';
$.IrvView__roundCellClass = 'irv_round';
$._getTypeNameOf = null;
$.MIRROR_OPT_IN_MESSAGE = '\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n';
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC8;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Uri__COMPONENT_SCHEME = 1;
$.Uri__COMPONENT_USER_INFO = 2;
$.Uri__COMPONENT_DOMAIN = 3;
$.Uri__COMPONENT_PORT = 4;
$.Uri__COMPONENT_PATH = 5;
$.Uri__COMPONENT_QUERY_DATA = 6;
$.Uri__COMPONENT_FRAGMENT = 7;
$.LocationData_maxCandidateCount = 26;
$.LocationData_bounds = Isolate.$isolateProperties.CTC15;
$.LocationData__ACharCode = 65;
$.LocationData_span = 10;
$.LocationData__candidateHues = null;
$._BufferingSendPort__idCount = 0;
$._cachedBrowserPrefix = null;
$._botHelperRandom = null;
$.GlobalId__globalId = 0;
$._ReceivePortImpl__nextFreeId = 1;
$._grayHex = '#999999';
$._TimerFactory__factory = null;
$._Sort__INSERTION_SORT_THRESHOLD = 32;
$.Property_Undefined = Isolate.$isolateProperties.CTC14;
Isolate.$lazy($, '_splitRe', 'Uri__splitRe', 'get$Uri__splitRe', function() {
  return $.RegExp_RegExp('^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$', false, false);
});
Isolate.$lazy($, '_stageMouseCacheProperty', 'Mouse__stageMouseCacheProperty', 'get$Mouse__stageMouseCacheProperty', function() {
  return $.Property$('_stageMouseCacheProperty', null);
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
});
Isolate.$lazy($, 'isMouseOverProperty', 'Mouse_isMouseOverProperty', 'get$Mouse_isMouseOverProperty', function() {
  return $.Property$('IsMouseOver', false);
});
Isolate.$lazy($, 'isMouseDirectlyOverProperty', 'Mouse_isMouseDirectlyOverProperty', 'get$Mouse_isMouseDirectlyOverProperty', function() {
  return $.Property$('IsMouseDirectlyOver', false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$_FileList: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$File: function() { return false; },
 is$Element: function() { return false; },
 is$Collection: function() { return false; },
 is$ImageData: function() { return false; },
 is$Location: function() { return false; },
 is$List: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$Map: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('AnalyserNode', {"": []
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name>"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', {"": ["name>"]
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name>", "value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length>"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": []
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": []
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["name>", "value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 clear$1: function(arg0) { return this.clear.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": []
});

$.$defineNativeClass('HTMLBaseElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": ["color<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": []
});

$.$defineNativeClass('Blob', {"": [],
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": ["background<"],
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["disabled<", "name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": ["style>"]
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": ["style>"]
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name>"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": ["b>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": ["style>"]
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": []
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length>"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$aspectRatio: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'aspect-ratio');
},
 set$background: function(value) {
  this.setProperty$3('background', value, '');
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 clear$1: function(arg0) { return this.get$clear().call$1(arg0); },
 get$clip: function() {
  return this.getPropertyValue$1('clip');
},
 clip$0: function() { return this.get$clip().call$0(); },
 set$color: function(value) {
  this.setProperty$3('color', value, '');
},
 set$cursor: function(value) {
  this.setProperty$3('cursor', value, '');
},
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.get$filter().call$3(arg0, arg1, arg2); },
 set$font: function(value) {
  this.setProperty$3('font', value, '');
},
 set$fontStyle: function(value) {
  this.setProperty$3('font-style', value, '');
},
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 get$left: function() {
  return this.getPropertyValue$1('left');
},
 set$textAlign: function(value) {
  this.setProperty$3('text-align', value, '');
},
 get$top: function() {
  return this.getPropertyValue$1('top');
},
 get$transform: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'transform');
},
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.get$transform().call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
}
});

$.$defineNativeClass('CSSStyleRule', {"": ["style>"]
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": []
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1('2d');
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["fillStyle<", "font<", "globalAlpha<", "shadowBlur<", "shadowColor<", "shadowOffsetX<", "shadowOffsetY<", "textAlign<", "textBaseline<"],
 beginPath$0: function() {
  return this.beginPath();
},
 bezierCurveTo$6: function(cp1x, cp1y, cp2x, cp2y, x, y) {
  return this.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,width,height);
},
 clip$0: function() {
  return this.clip();
},
 closePath$0: function() {
  return this.closePath();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 fill$0: function() {
  return this.fill();
},
 fillText$4: function(text, x, y, maxWidth) {
  return this.fillText(text,x,y,maxWidth);
},
 fillText$3: function(text,x,y) {
  return this.fillText(text,x,y);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 rect$4: function(x, y, width, height) {
  return this.rect(x,y,width,height);
},
 restore$0: function() {
  return this.restore();
},
 save$0: function() {
  return this.save();
},
 transform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.transform(m11,m12,m21,m22,dx,dy);
},
 translate$2: function(tx, ty) {
  return this.translate(tx,ty);
}
});

$.$defineNativeClass('ChannelMergerNode', {"": []
});

$.$defineNativeClass('ChannelSplitterNode', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["length>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["height>", "left>", "top>", "width>"]
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": []
});

Console = (typeof console == 'undefined' ? {} : console);
Console.count$1 = function(arg) {
  return this.count(arg);
};
Console.group$1 = function(arg) {
  return this.group(arg);
};
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": []
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 update$0: function() {
  return this.update();
}
});

$.$defineNativeClass('DOMError', {"": ["name>"]
});

$.$defineNativeClass('DOMException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name>"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name>"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeType', {"": []
});

$.$defineNativeClass('MimeTypeArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('Plugin', {"": ["length>", "name>"]
});

$.$defineNativeClass('PluginArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length>"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": []
});

$.$defineNativeClass('DataTransferItemList', {"": ["length>"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": []
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Document', {"": [],
 get$on: function() {
  return $.DocumentEvents$(this);
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName(elementName);
},
 $$dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp('^#[_a-zA-Z]\\w*$', false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.getInterceptor(selectors).substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  var mutableMatches, len, copyOfMatches, t1, i;
  if ($.RegExp_RegExp('^\\[name=["\'][^\'"]+[\'"]\\]$', false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByName$1($.getInterceptor(selectors).substring$2(selectors, 7, selectors.length - 2));
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(1, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $._ListImpl_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.RegExp_RegExp('^[*a-zA-Z0-9]+$', false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(3, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $._ListImpl_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      mutableMatches = env0;
      break;
    case 2:
      len = env1;
      mutableMatches = env0;
      break;
    case 3:
      mutableMatches = env0;
      break;
    case 4:
      mutableMatches = env1;
      len = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var mutableMatches, len, copyOfMatches, i, t1;
      if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp('^\\[name=["\'][^\'"]+[\'"]\\]$', false, false).hasMatch$1(selectors) === true)
        switch (state0) {
          case 0:
            mutableMatches = this.$$dom_getElementsByName$1($.getInterceptor(selectors).substring$2(selectors, 7, selectors.length - 2));
          case 1:
            state0 = 0;
            len = $.getInterceptor(mutableMatches).get$length(mutableMatches);
          case 2:
            state0 = 0;
            copyOfMatches = $._ListImpl_List(len);
            for (i = 0; $.ltB(i, len); ++i) {
              t1 = $.index(mutableMatches, i);
              if (i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t1;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp('^[*a-zA-Z0-9]+$', false, false).hasMatch$1(selectors) === true)
              switch (state0) {
                case 0:
                  mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                case 3:
                  state0 = 0;
                  len = $.getInterceptor(mutableMatches).get$length(mutableMatches);
                case 4:
                  state0 = 0;
                  copyOfMatches = $._ListImpl_List(len);
                  for (i = 0; $.ltB(i, len); ++i) {
                    t1 = $.index(mutableMatches, i);
                    if (i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
        }
  }
}
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$elements: function() {
  return this.get$children();
},
 get$children: function() {
  if (this._children == null)
    this._children = $.FilteredElementList$(this);
  return this._children;
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  var t1, e, nodes;
  t1 = this.get$nodes();
  $.getInterceptor(t1).clear$0(t1);
  e = $.Element_Element$tag('div');
  e.set$innerHTML(value);
  nodes = $._ListImpl_List$from(e.get$nodes());
  t1 = this.get$nodes();
  $.getInterceptor(t1).addAll$1(t1, nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 get$translate: function() {
  return false;
},
 translate$2: function(arg0, arg1) { return this.get$translate().call$2(arg0, arg1); },
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$classes: function() {
  return $._FrozenCssClassSet$();
},
 get$dataAttributes: function() {
  return $.CTC17;
},
 get$style: function() {
  return $.Element_Element$tag('div').get$style();
},
 blur$0: function() {
},
 get$blur: function() { return new $.BoundClosure0(this, 'blur$0'); },
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 set$hidden: function(value) {
  throw $.$$throw($.UnsupportedError$('Hidden can\'t be set for document fragments.'));
},
 set$id: function(value) {
  throw $.$$throw($.UnsupportedError$('ID can\'t be set for document fragments.'));
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
}
});

$.$defineNativeClass('DocumentType', {"": ["name>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["hidden<", "id=", "innerHTML<", "style>"],
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return this.get$children();
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 get$children: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$children')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$children.call(this);
  }

},
 set$children: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$children')) {
  {
  var copy, children;
  copy = $._ListImpl_List$from(value);
  children = this.get$children();
  $.getInterceptor(children).clear$0(children);
  $.getInterceptor(children).addAll$1(children, copy);
}
  } else {
    return Object.prototype.set$children.call(this, value);
  }

},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 get$classes: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$classes')) {
  {
  return $._ElementCssClassSet$(this);
}
  } else {
    return Object.prototype.get$classes.call(this);
  }

},
 get$dataAttributes: function() {
  return $._DataAttributeMap$(this.get$attributes());
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 translate$2: function(arg0, arg1) { return this.translate.call$2(arg0, arg1); },
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 get$$$dom_className: function() {
  return this.className;
},
 set$$$dom_className: function(value) {
  this.className = value;
},
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 blur$0: function() {
  return this.blur();
},
 get$blur: function() { return new $.BoundClosure0(this, 'blur$0'); },
 $$dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $$dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $$dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $$dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('Entry', {"": ["name>"],
 moveTo$4: function(parent, name, successCallback, errorCallback) {
  return this.moveTo(parent,name,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 moveTo$2: function(parent$,name$) {
  return this.moveTo(parent$,name$);
},
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name>"],
 moveTo$2: function(parent, name) {
  return this.moveTo(parent,name);
},
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": []
});

$.$defineNativeClass('Event', {"": [],
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_target());
},
 get$_target: function() {
  return this.target;
},
 preventDefault$0: function() {
  return this.preventDefault();
}
});

$.$defineNativeClass('EventException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["disabled<", "elements>", "name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', {"": ["name>"],
 is$File: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": [],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["length>"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length>"]
});

$.$defineNativeClass('Float32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": ["color<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length>", "name>"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height>", "location=", "name>", "width>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('GainNode', {"": []
});

$.$defineNativeClass('Gamepad', {"": ["id>", "index>"]
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": []
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', {"": [],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": []
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": ["key>"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value>"]
});

$.$defineNativeClass('IDBDatabase', {"": ["name>"],
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": ["name>"],
 count$1: function(key_OR_range) {
  var t1, t2;
  t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (t2)
    t1 = typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null;
  else
    t1 = false;
  if (t1)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.ArgumentError$('Incorrect number or type of arguments'));
},
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 get$1: function(key) {
  var t1, t2;
  t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (t1)
    t2 = typeof key === 'object' && key !== null && key.is$IDBKeyRange() || key == null;
  else
    t2 = false;
  if (t2)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.ArgumentError$('Incorrect number or type of arguments'));
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": [],
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {"": ["name>"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 count$1: function(key_OR_range) {
  var t1, t2;
  t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (t2)
    t1 = typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null;
  else
    t1 = false;
  if (t1)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.ArgumentError$('Incorrect number or type of arguments'));
},
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 index$1: function(name) {
  return this.index(name);
},
 get$index: function() { return new $.BoundClosure(this, 'index$1'); }
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": [],
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["height>", "width>"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height=", "name>", "width=", "x>", "y>"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["disabled<", "height=", "name>", "pattern>", "value=", "width="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": []
});

$.$defineNativeClass('KeyboardEvent', {"": []
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["disabled<", "name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["disabled<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length>"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
},
 is$Location: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', {"": []
});

$.$defineNativeClass('DOMWindow', {"": ["name>", "navigator>"],
 get$location: function() {
  var result = this.get$_location();
  if ($.LocalWindow__isDartLocation(result) === true)
    return result;
  if (null == this._location_wrapper)
    this._location_wrapper = $._LocationWrapper$(result);
  return this._location_wrapper;
},
 set$location: function(value) {
  if (typeof value === 'object' && value !== null && !!value.is$_LocationWrapper)
    this.set$_location(value._ptr);
  else
    this.set$_location(value);
},
 get$_location: function() {
  return this.location;
},
 set$_location: function(value) {
  this.location = value;
},
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.get$_top());
},
 get$_top: function() {
  return this.top;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 clearInterval$1: function(handle) {
  return this.clearInterval(handle);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
},
 close$0: function() {
  return this.close();
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": [],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": [],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": []
});

$.$defineNativeClass('MediaList', {"": ["length>"]
});

$.$defineNativeClass('MediaQueryList', {"": [],
 matches$2: function(arg0, arg1) { return this.matches.call$2(arg0, arg1); }
});

$.$defineNativeClass('MediaSource', {"": [],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": [],
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length>"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports>"]
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": []
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["clientX>", "clientY>", "toElement>", "x>", "y>"],
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.offsetX;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetX is only supported on elements'));
    return $.sub(this.clientX, this.get$target().getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.offsetY;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetY is only supported on elements'));
    return $.sub(this.clientY, this.get$target().getBoundingClientRect$0().get$top());
  }
}
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": []
});

$.$defineNativeClass('NamedNodeMap', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent>"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('Node', {"": [],
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  try {
    parent$ = this.get$parent();
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_attributes: function() {
  return this.attributes;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('NodeIterator', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 cancel$0: function() {
  return this.cancel();
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('OESElementIndexUint', {"": []
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": ["disabled<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["disabled<", "index>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {"": []
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('PannerNode', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": []
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x>", "y>"]
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": []
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": []
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": ["candidate>"]
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": ["candidate>"]
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": []
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": []
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {"": [],
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": ["left>", "top>"]
});

$.$defineNativeClass('SQLError', {"": []
});

$.$defineNativeClass('SQLException', {"": []
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('Screen', {"": ["height>", "width>"]
});

$.$defineNativeClass('HTMLScriptElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {"": [],
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": [],
 children$0: function() {
  return this.children();
},
 get$children: function() { return new $.BoundClosure0(this, 'children$0'); }
});

$.$defineNativeClass('HTMLSelectElement', {"": ["disabled<", "length=", "name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": ["innerHTML<"]
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name>"],
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": []
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": []
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": []
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length>"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 oprator$indexSet$2: function(key, value) {
  this.$$dom_setItem$2(key, value);
},
 putIfAbsent$2: function(key, ifAbsent) {
  if (this.$$dom_getItem$1(key) == null)
    this.oprator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key>"]
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": ["disabled<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": []
});

$.$defineNativeClass('StyleSheet', {"": ["disabled<"]
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["colSpan<", "height=", "rowSpan<", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["width="],
 insertRow$1: function(index) {
  return this.insertRow(index);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": [],
 insertCell$1: function(index) {
  return this.insertCell(index);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": [],
 insertRow$1: function(index) {
  return this.insertRow(index);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["disabled<", "name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": []
});

$.$defineNativeClass('TextMetrics', {"": ["width>"]
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id=", "text<"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length>"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length>"]
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Touch', {"": ["clientX>", "clientY>"],
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('TouchEvent', {"": []
});

$.$defineNativeClass('TouchList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('UIEvent', {"": []
});

$.$defineNativeClass('HTMLUListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": []
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="]
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name>"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": [],
 clear$1: function(mask) {
  return this.clear(mask);
}
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": []
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 terminate$0: function() {
  return this.terminate();
}
});

$.$defineNativeClass('WorkerContext', {"": ["location>", "navigator>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 clearInterval$1: function(handle) {
  return this.clearInterval(handle);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent>"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('NodeList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 set$id: function(i) {
  this.id = i;
},
 set$onmessage: function(f) {
  this.onmessage = f;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
},
 clearInterval$1: function(handle) {
  return this.clearInterval(handle);
}
});

$.$defineNativeClass('SVGAElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": []
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": []
});

$.$defineNativeClass('SVGAnimateElement', {"": []
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": []
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": []
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": []
});

$.$defineNativeClass('SVGCircleElement', {"": ["r>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGClipPathElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": []
});

$.$defineNativeClass('SVGCursorElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGDefsElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGDescElement', {"": []
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $.ElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGEllipseElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["height>", "width>", "x>", "y>"],
 scale$1: function(arg0) { return this.scale.call$1(arg0); }
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": []
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFuncAElement', {"": []
});

$.$defineNativeClass('SVGFEFuncBElement', {"": []
});

$.$defineNativeClass('SVGFEFuncGElement', {"": []
});

$.$defineNativeClass('SVGFEFuncRElement', {"": []
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": []
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFontElement', {"": []
});

$.$defineNativeClass('SVGFontFaceElement', {"": []
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": []
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": []
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": []
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": []
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height>", "width>", "x>", "y>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGGElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGGlyphElement', {"": []
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGGradientElement', {"": []
});

$.$defineNativeClass('SVGHKernElement', {"": []
});

$.$defineNativeClass('SVGImageElement', {"": ["height>", "width>", "x>", "y>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGLinearGradientElement', {"": []
});

$.$defineNativeClass('SVGMPathElement', {"": []
});

$.$defineNativeClass('SVGMarkerElement', {"": []
});

$.$defineNativeClass('SVGMaskElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGMatrix', {"": ["b>"],
 scale$1: function(scaleFactor) {
  return this.scale(scaleFactor);
},
 translate$2: function(x, y) {
  return this.translate(x,y);
}
});

$.$defineNativeClass('SVGMetadataElement', {"": []
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": []
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x>"]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x>"]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y>"]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y>"]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPatternElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGPoint', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPolylineElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": ["r>"]
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width=", "x>", "y>"]
});

$.$defineNativeClass('SVGRectElement', {"": ["height>", "width>", "x>", "y>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGScriptElement', {"": []
});

$.$defineNativeClass('SVGSetElement', {"": []
});

$.$defineNativeClass('SVGStopElement', {"": []
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["disabled<"]
});

$.$defineNativeClass('SVGDocument', {"": ["rootElement>"]
});

$.$defineNativeClass('SVGElement', {"": [],
 get$classes: function() {
  if (this._cssClassSet == null)
    this._cssClassSet = $._AttributeClassSet$(this);
  return this._cssClassSet;
},
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 get$children: function() {
  return $.FilteredElementList$(this);
},
 set$children: function(value) {
  var children = this.get$children();
  $.getInterceptor(children).clear$0(children);
  $.getInterceptor(children).addAll$1(children, value);
},
 set$innerHTML: function(svg) {
  var container = $.Element_Element$tag('div');
  container.set$innerHTML('<svg version="1.1">' + $.S(svg) + '</svg>');
  this.set$children($.index(container.get$children(), 0).get$children());
},
 get$id: function() {
  return this.id;
},
 set$id: function(value) {
  this.id = value;
}
});

$.$defineNativeClass('SVGSVGElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGSwitchElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGSymbolElement', {"": []
});

$.$defineNativeClass('SVGTRefElement', {"": []
});

$.$defineNativeClass('SVGTSpanElement', {"": []
});

$.$defineNativeClass('SVGTextContentElement', {"": []
});

$.$defineNativeClass('SVGTextElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGTextPathElement', {"": []
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGTitleElement', {"": []
});

$.$defineNativeClass('SVGTransform', {"": []
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["height>", "width>", "x>", "y>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGVKernElement', {"": []
});

$.$defineNativeClass('SVGViewElement', {"": []
});

$.$defineNativeClass('SVGViewSpec', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 last$0: function() { return this.get$last().call$0(); },
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 528 dynamic classes.
// 528 classes
// 41 !leaf
(function(){
  var v0/*class(Uint8Array)*/ = 'Uint8Array|Uint8ClampedArray';
  var v1/*class(AudioSourceNode)*/ = 'AudioSourceNode|AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode|OscillatorNode';
  var v2/*class(_CSSValueList)*/ = 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue';
  var v3/*class(Color)*/ = 'SVGColor|SVGPaint';
  var v4/*class(Text)*/ = 'Text|CDATASection';
  var v5/*class(TextPositioningElement)*/ = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement';
  var v6/*class(AnimationElement)*/ = 'SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement';
  var v7/*class(ComponentTransferFunctionElement)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement';
  var v8/*class(GradientElement)*/ = 'SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement';
  var v9/*class(TextContentElement)*/ = [v5/*class(TextPositioningElement)*/,'SVGTextContentElement|SVGTextPathElement'].join('|');
  var v10/*class(MediaElement)*/ = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement';
  var v11/*class(SvgElement)*/ = [v6/*class(AnimationElement)*/,v7/*class(ComponentTransferFunctionElement)*/,v8/*class(GradientElement)*/,v9/*class(TextContentElement)*/,'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|');
  var v12/*class(MouseEvent)*/ = 'MouseEvent|WheelEvent';
  var v13/*class(ProgressEvent)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent';
  var v14/*class(UIEvent)*/ = [v12/*class(MouseEvent)*/,'UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent'].join('|');
  var v15/*class(CharacterData)*/ = [v4/*class(Text)*/,'CharacterData|Comment'].join('|');
  var v16/*class(Document)*/ = 'Document|HTMLDocument|SVGDocument';
  var v17/*class(DocumentFragment)*/ = 'DocumentFragment|ShadowRoot';
  var v18/*class(Element)*/ = [v10/*class(MediaElement)*/,v11/*class(SvgElement)*/,'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|');
  var v19/*class(AbstractWorker)*/ = 'AbstractWorker|SharedWorker|Worker';
  var v20/*class(IDBRequest)*/ = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest';
  var v21/*class(MediaStream)*/ = 'MediaStream|LocalMediaStream';
  var v22/*class(Node)*/ = [v15/*class(CharacterData)*/,v16/*class(Document)*/,v17/*class(DocumentFragment)*/,v18/*class(Element)*/,'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|');
  var v23/*class(WorkerContext)*/ = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['AbstractWorker', v19/*class(AbstractWorker)*/],
    ['Uint8Array', v0/*class(Uint8Array)*/],
    ['ArrayBufferView', [v0/*class(Uint8Array)*/,'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')],
    ['AudioSourceNode', v1/*class(AudioSourceNode)*/],
    ['AudioNode', [v1/*class(AudioSourceNode)*/,'AudioNode|AnalyserNode|AudioDestinationNode|BiquadFilterNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|PannerNode|ScriptProcessorNode|WaveShaperNode'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain'],
    ['Blob', 'Blob|File'],
    ['CSSRule', 'CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule'],
    ['CSSValueList', v2/*class(_CSSValueList)*/],
    ['SVGColor', v3/*class(Color)*/],
    ['CSSValue', [v2/*class(_CSSValueList)*/,v3/*class(Color)*/,'CSSValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext'],
    ['Text', v4/*class(Text)*/],
    ['CharacterData', v15/*class(CharacterData)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'],
    ['Document', v16/*class(Document)*/],
    ['DocumentFragment', v17/*class(DocumentFragment)*/],
    ['HTMLMediaElement', v10/*class(MediaElement)*/],
    ['SVGAnimationElement', v6/*class(AnimationElement)*/],
    ['SVGComponentTransferFunctionElement', v7/*class(ComponentTransferFunctionElement)*/],
    ['SVGGradientElement', v8/*class(GradientElement)*/],
    ['SVGTextPositioningElement', v5/*class(TextPositioningElement)*/],
    ['SVGTextContentElement', v9/*class(TextContentElement)*/],
    ['SVGElement', v11/*class(SvgElement)*/],
    ['Element', v18/*class(Element)*/],
    ['Entry', 'Entry|DirectoryEntry|FileEntry'],
    ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'],
    ['ProgressEvent', v13/*class(ProgressEvent)*/],
    ['MouseEvent', v12/*class(MouseEvent)*/],
    ['UIEvent', v14/*class(UIEvent)*/],
    ['Event', [v13/*class(ProgressEvent)*/,v14/*class(UIEvent)*/,'Event|WebKitAnimationEvent|AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent'].join('|')],
    ['IDBRequest', v20/*class(IDBRequest)*/],
    ['MediaStream', v21/*class(MediaStream)*/],
    ['Node', v22/*class(Node)*/],
    ['WorkerContext', v23/*class(WorkerContext)*/],
    ['EventTarget', [v19/*class(AbstractWorker)*/,v20/*class(IDBRequest)*/,v21/*class(MediaStream)*/,v22/*class(Node)*/,v23/*class(WorkerContext)*/,'EventTarget|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue'],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet'],
    ['NodeList', 'NodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=vote_demo.dart.js.map